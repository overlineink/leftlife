{"version":3,"file":"ngx-auth-firebaseui.umd.js","sources":["../../tmp/module/services/firestore-sync.service.ts","../../tmp/module/enums/accounts.enum.ts","../../tmp/module/services/auth-process.service.ts","../../tmp/module/components/legality-dialog/legality-dialog.component.ts","../../tmp/module/components/auth/auth.component.ts","../../tmp/module/components/user/user.component.ts","../../tmp/module/components/providers/auth.providers.component.ts","../../tmp/module/components/email-confirmation/email-confirmation.component.ts","../../tmp/module/interfaces/config.interface.ts","../../tmp/module/guards/logged-in.guard.ts","../../tmp/module/ngx-auth-firebase-u-i.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument} from '@angular/fire/firestore';\nimport {QueryFn} from '@angular/fire/firestore/interfaces';\nimport {UserInfo} from 'firebase';\n\nexport const collections = {\n  users: 'users',\n};\n\n@Injectable()\nexport class FirestoreSyncService {\n\n  constructor(public afs: AngularFirestore) {\n    // this.afs.firestore.settings({timestampsInSnapshots: true});\n  }\n\n  // get timestamp() {\n  //     return firebase.firestore.FieldValue.serverTimestamp();\n  // }\n\n  public getUserDocRefByUID(uid: string): AngularFirestoreDocument<UserInfo> {\n    return this.afs.doc(`${collections.users}/${uid}`);\n  }\n\n\n  public getUsersCollectionRef(queryFn?: QueryFn): AngularFirestoreCollection<UserInfo> {\n    return this.afs.collection(`${collections.users}/`, queryFn);\n  }\n\n  public deleteUserData(uid: string): Promise<any> {\n    const userRef: AngularFirestoreDocument<UserInfo> = this.getUserDocRefByUID(uid);\n    return userRef.delete();\n  }\n\n\n  public updateUserData(user: UserInfo): Promise<any> {\n    // Sets user$ data to firestore on login\n    const userRef: AngularFirestoreDocument<UserInfo> = this.getUserDocRefByUID(user.uid);\n    const data: UserInfo = {\n      uid: user.uid,\n      email: user.email,\n      displayName: user.displayName,\n      photoURL: user.photoURL,\n      phoneNumber: user.phoneNumber,\n      providerId: user.providerId\n    };\n    return userRef.set(data, {merge: true});\n  }\n}\n","export enum Accounts {\n  NONE = 'account',\n  CHECK = 'account-check',\n  EDIT = 'account-edit',\n  OFF = 'account-off',\n  REMOVE = 'account-remove',\n}\n","import {EventEmitter, Inject, Injectable} from '@angular/core';\nimport {MatSnackBar} from '@angular/material';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {ICredentials, ISignInProcess, ISignUpProcess} from '../interfaces/main.interface';\nimport {NgxAuthFirebaseUIConfig} from '../interfaces/config.interface';\nimport {FirestoreSyncService} from './firestore-sync.service';\nimport {Accounts} from '../enums';\nimport {firebase} from '@firebase/app';\n\nimport '@firebase/auth';\nimport {User, UserInfo} from 'firebase/app';\nimport {NgxAuthFirebaseUIConfigToken} from '../ngx-auth-firebase-u-i.module';\n// import User = firebase.User;\n\nimport UserCredential = firebase.auth.UserCredential;\n\nexport const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\nexport const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\nexport const twitterAuthProvider = new firebase.auth.TwitterAuthProvider();\nexport const githubAuthProvider = new firebase.auth.GithubAuthProvider();\n\nexport enum AuthProvider {\n  ALL = 'all',\n  ANONYMOUS = 'anonymous',\n  EmailAndPassword = 'firebase',\n  Google = 'google',\n  Facebook = 'facebook',\n  Twitter = 'twitter',\n  Github = 'github',\n  PhoneNumber = 'phoneNumber'\n}\n\n@Injectable()\nexport class AuthProcessService implements ISignInProcess, ISignUpProcess {\n\n  onSuccessEmitter: EventEmitter<any> = new EventEmitter<any>();\n  onErrorEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n  isLoading: boolean;\n  emailConfirmationSent: boolean;\n\n  emailToConfirm: string;\n  messageOnAuthSuccess: string;\n  messageOnAuthError: string;\n\n  constructor(@Inject(NgxAuthFirebaseUIConfigToken)\n              public config: NgxAuthFirebaseUIConfig,\n              public afa: AngularFireAuth,\n              private _snackBar: MatSnackBar,\n              private _fireStoreService: FirestoreSyncService) {\n  }\n\n  /**\n   * Reset the password of the user via email\n   *\n   * @param email - the email to reset\n   * @returns\n   */\n  public resetPassword(email: string) {\n    return this.afa.auth.sendPasswordResetEmail(email)\n      .then(() => console.log('email sent'))\n      .catch((error) => this.onErrorEmitter.next(error));\n  }\n\n  /**\n   * General sign in mechanism to authenticate the users with a firebase project\n   * using a traditional way, via username and password or by using an authentication provider\n   * like google, facebook, twitter and github\n   *\n   * @param provider - the provider to authenticate with (google, facebook, twitter, github)\n   * @param credentials\n   * @returns\n   */\n  public async signInWith(provider: AuthProvider, credentials?: ICredentials) {\n    try {\n      this.isLoading = true;\n      let signInResult: UserCredential | any;\n\n      switch (provider) {\n        case AuthProvider.ANONYMOUS:\n          signInResult = await this.afa.auth.signInAnonymously() as UserCredential;\n          break;\n\n        case AuthProvider.EmailAndPassword:\n          signInResult = await this.afa.auth.signInWithEmailAndPassword(credentials.email, credentials.password) as UserCredential;\n          break;\n\n        case AuthProvider.Google:\n          signInResult = await this.afa.auth.signInWithPopup(googleAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Facebook:\n          signInResult = await this.afa.auth.signInWithPopup(facebookAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Twitter:\n          signInResult = await this.afa.auth.signInWithPopup(twitterAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Github:\n          signInResult = await this.afa.auth.signInWithPopup(githubAuthProvider) as UserCredential;\n          break;\n\n        default:\n          throw new Error(`${AuthProvider[provider]} is not available as auth provider`);\n\n      }\n      await this.handleSuccess(signInResult);\n    } catch (err) {\n      this.handleError(err);\n      console.error(err);\n      // this._snackBar.open(err.message, 'OK', {duration: 5000});\n      this.onErrorEmitter.next(err);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  /**\n   * Sign up new users via email and password.\n   * After that the user should verify and confirm an email sent via the firebase\n   *\n   * @param name - the name if the new user\n   * @param credentials\n   * @returns\n   */\n  public async signUp(name: string, credentials: ICredentials) {\n    try {\n      this.isLoading = true;\n      const userCredential: UserCredential = await this.afa.auth.createUserWithEmailAndPassword(credentials.email, credentials.password);\n      const user = userCredential.user;\n\n      if (this.config.enableFirestoreSync) {\n        await this._fireStoreService\n          .getUserDocRefByUID(user.uid)\n          .set({\n            uid: user.uid,\n            displayName: name,\n            email: user.email,\n            photoURL: user.photoURL\n          } as User);\n\n        await this.updateProfile(name, user.photoURL);\n      }\n\n      await user.sendEmailVerification();\n      this.emailConfirmationSent = true;\n      this.emailToConfirm = credentials.email;\n\n      await this.handleSuccess(userCredential);\n    } catch (err) {\n      this.handleError(err);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  /**\n   * Update the profile (name + photo url) of the authenticated user in the\n   * firebase authentication feature (not in firestore)\n   *\n   * @param name - the new name of the authenticated user\n   * @param photoURL - the new photo url of the authenticated user\n   * @returns\n   */\n  public async updateProfile(name: string, photoURL: string): Promise<any> {\n    return await this.afa.auth.currentUser.updateProfile({displayName: name, photoURL: photoURL});\n  }\n\n  public async deleteAccount(): Promise<any> {\n    return await this.afa.auth.currentUser.delete();\n  }\n\n  public parseUserInfo(user: User): UserInfo {\n    return {\n      uid: user.uid,\n      displayName: user.displayName,\n      email: user.email,\n      phoneNumber: user.phoneNumber,\n      photoURL: user.photoURL,\n      providerId: user.providerData.length > 0 ? user.providerData[0].providerId : null\n    };\n  }\n\n  public getUserPhotoUrl(): string {\n\n    const user: firebase.User | null = this.afa.auth.currentUser;\n\n    if (!user) {\n      return;\n    } else if (user.photoURL) {\n      return user.photoURL;\n    } else if (user.emailVerified) {\n      return this.getPhotoPath(Accounts.CHECK);\n    } else if (user.isAnonymous) {\n      return this.getPhotoPath(Accounts.OFF);\n    } else {\n      return this.getPhotoPath(Accounts.NONE);\n    }\n  }\n\n  public getPhotoPath(image: string) {\n    return `assets/user/${image}.svg`;\n  }\n\n  public signInWithPhoneNumber() {\n    // todo: 3.1.18\n  }\n\n  async handleSuccess(userCredential: UserCredential) {\n    this.onSuccessEmitter.next(userCredential.user);\n    if (this.config.enableFirestoreSync) {\n      try {\n        await this._fireStoreService.updateUserData(this.parseUserInfo(userCredential.user));\n      } catch (e) {\n        console.error(`Error occurred while updating user data with firestore: ${e}`);\n      }\n    }\n\n    if (this.config.toastMessageOnAuthSuccess) {\n      this._snackBar.open(this.messageOnAuthSuccess ? this.messageOnAuthSuccess :\n        `Hello ${userCredential.user.displayName ? userCredential.user.displayName : ''}!`,\n        'OK', {duration: 5000});\n    }\n  }\n\n  handleError(error: any) {\n    this.onErrorEmitter.next(error);\n    if (this.config.toastMessageOnAuthError) {\n      this._snackBar.open(this.messageOnAuthError ? this.messageOnAuthError :\n        error.message, 'OK', {duration: 5000});\n    }\n    console.error(error);\n  }\n\n}\n","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\nimport {LegalityDialogParams, LegalityDialogResult} from '../../interfaces/legality.dialog.intreface';\n\n@Component({\n  selector: 'ngx-auth-firebaseui-legality-dialog',\n  template: `\n    <h1 matDialogTitle>Legal requirements</h1>\n\n    <mat-dialog-content>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start\">\n        <mat-checkbox *ngIf=\"this.data.tosUrl\" [(ngModel)]=\"checkTOS\">\n          I agree to the\n          <span>&nbsp;</span>\n          <a target=\"_blank\"\n             [href]=\"this.data.tosUrl\">\n            Terms of Service and Conditions\n          </a>\n        </mat-checkbox>\n\n        <mat-checkbox *ngIf=\"this.data.privacyPolicyUrl\"\n                      [(ngModel)]=\"checkPrivacyPolicy\">\n          I have read and agree to the\n          <span>&nbsp;</span>\n          <a target=\"_blank\"\n             [href]=\"this.data.privacyPolicyUrl\">\n            Privacy\n          </a>\n        </mat-checkbox>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n      <button id=\"decline-action\"\n              mat-raised-button\n              matDialogClose\n              color=\"warn\">Decline</button>\n      <button id=\"confirm-action\"\n              mat-raised-button\n              color=\"primary\"\n              [disabled]=\"disableConfirmActionButton\"\n              (click)=\"closeDialog()\">Confirm\n      </button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n    ::ng-deep .mat-checkbox-label{display:flex;flex-wrap:wrap}mat-dialog-content div{margin-top:1.5rem}mat-dialog-actions{margin-top:1rem}\n  `]\n})\nexport class LegalityDialogComponent {\n\n  checkTOS: boolean;\n  checkPrivacyPolicy: boolean;\n  private _disableConfirmActionButton = false;\n\n  constructor(public dialogRef: MatDialogRef<LegalityDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: LegalityDialogParams) {\n  }\n\n\n  get disableConfirmActionButton(): boolean {\n    if (this.data.tosUrl && this.data.privacyPolicyUrl) {\n      this._disableConfirmActionButton = !(this.checkTOS && this.checkPrivacyPolicy);\n    } else if (this.data.tosUrl && !this.data.privacyPolicyUrl) {\n      this._disableConfirmActionButton = !this.checkTOS\n    } else if (!this.data.tosUrl && this.data.privacyPolicyUrl) {\n      this._disableConfirmActionButton = !this.checkPrivacyPolicy\n    }\n    return this._disableConfirmActionButton;\n  }\n\n  closeDialog() {\n    const result: LegalityDialogResult = {\n      checked: !this.disableConfirmActionButton,\n      authProvider: this.data.authProvider\n    };\n    this.dialogRef.close(result);\n  }\n\n}\n","import {Component, Inject, Input, OnChanges, OnDestroy, OnInit, Output, PLATFORM_ID, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MatDialog, MatDialogRef, MatFormFieldAppearance} from '@angular/material';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {isPlatformBrowser} from '@angular/common';\nimport {Subscription} from 'rxjs/internal/Subscription';\n\nimport {AuthProcessService, AuthProvider} from '../../services/auth-process.service';\nimport {LegalityDialogComponent} from '../../components/legality-dialog/legality-dialog.component';\nimport {LegalityDialogParams, LegalityDialogResult} from '../../interfaces/legality.dialog.intreface';\n\n\nexport const EMAIL_REGEX = new RegExp(['^(([^<>()[\\\\]\\\\\\.,;:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\.,;:\\\\s@\\\"]+)*)',\n  '|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.',\n  '[0-9]{1,3}\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+',\n  '[a-zA-Z]{2,}))$'].join(''));\n\nexport const PHONE_NUMBER_REGEX = new RegExp(/^\\+(?:[0-9] ?){6,14}[0-9]$/);\n\n@Component({\n  selector: 'ngx-auth-firebaseui',\n  template: `\n    <mat-tab-group [color]=\"color\" [selectedIndex]=\"tabIndex\">\n      <!--Reset password tab-->\n      <mat-tab *ngIf=\"passwordResetWished\" label=\"Reset Password\">\n        <form [formGroup]=\"resetPasswordFormGroup\" (ngSubmit)=\"resetPasswordFormGroup.valid && resetPassword()\">\n\n          <mat-card>\n            <mat-card-header fxLayoutAlign=\"end\">\n              <button mat-icon-button\n                      [color]=\"color\"\n                      matTooltip=\"close\"\n                      matTooltipPosition=\"above\"\n                      (click)=\"passwordResetWished = false\">\n                <mat-icon>close</mat-icon>\n              </button>\n            </mat-card-header>\n\n            <mat-card-content>\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Reset e-mail address to password</mat-label>\n                <input matInput\n                       [readonly]=\"passReset\"\n                       formControlName=\"email\"\n                       title=\"Reset e-mail address to password\"\n                       required>\n                <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                <mat-error *ngIf=\"resetPasswordEmailFormControl.hasError('required')\">\n                  E-mail is required to reset the password!\n                </mat-error>\n                <mat-error *ngIf=\"resetPasswordEmailFormControl.hasError('pattern')\">\n                  Please enter a valid e-mail address\n                </mat-error>\n              </mat-form-field>\n            </mat-card-content>\n            <mat-card-actions fxLayoutAlign=\"center\">\n              <button mat-raised-button\n                      type=\"submit\"\n                      [color]=\"color\"\n                      [disabled]=\"passReset\">\n                Reset\n              </button>\n            </mat-card-actions>\n            <mat-card-footer *ngIf=\"passReset\" fxLayoutAlign=\"center\">\n              <p>Reset requested. Check your e-mail instructions.</p>\n            </mat-card-footer>\n            <mat-card-footer>\n              <mat-progress-bar *ngIf=\"authProcess.isLoading\" mode=\"indeterminate\"></mat-progress-bar>\n            </mat-card-footer>\n          </mat-card>\n        </form>\n      </mat-tab>\n\n      <!--Sign in tab-->\n      <mat-tab label=\"Sign in\">\n        <mat-card>\n          <mat-card-title>Signing in</mat-card-title>\n          <mat-card-content>\n            <form [formGroup]=\"signInFormGroup\"\n                  (ngSubmit)=\"signInFormGroup.valid &&\n                  authProcess.signInWith\n                  (authProviders.EmailAndPassword,\n                  {email:signInFormGroup.value.email, password: signInFormGroup.value.password})\">\n              <div fxLayout=\"column\" fxLayoutAlign=\"center\">\n                <mat-form-field [appearance]=\"appearance\">\n                  <mat-label>E-mail</mat-label>\n                  <input matInput\n                         placeholder=\"E-mail\"\n                         formControlName=\"email\"\n                         required>\n                  <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                  <mat-error *ngIf=\"signInEmailFormControl.hasError('required')\">\n                    E-mail is required\n                  </mat-error>\n                  <mat-error *ngIf=\"signInEmailFormControl.hasError('pattern')\">\n                    Please enter a valid e-mail address\n                  </mat-error>\n                </mat-form-field>\n\n                <mat-form-field [appearance]=\"appearance\">\n                  <mat-label>Password</mat-label>\n                  <input matInput\n                         type=\"password\"\n                         placeholder=\"Password\"\n                         minlength=\"6\"\n                         maxlength=\"25\"\n                         formControlName=\"password\"\n                         required>\n                  <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n                  <mat-hint align=\"end\" aria-live=\"polite\">\n                    {{signInFormGroup.value.password.length}} / 25\n                  </mat-hint>\n                  <mat-error *ngIf=\"sigInPasswordFormControl.hasError('required')\">\n                    Please do not forget the password\n                  </mat-error>\n                  <mat-error *ngIf=\"sigInPasswordFormControl.hasError('minlength')\">\n                    The password must be at least 6 characters long.\n                  </mat-error>\n                  <mat-error *ngIf=\"sigInPasswordFormControl.hasError('maxlength')\">\n                    The password must not exceed 25 characters\n                  </mat-error>\n                </mat-form-field>\n\n                <button mat-raised-button\n                        style=\"margin-top: 20px\"\n                        type=\"submit\"\n                        class=\"space-top\"\n                        [color]=\"color\">\n                  Log In\n                </button>\n\n              </div>\n            </form>\n\n            <div fxLayoutAlign=\"center\">\n              <button mat-button\n                      class=\"space-top\"\n                      [color]=\"color\"\n                      (click)=\"createForgotPasswordTab()\">\n                Forgot Password?\n              </button>\n            </div>\n\n          </mat-card-content>\n          <mat-card-footer *ngIf=\"authProcess.isLoading\">\n            <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n          </mat-card-footer>\n        </mat-card>\n      </mat-tab>\n\n      <!--tab register-->\n      <mat-tab label=\"Register\">\n        <mat-card>\n          <mat-card-title>Registration</mat-card-title>\n          <div *ngIf=\"!authProcess.emailConfirmationSent;then register else confirm\"></div>\n          <ng-template #register>\n            <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center\">\n              <form [formGroup]=\"signUpFormGroup\" (ngSubmit)=\"signUpFormGroup.valid &&\n              processLegalSignUP(authProvider.EmailAndPassword)\">\n                <div fxLayout=\"column\" fxLayoutAlign=\"center\">\n                  <!--name-->\n                  <mat-form-field [appearance]=\"appearance\">\n                    <!--labels will work only with @angular/material@6.2.0 -->\n                    <mat-label>Name</mat-label>\n                    <input matInput\n                           placeholder=\"Name\"\n                           minlength=\"2\"\n                           maxlength=\"30\"\n                           [formControl]=\"sigUpNameFormControl\"\n                           required>\n                    <mat-icon matSuffix [color]=\"color\">person</mat-icon>\n                    <mat-hint align=\"end\" aria-live=\"polite\">\n                      {{signUpFormGroup.value.name?.length}} / 25\n                    </mat-hint>\n                    <mat-error *ngIf=\"sigUpNameFormControl.hasError('required')\">\n                      Name is required\n                    </mat-error>\n                    <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('minlength')\">\n                      The name is too short!\n                    </mat-error>\n                    <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('maxlength')\">\n                      The name is too long!\n                    </mat-error>\n                  </mat-form-field>\n\n                  <!--email-->\n                  <mat-form-field [appearance]=\"appearance\">\n                    <mat-label>E-mail</mat-label>\n                    <input matInput\n                           placeholder=\"E-mail\"\n                           type=\"email\"\n                           [formControl]=\"sigUpEmailFormControl\">\n                    <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                    <mat-error *ngIf=\"sigUpEmailFormControl.hasError('required')\">\n                      E-mail is required\n                    </mat-error>\n                    <mat-error *ngIf=\"sigUpEmailFormControl.hasError('pattern')\">\n                      Please enter a valid e-mail address\n                    </mat-error>\n                  </mat-form-field>\n\n                  <!--password-->\n                  <div fxLayout=\"column\">\n\n                    <mat-form-field [appearance]=\"appearance\">\n                      <mat-label>Password</mat-label>\n                      <input matInput\n                             type=\"password\"\n                             placeholder=\"password\"\n                             name=\"password\"\n                             [formControl]=\"sigUpPasswordFormControl\"\n                             required>\n                      <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n\n                      <mat-hint align=\"end\" aria-live=\"polite\">\n                        {{signUpFormGroup.value.password?.length}} / 25\n                      </mat-hint>\n\n                      <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('required')\" class=\"cut-text\">\n                        Please do not forget the password\n                      </mat-error>\n\n                      <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('minlength')\" class=\"cut-text\">\n                        The password must be at least 6 characters long.\n                      </mat-error>\n                      <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('maxlength')\" class=\"cut-text\">\n                        The password can not be longer than 25 characters.\n                      </mat-error>\n\n                    </mat-form-field>\n\n                    <mat-password-strength\n                      [password]=\"signUpFormGroup.value.password\"\n                      [externalError]=\"sigUpPasswordFormControl.dirty\">\n                    </mat-password-strength>\n\n                  </div>\n\n                  <button mat-raised-button\n                          style=\"margin-top: 20px\"\n                          type=\"submit\"\n                          [color]=\"color\">\n                    Register\n                  </button>\n\n                </div>\n              </form>\n\n              <button *ngIf=\"guestEnabled\"\n                      mat-button\n                      style=\"margin-top: 20px\"\n                      [color]=\"color\"\n                      (click)=\"processLegalSignUP(authProvider.ANONYMOUS)\">\n                <mat-icon>fingerprint</mat-icon>\n                continue as guest\n              </button>\n\n            </mat-card-content>\n\n            <mat-card-footer *ngIf=\"authProcess.isLoading\">\n              <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </mat-card-footer>\n\n          </ng-template>\n\n          <!--confirm template-->\n          <ng-template #confirm>\n            <ngx-auth-firebaseui-email-confirmation [email]=\"authProcess.emailToConfirm\"\n                                                    [goBackURL]=\"goBackURL\">\n            </ngx-auth-firebaseui-email-confirmation>\n          </ng-template>\n\n        </mat-card>\n      </mat-tab>\n    </mat-tab-group>\n    <mat-divider></mat-divider>\n    <ngx-auth-firebaseui-providers [providers]=\"providers\"></ngx-auth-firebaseui-providers>\n  `,\n  styles: [`\n    .mat-card{margin:2rem}.space-top{margin-top:.5rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}\n  `]\n})\n\nexport class AuthComponent implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  providers: string[] | string = AuthProvider.ALL; //  google, facebook, twitter, github as array or all as one single string\n\n  @Input()\n  appearance: MatFormFieldAppearance;\n\n  @Input()\n  tabIndex: number | null;\n\n  @Input()\n  guestEnabled = true;\n\n  @Input()\n  tosUrl: string;\n\n  @Input()\n  privacyPolicyUrl: string;\n\n  @Input()\n  goBackURL: string;\n\n  @Input()\n  messageOnAuthSuccess: string;\n\n  @Input()\n  messageOnAuthError: string;\n\n  @Output()\n  onSuccess: any;\n\n  @Output()\n  onError: any;\n\n  authProvider = AuthProvider;\n  passwordResetWished: boolean;\n\n  public signInFormGroup: FormGroup;\n  public signUpFormGroup: FormGroup;\n  public resetPasswordFormGroup: FormGroup;\n\n  onErrorSubscription: Subscription;\n  authenticationError = false;\n\n  passReset = false;\n  dialogRef: MatDialogRef<LegalityDialogComponent>;\n\n  authProviders = AuthProvider;\n\n  signInEmailFormControl: AbstractControl;\n  sigInPasswordFormControl: AbstractControl;\n\n  sigUpNameFormControl: AbstractControl;\n  sigUpEmailFormControl: AbstractControl;\n  sigUpPasswordFormControl: AbstractControl;\n  sigUpPasswordConfirmationFormControl: AbstractControl;\n  resetPasswordEmailFormControl: AbstractControl;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object,\n              public auth: AngularFireAuth,\n              public authProcess: AuthProcessService,\n              public dialog: MatDialog) {\n\n    this.onSuccess = authProcess.onSuccessEmitter;\n    this.onError = authProcess.onErrorEmitter;\n  }\n\n  public ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.onErrorSubscription = this.onError.subscribe(() => this.authenticationError = true);\n    }\n    this.updateAuthSnackbarMessages();\n    // auth form's initialization\n    this._initSignInFormGroupBuilder();\n    this._initSignUpFormGroupBuilder();\n    this._initResetPasswordFormGroupBuilder();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.messageOnAuthSuccess || changes.messageOnAuthError) {\n      this.updateAuthSnackbarMessages();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    if (this.onErrorSubscription) {\n      this.onErrorSubscription.unsubscribe();\n    }\n  }\n\n  get color(): string {\n    return this.authenticationError ? 'warn' : 'primary';\n  }\n\n  public updateAuthSnackbarMessages(): void {\n    this.authProcess.messageOnAuthSuccess = this.messageOnAuthSuccess;\n    this.authProcess.messageOnAuthError = this.messageOnAuthError;\n  }\n\n  public createForgotPasswordTab() {\n    this.passwordResetWished = true;\n    setTimeout(() => this.tabIndex = 0, 100);\n  }\n\n  public processLegalSignUP(authProvider?: AuthProvider) {\n    if (this.tosUrl || this.privacyPolicyUrl) {\n      const params: LegalityDialogParams = {\n        tosUrl: this.tosUrl,\n        privacyPolicyUrl: this.privacyPolicyUrl,\n        authProvider: authProvider\n      };\n\n      this.dialogRef = this.dialog.open(LegalityDialogComponent, {data: params});\n      this.dialogRef.afterClosed().subscribe((result: LegalityDialogResult) => {\n        // console.log('this.dialogRef.afterClosed(): ', result);\n        if (result && result.checked) {\n          this._afterSignUpMiddleware(result.authProvider).then(() => this.signUpFormGroup.reset());\n        }\n        this.dialogRef = null;\n      });\n    } else {\n      this._afterSignUpMiddleware(authProvider).then(() => this.signUpFormGroup.reset());\n    }\n  }\n\n  public async signUp() {\n    return await this.authProcess.signUp\n    (\n      this.signUpFormGroup.value.name,\n      {\n        email: this.signUpFormGroup.value.email,\n        password: this.signUpFormGroup.value.password\n      }\n    );\n  }\n\n  public async signUpAnonymously() {\n    return await this.authProcess.signInWith(this.authProvider.ANONYMOUS);\n  }\n\n\n  public resetPassword() {\n    this.authProcess.resetPassword(this.resetPasswordEmailFormControl.value)\n      .then(() => this.passReset = true);\n  }\n\n  private _initSignInFormGroupBuilder() {\n    this.signInFormGroup = new FormGroup({});\n    this.signInFormGroup.registerControl('email', this.signInEmailFormControl = new FormControl('',\n      [\n        Validators.required,\n        Validators.pattern(EMAIL_REGEX)\n      ]));\n    this.signInFormGroup.registerControl('password', this.sigInPasswordFormControl = new FormControl('',\n      [\n        Validators.required,\n        Validators.minLength(6),\n        Validators.maxLength(25),\n      ]));\n  }\n\n  private _initSignUpFormGroupBuilder() {\n    this.signUpFormGroup = new FormGroup({\n      name: this.sigUpNameFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.minLength(2),\n          Validators.maxLength(30),\n        ]),\n      email: this.sigUpEmailFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.pattern(EMAIL_REGEX)\n        ]),\n      password: this.sigUpPasswordFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.maxLength(25),\n        ])\n    });\n  }\n\n  private _initResetPasswordFormGroupBuilder() {\n    this.resetPasswordFormGroup = new FormGroup({\n      email: this.resetPasswordEmailFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.pattern(EMAIL_REGEX)\n        ])\n    });\n  }\n\n  private _afterSignUpMiddleware(authProvider?: AuthProvider) {\n    if (authProvider === this.authProvider.ANONYMOUS) {\n      return this.signUpAnonymously();\n    }\n    return this.signUp();\n  }\n\n}\n","import {Component, EventEmitter, Inject, Input, OnInit, Output} from '@angular/core';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {MatFormFieldAppearance, MatSnackBar} from '@angular/material';\nimport {AuthProcessService} from '../../services/auth-process.service';\nimport {AbstractControl, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {EMAIL_REGEX, PHONE_NUMBER_REGEX} from '../auth/auth.component';\nimport {User} from 'firebase';\nimport {FirestoreSyncService} from '../../services/firestore-sync.service';\nimport {NgxAuthFirebaseUIConfig, NgxAuthFirebaseUIConfigToken} from '../../ngx-auth-firebase-u-i.module';\n\n@Component({\n  selector: 'ngx-auth-firebaseui-user',\n  template: `\n    <div *ngIf=\"auth.authState| async as user; then authenticated else none\">\n\n    </div>\n\n    <ng-template #authenticated>\n      <mat-card *ngIf=\"auth.user | async as user\">\n        <!--<form [formGroup]=\"updateFormGroup\" >-->\n        <!--card header-->\n        <mat-card-header fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n          <img mat-card-avatar [src]=\"authProcess?.getUserPhotoUrl()\">\n\n          <div *ngIf=\"user.emailVerified; then emailVerified else emailNotVerified\"></div>\n          <ng-template #emailVerified>\n            <mat-icon color=\"primary\"\n                      matTooltip=\"email is verified\"\n                      matTooltipPosition=\"after\">\n              verified_user\n            </mat-icon>\n          </ng-template>\n          <ng-template #emailNotVerified>\n            <mat-icon color=\"warn\"\n                      matTooltip=\"email is not verified\"\n                      matTooltipPosition=\"after\">\n              warning\n            </mat-icon>\n          </ng-template>\n\n        </mat-card-header>\n\n        <!--card content-->\n        <mat-card-content *ngIf=\"editMode; then edit else readonly\">\n        </mat-card-content>\n\n        <ng-template #edit>\n          <form [formGroup]=\"updateFormGroup\" (submit)=\"save()\">\n\n            <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center center\">\n              <div fxLayoutAlign=\"center\">\n                <button mat-raised-button color=\"warn\" class=\"edit-button\"\n                        (click)=\"changeEditMode()\">\n                  cancel\n                </button>\n              </div>\n\n              <!--name-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Name</mat-label>\n                <input matInput\n                       placeholder=\"Name\"\n                       [formControl]=\"updateNameFormControl\"\n                       [value]=\"user.displayName\">\n                <mat-icon matSuffix>person</mat-icon>\n                <mat-hint align=\"end\" aria-live=\"polite\">\n                  {{updateNameFormControl.value.length}} / 25\n                </mat-hint>\n                <mat-error *ngIf=\"updateNameFormControl.hasError('required')\">\n                  Name is required\n                </mat-error>\n              </mat-form-field>\n\n              <!--email-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>E-mail</mat-label>\n                <input matInput\n                       placeholder=\"E-mail\"\n                       [formControl]=\"updateEmailFormControl\"\n                       [value]=\"user.email\">\n                <mat-icon matSuffix>email</mat-icon>\n                <mat-error *ngIf=\"updateEmailFormControl.hasError('required')\">\n                  E-mail is required {{updateEmailFormControl.value}}\n                </mat-error>\n                <mat-error *ngIf=\"updateEmailFormControl.hasError('pattern')\">\n                  Please enter a valid e-mail address {{updateEmailFormControl.value}}\n                </mat-error>\n              </mat-form-field>\n\n              <!--phone number-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Phone number</mat-label>\n                <input matInput\n                       type=\"number\"\n                       placeholder=\"Phone number\"\n                       [formControl]=\"updatePhoneNumberFormControl\"\n                       [value]=\"user.phoneNumber\">\n                <mat-icon matSuffix>phone</mat-icon>\n                <mat-hint align=\"end\" aria-live=\"polite\">\n                  The phone number is international. Therefore, it should start with a + sign or 00,\n                  followed by the country code, - and national number e.g: +49-12345678 or 0041-1234567890\n\n                  NOTE : the phone number must be a valid phone credential !!\n                </mat-hint>\n                <mat-error *ngIf=\"updatePhoneNumberFormControl.hasError('pattern')\">\n                  Please enter a valid phone number\n                </mat-error>\n              </mat-form-field>\n\n            </mat-card-content>\n\n            <mat-card-actions fxLayout=\"column\">\n              <button mat-button\n                      color=\"primary\"\n                      type=\"submit\">\n                Save changes\n              </button>\n            </mat-card-actions>\n          </form>\n        </ng-template>\n\n        <ng-template #readonly>\n          <div fxLayoutAlign=\"center\">\n            <button mat-raised-button color=\"primary\" class=\"edit-button\"\n                    (click)=\"changeEditMode()\">\n              edit\n            </button>\n          </div>\n\n          <!--name-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>Name</mat-label>\n            <input matInput\n                   placeholder=\"Name\"\n                   [value]=\"user.displayName\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">person</mat-icon>\n          </mat-form-field>\n\n          <!--email-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>E-mail</mat-label>\n            <input matInput\n                   placeholder=\"E-mail\" [value]=\"user.email\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">email</mat-icon>\n          </mat-form-field>\n\n          <!--phone number-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>Phone number</mat-label>\n            <input matInput\n                   placeholder=\"Phone number\"\n                   [value]=\"user.phoneNumber\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">phone</mat-icon>\n          </mat-form-field>\n\n          <mat-card-actions fxLayout=\"column\">\n            <button *ngIf=\"canLogout\" mat-button color=\"primary\" (click)=\"auth.auth.signOut()\">Sign out</button>\n            <button *ngIf=\"canDeleteAccount\" mat-button color=\"warn\" (click)=\"deleteAccount()\">Delete account</button>\n          </mat-card-actions>\n\n        </ng-template>\n\n      </mat-card>\n\n    </ng-template>\n\n\n    <ng-template #none>\n      <mat-card class=\"none-card\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <mat-icon color=\"accent\">warning</mat-icon>\n          <span>You are not logged in!</span>\n        </mat-card-content>\n      </mat-card>\n    </ng-template>\n  `,\n  styles: [`\n    .edit-button{margin:1rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.none-card{min-height:430px}.none-card span{font-size:24px;text-align:center;color:rgba(0,0,0,.54)}\n  `]\n})\nexport class UserComponent implements OnInit {\n\n  @Input()\n  editMode: boolean;\n\n  @Input()\n  canLogout = true;\n\n  @Input()\n  canDeleteAccount = true;\n\n  @Input()\n  appearance: MatFormFieldAppearance;\n\n  @Output()\n  onAccountDeleted: EventEmitter<void> = new EventEmitter();\n\n  updateFormGroup: FormGroup;\n  updateNameFormControl: AbstractControl;\n  updateEmailFormControl: AbstractControl;\n  updatePhoneNumberFormControl: AbstractControl;\n  updatePasswordFormControl: AbstractControl;\n\n  constructor(@Inject(NgxAuthFirebaseUIConfigToken)\n              public config: NgxAuthFirebaseUIConfig,\n              public auth: AngularFireAuth,\n              public authProcess: AuthProcessService,\n              private _fireStoreService: FirestoreSyncService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n  }\n\n  protected initUpdateFormGroup() {\n    const currentUser: User = this.auth.auth.currentUser;\n    this.updateFormGroup = new FormGroup({\n      name: this.updateNameFormControl = new FormControl(\n        {value: currentUser.displayName, disabled: true},\n        [\n          Validators.required,\n          Validators.minLength(2),\n          Validators.maxLength(25),\n        ]\n      ),\n\n      email: this.updateEmailFormControl = new FormControl(\n        {value: currentUser.email, disabled: true},\n        [\n          Validators.required,\n          Validators.pattern(EMAIL_REGEX)\n        ]),\n\n      phoneNumber: this.updatePhoneNumberFormControl = new FormControl('',\n        [Validators.pattern(PHONE_NUMBER_REGEX)])\n    });\n\n    this.updateFormGroup.enable();\n  }\n\n  changeEditMode() {\n    this.editMode = !this.editMode;\n\n    this.editMode ? this.initUpdateFormGroup() : this.reset();\n  }\n\n  reset() {\n    this.updateFormGroup.reset();\n    this.updateFormGroup.disable();\n    this.updateFormGroup = null;\n  }\n\n  // todo: 31.3.18\n  async save() {\n    if (this.updateFormGroup.dirty) {\n      const user = this.auth.auth.currentUser;\n      // user.updateProfile()\n      // user.updateEmail()\n      // console.log('form = ', this.updateFormGroup);\n\n      const snackBarMsg: string[] = [];\n\n      try {\n        if (this.updateNameFormControl.dirty) {\n          await user.updateProfile({displayName: this.updateNameFormControl.value, photoURL: null});\n          snackBarMsg.push(`your name has been update to ${user.displayName}`);\n        }\n\n        if (this.updateEmailFormControl.dirty) {\n          await user.updateEmail(this.updateEmailFormControl.value);\n          snackBarMsg.push(`your email has been update to ${user.email}`);\n        }\n\n        if (this.updatePhoneNumberFormControl.dirty) {\n          await user.updatePhoneNumber(this.updatePhoneNumberFormControl.value);\n          console.log('phone number = ', this.updatePhoneNumberFormControl.value);\n          snackBarMsg.push(`your phone number has been update to ${user.phoneNumber}`);\n        }\n\n        if (this.config.enableFirestoreSync) {\n          await this._fireStoreService.updateUserData(this.authProcess.parseUserInfo(user));\n        }\n\n      } catch (error) {\n        error.message ? this.snackBar.open(error.message, 'Ok') : this.snackBar.open(error, 'Ok');\n        console.error(error);\n        console.error(error.code);\n        console.error(error.message);\n      }\n\n\n      if (snackBarMsg.length > 0) {\n        this.snackBar.open(snackBarMsg.join('\\\\n'), 'Ok');\n      }\n      // this.updateFormGroup.reset();\n    }\n\n    this.editMode = false;\n  }\n\n  /**\n   * Delete the account of the current firebase user\n   *\n   * On Success, emit the <onAccountDeleted> event and toast a msg!#\n   * Otherwise, log the and toast and error msg!\n   *\n   */\n  async deleteAccount() {\n    try {\n      const user = this.auth.auth.currentUser;\n\n      await this.authProcess.deleteAccount();\n      if (this.config.enableFirestoreSync) {\n        await this._fireStoreService.deleteUserData(user.uid);\n      }\n      this.onAccountDeleted.emit();\n      this.editMode = false;\n      this.snackBar.open('Your account has been successfully deleted!', 'OK', {\n        duration: 5000\n      })\n    } catch (error) {\n      console.log('Error while delete user\\'s account', error);\n      this.snackBar.open('Error occurred while deleting your account!', 'OK', {\n        duration: 5000\n      })\n    }\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {MatIconRegistry} from '@angular/material';\nimport {AuthProcessService, AuthProvider} from '../../services/auth-process.service';\n\nexport enum Theme {\n  DEFAULT = 'default',\n  CLASSIC = 'classic',\n  STROKED = 'stroked',\n  FAB = 'fab',\n  MINI_FAB = 'mini-fab',\n  RAISED = 'raised',\n}\n\nexport enum Layout {\n  ROW = 'row',\n  COLUMN = 'column'\n}\n\n@Component({\n  selector: 'ngx-auth-firebaseui-providers',\n  template: `\n    <div [ngSwitch]=\"theme\">\n\n      <!--default icon buttons-->\n      <div *ngSwitchDefault\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google-colored\"></mat-icon>\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-button\n                class=\"facebook-filled\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-button\n                class=\"twitter-filled\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\"></mat-icon>\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n          GitHub\n        </button>\n      </div>\n\n      <!--classic-->\n      <div *ngSwitchCase=\"themes.CLASSIC\"\n           class=\"buttons-classic\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-button\n                class=\"google-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-button\n                class=\"facebook-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-button\n                class=\"twitter-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-button\n                class=\"github-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n      </div>\n\n      <!--stroked-->\n      <div *ngSwitchCase=\"themes.STROKED\"\n           class=\"buttons-classic\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-stroked-button\n                class=\"google-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-stroked-button\n                class=\"facebook-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-stroked-button\n                class=\"twitter-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-stroked-button\n                class=\"github-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n      </div>\n\n      <!--raised-->\n      <div *ngSwitchCase=\"themes.RAISED\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-raised-button\n                class=\"google-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-raised-button\n                class=\"facebook-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-raised-button\n                class=\"twitter-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-raised-button\n                class=\"github-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n      </div>\n\n      <!--fab-->\n      <div *ngSwitchCase=\"themes.FAB\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-fab\n                class=\"google-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-fab\n                class=\"facebook-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-fab\n                class=\"twitter-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-fab\n                class=\"github-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n        </button>\n      </div>\n\n      <!--mini-fab-->\n      <div *ngSwitchCase=\"themes.MINI_FAB\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           fxLayoutAlign.xs=\"center center\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-mini-fab\n                class=\"google-raised\"\n                fxFlexAlign=\"center\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-mini-fab\n                class=\"facebook-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-mini-fab\n                class=\"twitter-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\" class=\"icon-white\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-mini-fab\n                class=\"github-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n        </button>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host{display:block}:host .mat-icon{vertical-align:inherit}.space-full-xs{width:100%;margin:.4rem}.facebook-filled mat-icon{fill:#385899}.twitter-filled mat-icon{fill:#1da1f2}.buttons-raised button{color:#fff!important}.buttons-raised .google-raised{background-color:#db4437}.buttons-raised .facebook-raised{background-color:#385899}.buttons-raised .twitter-raised{background-color:#1da1f2}.buttons-raised .github-raised{background-color:#000}.buttons-classic button.google-classic{color:#db4437!important}.buttons-classic .facebook-classic{color:#385899!important}.buttons-classic .twitter-classic{color:#1da1f2!important}.buttons-classic .github-classic{color:#000!important}.icon-white{color:#fff}.icon-white mat-icon{fill:#fff}\n  `]\n})\nexport class AuthProvidersComponent {\n\n  @Input()\n  theme: string;\n  // theme: string = Theme.DEFAULT;\n\n  @Input()\n  layout: string = Layout.ROW;\n\n  @Input()\n  providers: string[] | string = AuthProvider.ALL; //  google, facebook, twitter, github\n\n  themes = Theme;\n  authProvider = AuthProvider;\n\n  constructor(public authProcess: AuthProcessService,\n              private _iconRegistry: MatIconRegistry,\n              private _sanitizer: DomSanitizer) {\n    _iconRegistry\n      .addSvgIcon('google',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/google.svg'))\n      .addSvgIcon('google-colored',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/google.svg'))\n      .addSvgIcon('facebook',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/facebook.svg'))\n      .addSvgIcon('twitter',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/twitter.svg'))\n      .addSvgIcon('github',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/github-circle.svg'))\n      .addSvgIcon('phone',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/phone.svg'));\n  }\n\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'ngx-auth-firebaseui-email-confirmation',\n  template: `\n    <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <mat-icon>email</mat-icon>\n      <div class=\"title\">\n        Confirm your e-mail address!\n      </div>\n      <div class=\"subtitle\">\n        <p>A confirmation e-mail has been sent to\n          <b><strong>{{email}}</strong></b>.</p>\n        <p>Check your inbox and click on the link\n                       \"Confirm my e-mail\" to confirm your e-mail address.</p>\n      </div>\n    </mat-card-content>\n\n    <mat-card-actions *ngIf=\"goBackURL\"\n                      fxLayoutAlign=\"center center\">\n      <a mat-button\n         color=\"primary\"\n         [href]=\"goBackURL\">\n        Go back\n      </a>\n    </mat-card-actions>\n  `,\n  styles: [`\n    .material-icons{font-size:4rem}.mat-icon{height:4rem;width:4rem;color:rgba(0,0,0,.54)}.title{font-size:20px;margin-top:16px}.subtitle{margin:16px auto;max-width:300px;color:rgba(0,0,0,.54);font-size:15px;text-align:center}.subtitle p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}\n  `]\n})\nexport class EmailConfirmationComponent {\n\n  @Input()\n  email: string;\n\n  @Input()\n  goBackURL: string;\n\n}\n","// import * as firebase from 'firebase';\n// import GoogleAuthProvider = firebase.auth.GoogleAuthProvider;\n// import FacebookAuthProvider = firebase.auth.FacebookAuthProvider;\n// import TwitterAuthProvider = firebase.auth.TwitterAuthProvider;\n// import GithubAuthProvider = firebase.auth.GithubAuthProvider;\nimport AuthProvider = firebase.auth.AuthProvider;\n\nexport interface NgxAuthFirebaseUIConfig {\n  // authNextURL?: string, // popup or redirect\n  // tosUrl?: string, // term of services url\n  // ppUrl?: string, // privacy policy url\n  // authProviders?: Array<AuthProvider>,\n  // languageCode?: string, // todo: 28.3.18\n  authGuardFallbackURL?: string,\n  enableFirestoreSync?: boolean,\n  toastMessageOnAuthSuccess?: boolean,\n  toastMessageOnAuthError?: boolean\n}\n\nexport const defaultAuthFirebaseUIConfig: NgxAuthFirebaseUIConfig = {\n  // authMethod: 'redirect',\n  // authProviders: [new GoogleAuthProvider(), new FacebookAuthProvider(), new TwitterAuthProvider(), new GithubAuthProvider()],\n  authGuardFallbackURL: '/',\n  enableFirestoreSync: true,\n  toastMessageOnAuthSuccess: true,\n  toastMessageOnAuthError: true\n};\n\n","import { Inject, Injectable } from '@angular/core'\nimport { CanActivate, Router } from '@angular/router'\nimport { map } from 'rxjs/operators'\nimport { Observable } from 'rxjs'\n\nimport {\n  AuthProcessService,\n  NgxAuthFirebaseUIConfig,\n  NgxAuthFirebaseUIConfigToken,\n} from '../ngx-auth-firebase-u-i.module'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoggedInGuard implements CanActivate {\n  constructor(\n    @Inject(NgxAuthFirebaseUIConfigToken)\n    private config: NgxAuthFirebaseUIConfig,\n    private router: Router,\n    private auth: AuthProcessService,\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.auth.afa.user.pipe(\n      map(res => {\n        if (res) {\n          return true\n        }\n        this.router.navigate([`/${this.config.authGuardFallbackURL}`]);\n        return false\n      }),\n    )\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule, ModuleWithProviders, InjectionToken, Inject} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\nimport {AuthComponent} from './components/auth/auth.component';\nimport {UserComponent} from './components/user/user.component';\nimport {AuthProvidersComponent} from './components/providers/auth.providers.component';\nimport {EmailConfirmationComponent} from './components/email-confirmation/email-confirmation.component';\nimport {defaultAuthFirebaseUIConfig, NgxAuthFirebaseUIConfig} from './interfaces/config.interface';\nimport {FirestoreSyncService} from './services/firestore-sync.service';\nimport {AuthProcessService} from './services/auth-process.service';\nimport {FirebaseAppConfig, FirebaseOptionsToken, FirebaseNameOrConfigToken} from '@angular/fire';\nimport {AngularFireAuthModule} from '@angular/fire/auth';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {\n  MatButtonModule,\n  MatCardModule,\n  MatChipsModule,\n  MatDialogModule,\n  MatDividerModule,\n  MatIconModule,\n  MatInputModule,\n  MatSnackBarModule,\n  MatTabsModule,\n  MatTooltipModule,\n  MatProgressSpinnerModule,\n  MatProgressBarModule,\n  MatCheckboxModule\n} from '@angular/material';\nimport {AngularFirestoreModule} from '@angular/fire/firestore';\nimport {MatPasswordStrengthModule} from '@angular-material-extensions/password-strength';\nimport {LegalityDialogComponent} from './components/legality-dialog/legality-dialog.component';\nimport {LoggedInGuard} from './guards/logged-in.guard';\n\n// Export module's public API\n// components\nexport {AuthComponent} from './components/auth/auth.component';\nexport {UserComponent} from './components/user/user.component';\nexport {AuthProvidersComponent, Theme, Layout} from './components/providers/auth.providers.component';\nexport {LegalityDialogComponent} from './components/legality-dialog/legality-dialog.component';\n// services\nexport {AuthProcessService, AuthProvider} from './services/auth-process.service';\nexport {FirestoreSyncService} from './services/firestore-sync.service';\n\n// guards\nexport {LoggedInGuard} from './guards/logged-in.guard';\n// interfaces\nexport {NgxAuthFirebaseUIConfig} from './interfaces/config.interface';\n\nexport const NgxAuthFirebaseUIConfigToken = new InjectionToken<NgxAuthFirebaseUIConfig>('NgxAuthFirebaseUIConfig');\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatTabsModule,\n    MatCardModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatDividerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatDialogModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatDialogModule,\n    MatPasswordStrengthModule,\n    AngularFireAuthModule,\n    AngularFirestoreModule,\n  ],\n  exports: [\n    AuthComponent,\n    UserComponent,\n    AuthProvidersComponent,\n    EmailConfirmationComponent,\n    // LoggedInGuard,\n    AngularFireAuthModule,\n    AngularFirestoreModule\n  ],\n  declarations: [\n    AuthComponent,\n    UserComponent,\n    AuthProvidersComponent,\n    EmailConfirmationComponent,\n    LegalityDialogComponent\n  ],\n  entryComponents: [\n    LegalityDialogComponent\n  ]\n})\n\n\nexport class NgxAuthFirebaseUIModule {\n  static forRoot(configFactory: FirebaseAppConfig,\n                 appNameFactory?: () => string,\n                 config?: NgxAuthFirebaseUIConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxAuthFirebaseUIModule,\n      providers:\n        [\n          {\n            provide: FirebaseOptionsToken,\n            useValue: configFactory\n          },\n          {\n            provide: FirebaseNameOrConfigToken,\n            useFactory: appNameFactory\n          },\n          {\n            provide: NgxAuthFirebaseUIConfigToken,\n            useValue: config\n          },\n          AuthProcessService,\n          FirestoreSyncService,\n          LoggedInGuard\n        ],\n    };\n  }\n\n  constructor(@Inject(NgxAuthFirebaseUIConfigToken)\n              public config: NgxAuthFirebaseUIConfig) {\n    this.config = Object.assign(defaultAuthFirebaseUIConfig, this.config);\n  }\n}\n"],"names":["Injectable","AngularFirestore","firebase","EventEmitter","AuthProcessService","AuthProvider","Inject","AngularFireAuth","MatSnackBar","Component","MatDialogRef","MAT_DIALOG_DATA","auth","isPlatformBrowser","FormGroup","FormControl","Validators","PLATFORM_ID","MatDialog","Input","Output","UserComponent","MatIconRegistry","DomSanitizer","LoggedInGuard","map","Router","InjectionToken","FirebaseOptionsToken","FirebaseNameOrConfigToken","NgModule","CommonModule","HttpClientModule","FlexLayoutModule","FormsModule","ReactiveFormsModule","MatTabsModule","MatCardModule","MatInputModule","MatButtonModule","MatIconModule","MatSnackBarModule","MatDividerModule","MatChipsModule","MatTooltipModule","MatDialogModule","MatCheckboxModule","MatProgressSpinnerModule","MatProgressBarModule","MatPasswordStrengthModule","AngularFireAuthModule","AngularFirestoreModule"],"mappings":"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"}