import { isPlatformBrowser, CommonModule } from '@angular/common';
import { Injectable, Inject, EventEmitter, Component, PLATFORM_ID, Input, Output, defineInjectable, inject, InjectionToken, NgModule } from '@angular/core';
import { FormGroup, FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { MatSnackBar, MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatIconRegistry, MatTabsModule, MatCardModule, MatInputModule, MatButtonModule, MatIconModule, MatSnackBarModule, MatDividerModule, MatChipsModule, MatTooltipModule, MatDialogModule, MatCheckboxModule, MatProgressSpinnerModule, MatProgressBarModule } from '@angular/material';
import { AngularFireAuth, AngularFireAuthModule } from '@angular/fire/auth';
import { AngularFirestore, AngularFirestoreModule } from '@angular/fire/firestore';
import { firebase } from '@firebase/app';
import '@firebase/auth';
import { DomSanitizer } from '@angular/platform-browser';
import { FirebaseOptionsToken, FirebaseNameOrConfigToken } from '@angular/fire';
import { FlexLayoutModule } from '@angular/flex-layout';
import { MatPasswordStrengthModule } from '@angular-material-extensions/password-strength';
import { Router } from '@angular/router';
import { map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var collections = {
    users: 'users',
};
var FirestoreSyncService = /** @class */ (function () {
    function FirestoreSyncService(afs) {
        this.afs = afs;
        // this.afs.firestore.settings({timestampsInSnapshots: true});
    }
    // get timestamp() {
    //     return firebase.firestore.FieldValue.serverTimestamp();
    // }
    // get timestamp() {
    //     return firebase.firestore.FieldValue.serverTimestamp();
    // }
    /**
     * @param {?} uid
     * @return {?}
     */
    FirestoreSyncService.prototype.getUserDocRefByUID = 
    // get timestamp() {
    //     return firebase.firestore.FieldValue.serverTimestamp();
    // }
    /**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        return this.afs.doc(collections.users + "/" + uid);
    };
    /**
     * @param {?=} queryFn
     * @return {?}
     */
    FirestoreSyncService.prototype.getUsersCollectionRef = /**
     * @param {?=} queryFn
     * @return {?}
     */
    function (queryFn) {
        return this.afs.collection(collections.users + "/", queryFn);
    };
    /**
     * @param {?} uid
     * @return {?}
     */
    FirestoreSyncService.prototype.deleteUserData = /**
     * @param {?} uid
     * @return {?}
     */
    function (uid) {
        /** @type {?} */
        var userRef = this.getUserDocRefByUID(uid);
        return userRef.delete();
    };
    /**
     * @param {?} user
     * @return {?}
     */
    FirestoreSyncService.prototype.updateUserData = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        // Sets user$ data to firestore on login
        /** @type {?} */
        var userRef = this.getUserDocRefByUID(user.uid);
        /** @type {?} */
        var data = {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName,
            photoURL: user.photoURL,
            phoneNumber: user.phoneNumber,
            providerId: user.providerId
        };
        return userRef.set(data, { merge: true });
    };
    FirestoreSyncService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    FirestoreSyncService.ctorParameters = function () { return [
        { type: AngularFirestore }
    ]; };
    return FirestoreSyncService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var Accounts = {
    NONE: 'account',
    CHECK: 'account-check',
    EDIT: 'account-edit',
    OFF: 'account-off',
    REMOVE: 'account-remove',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/** @type {?} */
var facebookAuthProvider = new firebase.auth.FacebookAuthProvider();
/** @type {?} */
var googleAuthProvider = new firebase.auth.GoogleAuthProvider();
/** @type {?} */
var twitterAuthProvider = new firebase.auth.TwitterAuthProvider();
/** @type {?} */
var githubAuthProvider = new firebase.auth.GithubAuthProvider();
/** @enum {string} */
var AuthProvider$$1 = {
    ALL: 'all',
    ANONYMOUS: 'anonymous',
    EmailAndPassword: 'firebase',
    Google: 'google',
    Facebook: 'facebook',
    Twitter: 'twitter',
    Github: 'github',
    PhoneNumber: 'phoneNumber',
};
var AuthProcessService$$1 = /** @class */ (function () {
    function AuthProcessService$$1(config, afa, _snackBar, _fireStoreService) {
        this.config = config;
        this.afa = afa;
        this._snackBar = _snackBar;
        this._fireStoreService = _fireStoreService;
        this.onSuccessEmitter = new EventEmitter();
        this.onErrorEmitter = new EventEmitter();
    }
    /**
     * Reset the password of the user via email
     *
     * @param email - the email to reset
     * @returns
     */
    /**
     * Reset the password of the user via email
     *
     * @param {?} email - the email to reset
     * @return {?}
     */
    AuthProcessService$$1.prototype.resetPassword = /**
     * Reset the password of the user via email
     *
     * @param {?} email - the email to reset
     * @return {?}
     */
    function (email) {
        var _this = this;
        return this.afa.auth.sendPasswordResetEmail(email)
            .then((/**
         * @return {?}
         */
        function () { return console.log('email sent'); }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.onErrorEmitter.next(error); }));
    };
    /**
     * General sign in mechanism to authenticate the users with a firebase project
     * using a traditional way, via username and password or by using an authentication provider
     * like google, facebook, twitter and github
     *
     * @param provider - the provider to authenticate with (google, facebook, twitter, github)
     * @param credentials
     * @returns
     */
    /**
     * General sign in mechanism to authenticate the users with a firebase project
     * using a traditional way, via username and password or by using an authentication provider
     * like google, facebook, twitter and github
     *
     * @param {?} provider - the provider to authenticate with (google, facebook, twitter, github)
     * @param {?=} credentials
     * @return {?}
     */
    AuthProcessService$$1.prototype.signInWith = /**
     * General sign in mechanism to authenticate the users with a firebase project
     * using a traditional way, via username and password or by using an authentication provider
     * like google, facebook, twitter and github
     *
     * @param {?} provider - the provider to authenticate with (google, facebook, twitter, github)
     * @param {?=} credentials
     * @return {?}
     */
    function (provider, credentials) {
        return __awaiter(this, void 0, void 0, function () {
            var signInResult, _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 16, 17, 18]);
                        this.isLoading = true;
                        signInResult = void 0;
                        _a = provider;
                        switch (_a) {
                            case AuthProvider$$1.ANONYMOUS: return [3 /*break*/, 1];
                            case AuthProvider$$1.EmailAndPassword: return [3 /*break*/, 3];
                            case AuthProvider$$1.Google: return [3 /*break*/, 5];
                            case AuthProvider$$1.Facebook: return [3 /*break*/, 7];
                            case AuthProvider$$1.Twitter: return [3 /*break*/, 9];
                            case AuthProvider$$1.Github: return [3 /*break*/, 11];
                        }
                        return [3 /*break*/, 13];
                    case 1: return [4 /*yield*/, this.afa.auth.signInAnonymously()];
                    case 2:
                        signInResult = (/** @type {?} */ (_b.sent()));
                        return [3 /*break*/, 14];
                    case 3: return [4 /*yield*/, this.afa.auth.signInWithEmailAndPassword(credentials.email, credentials.password)];
                    case 4:
                        signInResult = (/** @type {?} */ (_b.sent()));
                        return [3 /*break*/, 14];
                    case 5: return [4 /*yield*/, this.afa.auth.signInWithPopup(googleAuthProvider)];
                    case 6:
                        signInResult = (/** @type {?} */ (_b.sent()));
                        return [3 /*break*/, 14];
                    case 7: return [4 /*yield*/, this.afa.auth.signInWithPopup(facebookAuthProvider)];
                    case 8:
                        signInResult = (/** @type {?} */ (_b.sent()));
                        return [3 /*break*/, 14];
                    case 9: return [4 /*yield*/, this.afa.auth.signInWithPopup(twitterAuthProvider)];
                    case 10:
                        signInResult = (/** @type {?} */ (_b.sent()));
                        return [3 /*break*/, 14];
                    case 11: return [4 /*yield*/, this.afa.auth.signInWithPopup(githubAuthProvider)];
                    case 12:
                        signInResult = (/** @type {?} */ (_b.sent()));
                        return [3 /*break*/, 14];
                    case 13: throw new Error(AuthProvider$$1[provider] + " is not available as auth provider");
                    case 14: return [4 /*yield*/, this.handleSuccess(signInResult)];
                    case 15:
                        _b.sent();
                        return [3 /*break*/, 18];
                    case 16:
                        err_1 = _b.sent();
                        this.handleError(err_1);
                        console.error(err_1);
                        // this._snackBar.open(err.message, 'OK', {duration: 5000});
                        this.onErrorEmitter.next(err_1);
                        return [3 /*break*/, 18];
                    case 17:
                        this.isLoading = false;
                        return [7 /*endfinally*/];
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sign up new users via email and password.
     * After that the user should verify and confirm an email sent via the firebase
     *
     * @param name - the name if the new user
     * @param credentials
     * @returns
     */
    /**
     * Sign up new users via email and password.
     * After that the user should verify and confirm an email sent via the firebase
     *
     * @param {?} name - the name if the new user
     * @param {?} credentials
     * @return {?}
     */
    AuthProcessService$$1.prototype.signUp = /**
     * Sign up new users via email and password.
     * After that the user should verify and confirm an email sent via the firebase
     *
     * @param {?} name - the name if the new user
     * @param {?} credentials
     * @return {?}
     */
    function (name, credentials) {
        return __awaiter(this, void 0, void 0, function () {
            var userCredential, user, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, 8, 9]);
                        this.isLoading = true;
                        return [4 /*yield*/, this.afa.auth.createUserWithEmailAndPassword(credentials.email, credentials.password)];
                    case 1:
                        userCredential = _a.sent();
                        user = userCredential.user;
                        if (!this.config.enableFirestoreSync) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._fireStoreService
                                .getUserDocRefByUID(user.uid)
                                .set((/** @type {?} */ ({
                                uid: user.uid,
                                displayName: name,
                                email: user.email,
                                photoURL: user.photoURL
                            })))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.updateProfile(name, user.photoURL)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, user.sendEmailVerification()];
                    case 5:
                        _a.sent();
                        this.emailConfirmationSent = true;
                        this.emailToConfirm = credentials.email;
                        return [4 /*yield*/, this.handleSuccess(userCredential)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 7:
                        err_2 = _a.sent();
                        this.handleError(err_2);
                        return [3 /*break*/, 9];
                    case 8:
                        this.isLoading = false;
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update the profile (name + photo url) of the authenticated user in the
     * firebase authentication feature (not in firestore)
     *
     * @param name - the new name of the authenticated user
     * @param photoURL - the new photo url of the authenticated user
     * @returns
     */
    /**
     * Update the profile (name + photo url) of the authenticated user in the
     * firebase authentication feature (not in firestore)
     *
     * @param {?} name - the new name of the authenticated user
     * @param {?} photoURL - the new photo url of the authenticated user
     * @return {?}
     */
    AuthProcessService$$1.prototype.updateProfile = /**
     * Update the profile (name + photo url) of the authenticated user in the
     * firebase authentication feature (not in firestore)
     *
     * @param {?} name - the new name of the authenticated user
     * @param {?} photoURL - the new photo url of the authenticated user
     * @return {?}
     */
    function (name, photoURL) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.afa.auth.currentUser.updateProfile({ displayName: name, photoURL: photoURL })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    AuthProcessService$$1.prototype.deleteAccount = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.afa.auth.currentUser.delete()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {?} user
     * @return {?}
     */
    AuthProcessService$$1.prototype.parseUserInfo = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        return {
            uid: user.uid,
            displayName: user.displayName,
            email: user.email,
            phoneNumber: user.phoneNumber,
            photoURL: user.photoURL,
            providerId: user.providerData.length > 0 ? user.providerData[0].providerId : null
        };
    };
    /**
     * @return {?}
     */
    AuthProcessService$$1.prototype.getUserPhotoUrl = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var user = this.afa.auth.currentUser;
        if (!user) {
            return;
        }
        else if (user.photoURL) {
            return user.photoURL;
        }
        else if (user.emailVerified) {
            return this.getPhotoPath(Accounts.CHECK);
        }
        else if (user.isAnonymous) {
            return this.getPhotoPath(Accounts.OFF);
        }
        else {
            return this.getPhotoPath(Accounts.NONE);
        }
    };
    /**
     * @param {?} image
     * @return {?}
     */
    AuthProcessService$$1.prototype.getPhotoPath = /**
     * @param {?} image
     * @return {?}
     */
    function (image) {
        return "assets/user/" + image + ".svg";
    };
    /**
     * @return {?}
     */
    AuthProcessService$$1.prototype.signInWithPhoneNumber = /**
     * @return {?}
     */
    function () {
        // todo: 3.1.18
    };
    /**
     * @param {?} userCredential
     * @return {?}
     */
    AuthProcessService$$1.prototype.handleSuccess = /**
     * @param {?} userCredential
     * @return {?}
     */
    function (userCredential) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.onSuccessEmitter.next(userCredential.user);
                        if (!this.config.enableFirestoreSync) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._fireStoreService.updateUserData(this.parseUserInfo(userCredential.user))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.error("Error occurred while updating user data with firestore: " + e_1);
                        return [3 /*break*/, 4];
                    case 4:
                        if (this.config.toastMessageOnAuthSuccess) {
                            this._snackBar.open(this.messageOnAuthSuccess ? this.messageOnAuthSuccess :
                                "Hello " + (userCredential.user.displayName ? userCredential.user.displayName : '') + "!", 'OK', { duration: 5000 });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} error
     * @return {?}
     */
    AuthProcessService$$1.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.onErrorEmitter.next(error);
        if (this.config.toastMessageOnAuthError) {
            this._snackBar.open(this.messageOnAuthError ? this.messageOnAuthError :
                error.message, 'OK', { duration: 5000 });
        }
        console.error(error);
    };
    AuthProcessService$$1.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AuthProcessService$$1.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NgxAuthFirebaseUIConfigToken,] }] },
        { type: AngularFireAuth },
        { type: MatSnackBar },
        { type: FirestoreSyncService }
    ]; };
    return AuthProcessService$$1;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LegalityDialogComponent = /** @class */ (function () {
    function LegalityDialogComponent(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this._disableConfirmActionButton = false;
    }
    Object.defineProperty(LegalityDialogComponent.prototype, "disableConfirmActionButton", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.data.tosUrl && this.data.privacyPolicyUrl) {
                this._disableConfirmActionButton = !(this.checkTOS && this.checkPrivacyPolicy);
            }
            else if (this.data.tosUrl && !this.data.privacyPolicyUrl) {
                this._disableConfirmActionButton = !this.checkTOS;
            }
            else if (!this.data.tosUrl && this.data.privacyPolicyUrl) {
                this._disableConfirmActionButton = !this.checkPrivacyPolicy;
            }
            return this._disableConfirmActionButton;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LegalityDialogComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = {
            checked: !this.disableConfirmActionButton,
            authProvider: this.data.authProvider
        };
        this.dialogRef.close(result);
    };
    LegalityDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-auth-firebaseui-legality-dialog',
                    template: "\n    <h1 matDialogTitle>Legal requirements</h1>\n\n    <mat-dialog-content>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start\">\n        <mat-checkbox *ngIf=\"this.data.tosUrl\" [(ngModel)]=\"checkTOS\">\n          I agree to the\n          <span>&nbsp;</span>\n          <a target=\"_blank\"\n             [href]=\"this.data.tosUrl\">\n            Terms of Service and Conditions\n          </a>\n        </mat-checkbox>\n\n        <mat-checkbox *ngIf=\"this.data.privacyPolicyUrl\"\n                      [(ngModel)]=\"checkPrivacyPolicy\">\n          I have read and agree to the\n          <span>&nbsp;</span>\n          <a target=\"_blank\"\n             [href]=\"this.data.privacyPolicyUrl\">\n            Privacy\n          </a>\n        </mat-checkbox>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n      <button id=\"decline-action\"\n              mat-raised-button\n              matDialogClose\n              color=\"warn\">Decline</button>\n      <button id=\"confirm-action\"\n              mat-raised-button\n              color=\"primary\"\n              [disabled]=\"disableConfirmActionButton\"\n              (click)=\"closeDialog()\">Confirm\n      </button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    ::ng-deep .mat-checkbox-label{display:flex;flex-wrap:wrap}mat-dialog-content div{margin-top:1.5rem}mat-dialog-actions{margin-top:1rem}\n  "]
                },] },
    ];
    /** @nocollapse */
    LegalityDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return LegalityDialogComponent;
}());

var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator$1 = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/** @type {?} */
var EMAIL_REGEX = new RegExp(['^(([^<>()[\\]\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\.,;:\\s@\"]+)*)',
    '|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.',
    '[0-9]{1,3}\])|(([a-zA-Z\\-0-9]+\\.)+',
    '[a-zA-Z]{2,}))$'].join(''));
/** @type {?} */
var PHONE_NUMBER_REGEX = new RegExp(/^\+(?:[0-9] ?){6,14}[0-9]$/);
var AuthComponent = /** @class */ (function () {
    function AuthComponent(platformId, auth, authProcess, dialog) {
        this.platformId = platformId;
        this.auth = auth;
        this.authProcess = authProcess;
        this.dialog = dialog;
        this.providers = AuthProvider$$1.ALL; //  google, facebook, twitter, github as array or all as one single string
        this.guestEnabled = true;
        this.authProvider = AuthProvider$$1;
        this.authenticationError = false;
        this.passReset = false;
        this.authProviders = AuthProvider$$1;
        this.onSuccess = authProcess.onSuccessEmitter;
        this.onError = authProcess.onErrorEmitter;
    }
    /**
     * @return {?}
     */
    AuthComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            this.onErrorSubscription = this.onError.subscribe((/**
             * @return {?}
             */
            function () { return _this.authenticationError = true; }));
        }
        this.updateAuthSnackbarMessages();
        // auth form's initialization
        this._initSignInFormGroupBuilder();
        this._initSignUpFormGroupBuilder();
        this._initResetPasswordFormGroupBuilder();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AuthComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.messageOnAuthSuccess || changes.messageOnAuthError) {
            this.updateAuthSnackbarMessages();
        }
    };
    /**
     * @return {?}
     */
    AuthComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.onErrorSubscription) {
            this.onErrorSubscription.unsubscribe();
        }
    };
    Object.defineProperty(AuthComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this.authenticationError ? 'warn' : 'primary';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AuthComponent.prototype.updateAuthSnackbarMessages = /**
     * @return {?}
     */
    function () {
        this.authProcess.messageOnAuthSuccess = this.messageOnAuthSuccess;
        this.authProcess.messageOnAuthError = this.messageOnAuthError;
    };
    /**
     * @return {?}
     */
    AuthComponent.prototype.createForgotPasswordTab = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.passwordResetWished = true;
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.tabIndex = 0; }), 100);
    };
    /**
     * @param {?=} authProvider
     * @return {?}
     */
    AuthComponent.prototype.processLegalSignUP = /**
     * @param {?=} authProvider
     * @return {?}
     */
    function (authProvider) {
        var _this = this;
        if (this.tosUrl || this.privacyPolicyUrl) {
            /** @type {?} */
            var params = {
                tosUrl: this.tosUrl,
                privacyPolicyUrl: this.privacyPolicyUrl,
                authProvider: authProvider
            };
            this.dialogRef = this.dialog.open(LegalityDialogComponent, { data: params });
            this.dialogRef.afterClosed().subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                // console.log('this.dialogRef.afterClosed(): ', result);
                if (result && result.checked) {
                    _this._afterSignUpMiddleware(result.authProvider).then((/**
                     * @return {?}
                     */
                    function () { return _this.signUpFormGroup.reset(); }));
                }
                _this.dialogRef = null;
            }));
        }
        else {
            this._afterSignUpMiddleware(authProvider).then((/**
             * @return {?}
             */
            function () { return _this.signUpFormGroup.reset(); }));
        }
    };
    /**
     * @return {?}
     */
    AuthComponent.prototype.signUp = /**
     * @return {?}
     */
    function () {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authProcess.signUp(this.signUpFormGroup.value.name, {
                            email: this.signUpFormGroup.value.email,
                            password: this.signUpFormGroup.value.password
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    AuthComponent.prototype.signUpAnonymously = /**
     * @return {?}
     */
    function () {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authProcess.signInWith(this.authProvider.ANONYMOUS)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    AuthComponent.prototype.resetPassword = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.authProcess.resetPassword(this.resetPasswordEmailFormControl.value)
            .then((/**
         * @return {?}
         */
        function () { return _this.passReset = true; }));
    };
    /**
     * @private
     * @return {?}
     */
    AuthComponent.prototype._initSignInFormGroupBuilder = /**
     * @private
     * @return {?}
     */
    function () {
        this.signInFormGroup = new FormGroup({});
        this.signInFormGroup.registerControl('email', this.signInEmailFormControl = new FormControl('', [
            Validators.required,
            Validators.pattern(EMAIL_REGEX)
        ]));
        this.signInFormGroup.registerControl('password', this.sigInPasswordFormControl = new FormControl('', [
            Validators.required,
            Validators.minLength(6),
            Validators.maxLength(25),
        ]));
    };
    /**
     * @private
     * @return {?}
     */
    AuthComponent.prototype._initSignUpFormGroupBuilder = /**
     * @private
     * @return {?}
     */
    function () {
        this.signUpFormGroup = new FormGroup({
            name: this.sigUpNameFormControl = new FormControl('', [
                Validators.required,
                Validators.minLength(2),
                Validators.maxLength(30),
            ]),
            email: this.sigUpEmailFormControl = new FormControl('', [
                Validators.required,
                Validators.pattern(EMAIL_REGEX)
            ]),
            password: this.sigUpPasswordFormControl = new FormControl('', [
                Validators.required,
                Validators.minLength(6),
                Validators.maxLength(25),
            ])
        });
    };
    /**
     * @private
     * @return {?}
     */
    AuthComponent.prototype._initResetPasswordFormGroupBuilder = /**
     * @private
     * @return {?}
     */
    function () {
        this.resetPasswordFormGroup = new FormGroup({
            email: this.resetPasswordEmailFormControl = new FormControl('', [
                Validators.required,
                Validators.pattern(EMAIL_REGEX)
            ])
        });
    };
    /**
     * @private
     * @param {?=} authProvider
     * @return {?}
     */
    AuthComponent.prototype._afterSignUpMiddleware = /**
     * @private
     * @param {?=} authProvider
     * @return {?}
     */
    function (authProvider) {
        if (authProvider === this.authProvider.ANONYMOUS) {
            return this.signUpAnonymously();
        }
        return this.signUp();
    };
    AuthComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-auth-firebaseui',
                    template: "\n    <mat-tab-group [color]=\"color\" [selectedIndex]=\"tabIndex\">\n      <!--Reset password tab-->\n      <mat-tab *ngIf=\"passwordResetWished\" label=\"Reset Password\">\n        <form [formGroup]=\"resetPasswordFormGroup\" (ngSubmit)=\"resetPasswordFormGroup.valid && resetPassword()\">\n\n          <mat-card>\n            <mat-card-header fxLayoutAlign=\"end\">\n              <button mat-icon-button\n                      [color]=\"color\"\n                      matTooltip=\"close\"\n                      matTooltipPosition=\"above\"\n                      (click)=\"passwordResetWished = false\">\n                <mat-icon>close</mat-icon>\n              </button>\n            </mat-card-header>\n\n            <mat-card-content>\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Reset e-mail address to password</mat-label>\n                <input matInput\n                       [readonly]=\"passReset\"\n                       formControlName=\"email\"\n                       title=\"Reset e-mail address to password\"\n                       required>\n                <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                <mat-error *ngIf=\"resetPasswordEmailFormControl.hasError('required')\">\n                  E-mail is required to reset the password!\n                </mat-error>\n                <mat-error *ngIf=\"resetPasswordEmailFormControl.hasError('pattern')\">\n                  Please enter a valid e-mail address\n                </mat-error>\n              </mat-form-field>\n            </mat-card-content>\n            <mat-card-actions fxLayoutAlign=\"center\">\n              <button mat-raised-button\n                      type=\"submit\"\n                      [color]=\"color\"\n                      [disabled]=\"passReset\">\n                Reset\n              </button>\n            </mat-card-actions>\n            <mat-card-footer *ngIf=\"passReset\" fxLayoutAlign=\"center\">\n              <p>Reset requested. Check your e-mail instructions.</p>\n            </mat-card-footer>\n            <mat-card-footer>\n              <mat-progress-bar *ngIf=\"authProcess.isLoading\" mode=\"indeterminate\"></mat-progress-bar>\n            </mat-card-footer>\n          </mat-card>\n        </form>\n      </mat-tab>\n\n      <!--Sign in tab-->\n      <mat-tab label=\"Sign in\">\n        <mat-card>\n          <mat-card-title>Signing in</mat-card-title>\n          <mat-card-content>\n            <form [formGroup]=\"signInFormGroup\"\n                  (ngSubmit)=\"signInFormGroup.valid &&\n                  authProcess.signInWith\n                  (authProviders.EmailAndPassword,\n                  {email:signInFormGroup.value.email, password: signInFormGroup.value.password})\">\n              <div fxLayout=\"column\" fxLayoutAlign=\"center\">\n                <mat-form-field [appearance]=\"appearance\">\n                  <mat-label>E-mail</mat-label>\n                  <input matInput\n                         placeholder=\"E-mail\"\n                         formControlName=\"email\"\n                         required>\n                  <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                  <mat-error *ngIf=\"signInEmailFormControl.hasError('required')\">\n                    E-mail is required\n                  </mat-error>\n                  <mat-error *ngIf=\"signInEmailFormControl.hasError('pattern')\">\n                    Please enter a valid e-mail address\n                  </mat-error>\n                </mat-form-field>\n\n                <mat-form-field [appearance]=\"appearance\">\n                  <mat-label>Password</mat-label>\n                  <input matInput\n                         type=\"password\"\n                         placeholder=\"Password\"\n                         minlength=\"6\"\n                         maxlength=\"25\"\n                         formControlName=\"password\"\n                         required>\n                  <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n                  <mat-hint align=\"end\" aria-live=\"polite\">\n                    {{signInFormGroup.value.password.length}} / 25\n                  </mat-hint>\n                  <mat-error *ngIf=\"sigInPasswordFormControl.hasError('required')\">\n                    Please do not forget the password\n                  </mat-error>\n                  <mat-error *ngIf=\"sigInPasswordFormControl.hasError('minlength')\">\n                    The password must be at least 6 characters long.\n                  </mat-error>\n                  <mat-error *ngIf=\"sigInPasswordFormControl.hasError('maxlength')\">\n                    The password must not exceed 25 characters\n                  </mat-error>\n                </mat-form-field>\n\n                <button mat-raised-button\n                        style=\"margin-top: 20px\"\n                        type=\"submit\"\n                        class=\"space-top\"\n                        [color]=\"color\">\n                  Log In\n                </button>\n\n              </div>\n            </form>\n\n            <div fxLayoutAlign=\"center\">\n              <button mat-button\n                      class=\"space-top\"\n                      [color]=\"color\"\n                      (click)=\"createForgotPasswordTab()\">\n                Forgot Password?\n              </button>\n            </div>\n\n          </mat-card-content>\n          <mat-card-footer *ngIf=\"authProcess.isLoading\">\n            <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n          </mat-card-footer>\n        </mat-card>\n      </mat-tab>\n\n      <!--tab register-->\n      <mat-tab label=\"Register\">\n        <mat-card>\n          <mat-card-title>Registration</mat-card-title>\n          <div *ngIf=\"!authProcess.emailConfirmationSent;then register else confirm\"></div>\n          <ng-template #register>\n            <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center\">\n              <form [formGroup]=\"signUpFormGroup\" (ngSubmit)=\"signUpFormGroup.valid &&\n              processLegalSignUP(authProvider.EmailAndPassword)\">\n                <div fxLayout=\"column\" fxLayoutAlign=\"center\">\n                  <!--name-->\n                  <mat-form-field [appearance]=\"appearance\">\n                    <!--labels will work only with @angular/material@6.2.0 -->\n                    <mat-label>Name</mat-label>\n                    <input matInput\n                           placeholder=\"Name\"\n                           minlength=\"2\"\n                           maxlength=\"30\"\n                           [formControl]=\"sigUpNameFormControl\"\n                           required>\n                    <mat-icon matSuffix [color]=\"color\">person</mat-icon>\n                    <mat-hint align=\"end\" aria-live=\"polite\">\n                      {{signUpFormGroup.value.name?.length}} / 25\n                    </mat-hint>\n                    <mat-error *ngIf=\"sigUpNameFormControl.hasError('required')\">\n                      Name is required\n                    </mat-error>\n                    <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('minlength')\">\n                      The name is too short!\n                    </mat-error>\n                    <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('maxlength')\">\n                      The name is too long!\n                    </mat-error>\n                  </mat-form-field>\n\n                  <!--email-->\n                  <mat-form-field [appearance]=\"appearance\">\n                    <mat-label>E-mail</mat-label>\n                    <input matInput\n                           placeholder=\"E-mail\"\n                           type=\"email\"\n                           [formControl]=\"sigUpEmailFormControl\">\n                    <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                    <mat-error *ngIf=\"sigUpEmailFormControl.hasError('required')\">\n                      E-mail is required\n                    </mat-error>\n                    <mat-error *ngIf=\"sigUpEmailFormControl.hasError('pattern')\">\n                      Please enter a valid e-mail address\n                    </mat-error>\n                  </mat-form-field>\n\n                  <!--password-->\n                  <div fxLayout=\"column\">\n\n                    <mat-form-field [appearance]=\"appearance\">\n                      <mat-label>Password</mat-label>\n                      <input matInput\n                             type=\"password\"\n                             placeholder=\"password\"\n                             name=\"password\"\n                             [formControl]=\"sigUpPasswordFormControl\"\n                             required>\n                      <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n\n                      <mat-hint align=\"end\" aria-live=\"polite\">\n                        {{signUpFormGroup.value.password?.length}} / 25\n                      </mat-hint>\n\n                      <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('required')\" class=\"cut-text\">\n                        Please do not forget the password\n                      </mat-error>\n\n                      <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('minlength')\" class=\"cut-text\">\n                        The password must be at least 6 characters long.\n                      </mat-error>\n                      <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('maxlength')\" class=\"cut-text\">\n                        The password can not be longer than 25 characters.\n                      </mat-error>\n\n                    </mat-form-field>\n\n                    <mat-password-strength\n                      [password]=\"signUpFormGroup.value.password\"\n                      [externalError]=\"sigUpPasswordFormControl.dirty\">\n                    </mat-password-strength>\n\n                  </div>\n\n                  <button mat-raised-button\n                          style=\"margin-top: 20px\"\n                          type=\"submit\"\n                          [color]=\"color\">\n                    Register\n                  </button>\n\n                </div>\n              </form>\n\n              <button *ngIf=\"guestEnabled\"\n                      mat-button\n                      style=\"margin-top: 20px\"\n                      [color]=\"color\"\n                      (click)=\"processLegalSignUP(authProvider.ANONYMOUS)\">\n                <mat-icon>fingerprint</mat-icon>\n                continue as guest\n              </button>\n\n            </mat-card-content>\n\n            <mat-card-footer *ngIf=\"authProcess.isLoading\">\n              <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </mat-card-footer>\n\n          </ng-template>\n\n          <!--confirm template-->\n          <ng-template #confirm>\n            <ngx-auth-firebaseui-email-confirmation [email]=\"authProcess.emailToConfirm\"\n                                                    [goBackURL]=\"goBackURL\">\n            </ngx-auth-firebaseui-email-confirmation>\n          </ng-template>\n\n        </mat-card>\n      </mat-tab>\n    </mat-tab-group>\n    <mat-divider></mat-divider>\n    <ngx-auth-firebaseui-providers [providers]=\"providers\"></ngx-auth-firebaseui-providers>\n  ",
                    styles: ["\n    .mat-card{margin:2rem}.space-top{margin-top:.5rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}\n  "]
                },] },
    ];
    /** @nocollapse */
    AuthComponent.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: AngularFireAuth },
        { type: AuthProcessService$$1 },
        { type: MatDialog }
    ]; };
    AuthComponent.propDecorators = {
        providers: [{ type: Input }],
        appearance: [{ type: Input }],
        tabIndex: [{ type: Input }],
        guestEnabled: [{ type: Input }],
        tosUrl: [{ type: Input }],
        privacyPolicyUrl: [{ type: Input }],
        goBackURL: [{ type: Input }],
        messageOnAuthSuccess: [{ type: Input }],
        messageOnAuthError: [{ type: Input }],
        onSuccess: [{ type: Output }],
        onError: [{ type: Output }]
    };
    return AuthComponent;
}());

var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator$2 = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var UserComponent$$1 = /** @class */ (function () {
    function UserComponent$$1(config, auth, authProcess, _fireStoreService, snackBar) {
        this.config = config;
        this.auth = auth;
        this.authProcess = authProcess;
        this._fireStoreService = _fireStoreService;
        this.snackBar = snackBar;
        this.canLogout = true;
        this.canDeleteAccount = true;
        this.onAccountDeleted = new EventEmitter();
    }
    /**
     * @return {?}
     */
    UserComponent$$1.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @protected
     * @return {?}
     */
    UserComponent$$1.prototype.initUpdateFormGroup = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentUser = this.auth.auth.currentUser;
        this.updateFormGroup = new FormGroup({
            name: this.updateNameFormControl = new FormControl({ value: currentUser.displayName, disabled: true }, [
                Validators.required,
                Validators.minLength(2),
                Validators.maxLength(25),
            ]),
            email: this.updateEmailFormControl = new FormControl({ value: currentUser.email, disabled: true }, [
                Validators.required,
                Validators.pattern(EMAIL_REGEX)
            ]),
            phoneNumber: this.updatePhoneNumberFormControl = new FormControl('', [Validators.pattern(PHONE_NUMBER_REGEX)])
        });
        this.updateFormGroup.enable();
    };
    /**
     * @return {?}
     */
    UserComponent$$1.prototype.changeEditMode = /**
     * @return {?}
     */
    function () {
        this.editMode = !this.editMode;
        this.editMode ? this.initUpdateFormGroup() : this.reset();
    };
    /**
     * @return {?}
     */
    UserComponent$$1.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.updateFormGroup.reset();
        this.updateFormGroup.disable();
        this.updateFormGroup = null;
    };
    // todo: 31.3.18
    // todo: 31.3.18
    /**
     * @return {?}
     */
    UserComponent$$1.prototype.save = 
    // todo: 31.3.18
    /**
     * @return {?}
     */
    function () {
        return __awaiter$2(this, void 0, void 0, function () {
            var user, snackBarMsg, error_1;
            return __generator$2(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.updateFormGroup.dirty) return [3 /*break*/, 12];
                        user = this.auth.auth.currentUser;
                        // user.updateProfile()
                        // user.updateEmail()
                        // console.log('form = ', this.updateFormGroup);
                        snackBarMsg = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 10, , 11]);
                        if (!this.updateNameFormControl.dirty) return [3 /*break*/, 3];
                        return [4 /*yield*/, user.updateProfile({ displayName: this.updateNameFormControl.value, photoURL: null })];
                    case 2:
                        _a.sent();
                        snackBarMsg.push("your name has been update to " + user.displayName);
                        _a.label = 3;
                    case 3:
                        if (!this.updateEmailFormControl.dirty) return [3 /*break*/, 5];
                        return [4 /*yield*/, user.updateEmail(this.updateEmailFormControl.value)];
                    case 4:
                        _a.sent();
                        snackBarMsg.push("your email has been update to " + user.email);
                        _a.label = 5;
                    case 5:
                        if (!this.updatePhoneNumberFormControl.dirty) return [3 /*break*/, 7];
                        return [4 /*yield*/, user.updatePhoneNumber(this.updatePhoneNumberFormControl.value)];
                    case 6:
                        _a.sent();
                        console.log('phone number = ', this.updatePhoneNumberFormControl.value);
                        snackBarMsg.push("your phone number has been update to " + user.phoneNumber);
                        _a.label = 7;
                    case 7:
                        if (!this.config.enableFirestoreSync) return [3 /*break*/, 9];
                        return [4 /*yield*/, this._fireStoreService.updateUserData(this.authProcess.parseUserInfo(user))];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        error_1 = _a.sent();
                        error_1.message ? this.snackBar.open(error_1.message, 'Ok') : this.snackBar.open(error_1, 'Ok');
                        console.error(error_1);
                        console.error(error_1.code);
                        console.error(error_1.message);
                        return [3 /*break*/, 11];
                    case 11:
                        if (snackBarMsg.length > 0) {
                            this.snackBar.open(snackBarMsg.join('\\n'), 'Ok');
                        }
                        _a.label = 12;
                    case 12:
                        this.editMode = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete the account of the current firebase user
     *
     * On Success, emit the <onAccountDeleted> event and toast a msg!#
     * Otherwise, log the and toast and error msg!
     *
     */
    /**
     * Delete the account of the current firebase user
     *
     * On Success, emit the <onAccountDeleted> event and toast a msg!#
     * Otherwise, log the and toast and error msg!
     *
     * @return {?}
     */
    UserComponent$$1.prototype.deleteAccount = /**
     * Delete the account of the current firebase user
     *
     * On Success, emit the <onAccountDeleted> event and toast a msg!#
     * Otherwise, log the and toast and error msg!
     *
     * @return {?}
     */
    function () {
        return __awaiter$2(this, void 0, void 0, function () {
            var user, error_2;
            return __generator$2(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        user = this.auth.auth.currentUser;
                        return [4 /*yield*/, this.authProcess.deleteAccount()];
                    case 1:
                        _a.sent();
                        if (!this.config.enableFirestoreSync) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._fireStoreService.deleteUserData(user.uid)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.onAccountDeleted.emit();
                        this.editMode = false;
                        this.snackBar.open('Your account has been successfully deleted!', 'OK', {
                            duration: 5000
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        error_2 = _a.sent();
                        console.log('Error while delete user\'s account', error_2);
                        this.snackBar.open('Error occurred while deleting your account!', 'OK', {
                            duration: 5000
                        });
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    UserComponent$$1.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-auth-firebaseui-user',
                    template: "\n    <div *ngIf=\"auth.authState| async as user; then authenticated else none\">\n\n    </div>\n\n    <ng-template #authenticated>\n      <mat-card *ngIf=\"auth.user | async as user\">\n        <!--<form [formGroup]=\"updateFormGroup\" >-->\n        <!--card header-->\n        <mat-card-header fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n          <img mat-card-avatar [src]=\"authProcess?.getUserPhotoUrl()\">\n\n          <div *ngIf=\"user.emailVerified; then emailVerified else emailNotVerified\"></div>\n          <ng-template #emailVerified>\n            <mat-icon color=\"primary\"\n                      matTooltip=\"email is verified\"\n                      matTooltipPosition=\"after\">\n              verified_user\n            </mat-icon>\n          </ng-template>\n          <ng-template #emailNotVerified>\n            <mat-icon color=\"warn\"\n                      matTooltip=\"email is not verified\"\n                      matTooltipPosition=\"after\">\n              warning\n            </mat-icon>\n          </ng-template>\n\n        </mat-card-header>\n\n        <!--card content-->\n        <mat-card-content *ngIf=\"editMode; then edit else readonly\">\n        </mat-card-content>\n\n        <ng-template #edit>\n          <form [formGroup]=\"updateFormGroup\" (submit)=\"save()\">\n\n            <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center center\">\n              <div fxLayoutAlign=\"center\">\n                <button mat-raised-button color=\"warn\" class=\"edit-button\"\n                        (click)=\"changeEditMode()\">\n                  cancel\n                </button>\n              </div>\n\n              <!--name-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Name</mat-label>\n                <input matInput\n                       placeholder=\"Name\"\n                       [formControl]=\"updateNameFormControl\"\n                       [value]=\"user.displayName\">\n                <mat-icon matSuffix>person</mat-icon>\n                <mat-hint align=\"end\" aria-live=\"polite\">\n                  {{updateNameFormControl.value.length}} / 25\n                </mat-hint>\n                <mat-error *ngIf=\"updateNameFormControl.hasError('required')\">\n                  Name is required\n                </mat-error>\n              </mat-form-field>\n\n              <!--email-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>E-mail</mat-label>\n                <input matInput\n                       placeholder=\"E-mail\"\n                       [formControl]=\"updateEmailFormControl\"\n                       [value]=\"user.email\">\n                <mat-icon matSuffix>email</mat-icon>\n                <mat-error *ngIf=\"updateEmailFormControl.hasError('required')\">\n                  E-mail is required {{updateEmailFormControl.value}}\n                </mat-error>\n                <mat-error *ngIf=\"updateEmailFormControl.hasError('pattern')\">\n                  Please enter a valid e-mail address {{updateEmailFormControl.value}}\n                </mat-error>\n              </mat-form-field>\n\n              <!--phone number-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Phone number</mat-label>\n                <input matInput\n                       type=\"number\"\n                       placeholder=\"Phone number\"\n                       [formControl]=\"updatePhoneNumberFormControl\"\n                       [value]=\"user.phoneNumber\">\n                <mat-icon matSuffix>phone</mat-icon>\n                <mat-hint align=\"end\" aria-live=\"polite\">\n                  The phone number is international. Therefore, it should start with a + sign or 00,\n                  followed by the country code, - and national number e.g: +49-12345678 or 0041-1234567890\n\n                  NOTE : the phone number must be a valid phone credential !!\n                </mat-hint>\n                <mat-error *ngIf=\"updatePhoneNumberFormControl.hasError('pattern')\">\n                  Please enter a valid phone number\n                </mat-error>\n              </mat-form-field>\n\n            </mat-card-content>\n\n            <mat-card-actions fxLayout=\"column\">\n              <button mat-button\n                      color=\"primary\"\n                      type=\"submit\">\n                Save changes\n              </button>\n            </mat-card-actions>\n          </form>\n        </ng-template>\n\n        <ng-template #readonly>\n          <div fxLayoutAlign=\"center\">\n            <button mat-raised-button color=\"primary\" class=\"edit-button\"\n                    (click)=\"changeEditMode()\">\n              edit\n            </button>\n          </div>\n\n          <!--name-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>Name</mat-label>\n            <input matInput\n                   placeholder=\"Name\"\n                   [value]=\"user.displayName\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">person</mat-icon>\n          </mat-form-field>\n\n          <!--email-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>E-mail</mat-label>\n            <input matInput\n                   placeholder=\"E-mail\" [value]=\"user.email\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">email</mat-icon>\n          </mat-form-field>\n\n          <!--phone number-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>Phone number</mat-label>\n            <input matInput\n                   placeholder=\"Phone number\"\n                   [value]=\"user.phoneNumber\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">phone</mat-icon>\n          </mat-form-field>\n\n          <mat-card-actions fxLayout=\"column\">\n            <button *ngIf=\"canLogout\" mat-button color=\"primary\" (click)=\"auth.auth.signOut()\">Sign out</button>\n            <button *ngIf=\"canDeleteAccount\" mat-button color=\"warn\" (click)=\"deleteAccount()\">Delete account</button>\n          </mat-card-actions>\n\n        </ng-template>\n\n      </mat-card>\n\n    </ng-template>\n\n\n    <ng-template #none>\n      <mat-card class=\"none-card\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <mat-icon color=\"accent\">warning</mat-icon>\n          <span>You are not logged in!</span>\n        </mat-card-content>\n      </mat-card>\n    </ng-template>\n  ",
                    styles: ["\n    .edit-button{margin:1rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.none-card{min-height:430px}.none-card span{font-size:24px;text-align:center;color:rgba(0,0,0,.54)}\n  "]
                },] },
    ];
    /** @nocollapse */
    UserComponent$$1.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NgxAuthFirebaseUIConfigToken,] }] },
        { type: AngularFireAuth },
        { type: AuthProcessService$$1 },
        { type: FirestoreSyncService },
        { type: MatSnackBar }
    ]; };
    UserComponent$$1.propDecorators = {
        editMode: [{ type: Input }],
        canLogout: [{ type: Input }],
        canDeleteAccount: [{ type: Input }],
        appearance: [{ type: Input }],
        onAccountDeleted: [{ type: Output }]
    };
    return UserComponent$$1;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var Theme = {
    DEFAULT: 'default',
    CLASSIC: 'classic',
    STROKED: 'stroked',
    FAB: 'fab',
    MINI_FAB: 'mini-fab',
    RAISED: 'raised',
};
/** @enum {string} */
var Layout = {
    ROW: 'row',
    COLUMN: 'column',
};
var AuthProvidersComponent = /** @class */ (function () {
    function AuthProvidersComponent(authProcess, _iconRegistry, _sanitizer) {
        this.authProcess = authProcess;
        this._iconRegistry = _iconRegistry;
        this._sanitizer = _sanitizer;
        // theme: string = Theme.DEFAULT;
        this.layout = Layout.ROW;
        this.providers = AuthProvider$$1.ALL; //  google, facebook, twitter, github
        //  google, facebook, twitter, github
        this.themes = Theme;
        this.authProvider = AuthProvider$$1;
        _iconRegistry
            .addSvgIcon('google', _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/google.svg'))
            .addSvgIcon('google-colored', _sanitizer.bypassSecurityTrustResourceUrl('/assets/google.svg'))
            .addSvgIcon('facebook', _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/facebook.svg'))
            .addSvgIcon('twitter', _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/twitter.svg'))
            .addSvgIcon('github', _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/github-circle.svg'))
            .addSvgIcon('phone', _sanitizer.bypassSecurityTrustResourceUrl('/assets/phone.svg'));
    }
    AuthProvidersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-auth-firebaseui-providers',
                    template: "\n    <div [ngSwitch]=\"theme\">\n\n      <!--default icon buttons-->\n      <div *ngSwitchDefault\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google-colored\"></mat-icon>\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-button\n                class=\"facebook-filled\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-button\n                class=\"twitter-filled\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\"></mat-icon>\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n          GitHub\n        </button>\n      </div>\n\n      <!--classic-->\n      <div *ngSwitchCase=\"themes.CLASSIC\"\n           class=\"buttons-classic\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-button\n                class=\"google-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-button\n                class=\"facebook-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-button\n                class=\"twitter-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-button\n                class=\"github-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n      </div>\n\n      <!--stroked-->\n      <div *ngSwitchCase=\"themes.STROKED\"\n           class=\"buttons-classic\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-stroked-button\n                class=\"google-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-stroked-button\n                class=\"facebook-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-stroked-button\n                class=\"twitter-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-stroked-button\n                class=\"github-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n      </div>\n\n      <!--raised-->\n      <div *ngSwitchCase=\"themes.RAISED\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-raised-button\n                class=\"google-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-raised-button\n                class=\"facebook-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-raised-button\n                class=\"twitter-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-raised-button\n                class=\"github-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n      </div>\n\n      <!--fab-->\n      <div *ngSwitchCase=\"themes.FAB\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-fab\n                class=\"google-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-fab\n                class=\"facebook-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-fab\n                class=\"twitter-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-fab\n                class=\"github-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n        </button>\n      </div>\n\n      <!--mini-fab-->\n      <div *ngSwitchCase=\"themes.MINI_FAB\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           fxLayoutAlign.xs=\"center center\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-mini-fab\n                class=\"google-raised\"\n                fxFlexAlign=\"center\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-mini-fab\n                class=\"facebook-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-mini-fab\n                class=\"twitter-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\" class=\"icon-white\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-mini-fab\n                class=\"github-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n        </button>\n      </div>\n    </div>\n  ",
                    styles: ["\n    :host{display:block}:host .mat-icon{vertical-align:inherit}.space-full-xs{width:100%;margin:.4rem}.facebook-filled mat-icon{fill:#385899}.twitter-filled mat-icon{fill:#1da1f2}.buttons-raised button{color:#fff!important}.buttons-raised .google-raised{background-color:#db4437}.buttons-raised .facebook-raised{background-color:#385899}.buttons-raised .twitter-raised{background-color:#1da1f2}.buttons-raised .github-raised{background-color:#000}.buttons-classic button.google-classic{color:#db4437!important}.buttons-classic .facebook-classic{color:#385899!important}.buttons-classic .twitter-classic{color:#1da1f2!important}.buttons-classic .github-classic{color:#000!important}.icon-white{color:#fff}.icon-white mat-icon{fill:#fff}\n  "]
                },] },
    ];
    /** @nocollapse */
    AuthProvidersComponent.ctorParameters = function () { return [
        { type: AuthProcessService$$1 },
        { type: MatIconRegistry },
        { type: DomSanitizer }
    ]; };
    AuthProvidersComponent.propDecorators = {
        theme: [{ type: Input }],
        layout: [{ type: Input }],
        providers: [{ type: Input }]
    };
    return AuthProvidersComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EmailConfirmationComponent = /** @class */ (function () {
    function EmailConfirmationComponent() {
    }
    EmailConfirmationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-auth-firebaseui-email-confirmation',
                    template: "\n    <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <mat-icon>email</mat-icon>\n      <div class=\"title\">\n        Confirm your e-mail address!\n      </div>\n      <div class=\"subtitle\">\n        <p>A confirmation e-mail has been sent to\n          <b><strong>{{email}}</strong></b>.</p>\n        <p>Check your inbox and click on the link\n          \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 \"Confirm my e-mail\" to confirm your e-mail address.</p>\n      </div>\n    </mat-card-content>\n\n    <mat-card-actions *ngIf=\"goBackURL\"\n                      fxLayoutAlign=\"center center\">\n      <a mat-button\n         color=\"primary\"\n         [href]=\"goBackURL\">\n        Go back\n      </a>\n    </mat-card-actions>\n  ",
                    styles: ["\n    .material-icons{font-size:4rem}.mat-icon{height:4rem;width:4rem;color:rgba(0,0,0,.54)}.title{font-size:20px;margin-top:16px}.subtitle{margin:16px auto;max-width:300px;color:rgba(0,0,0,.54);font-size:15px;text-align:center}.subtitle p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}\n  "]
                },] },
    ];
    EmailConfirmationComponent.propDecorators = {
        email: [{ type: Input }],
        goBackURL: [{ type: Input }]
    };
    return EmailConfirmationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var defaultAuthFirebaseUIConfig = {
    // authMethod: 'redirect',
    // authProviders: [new GoogleAuthProvider(), new FacebookAuthProvider(), new TwitterAuthProvider(), new GithubAuthProvider()],
    authGuardFallbackURL: '/',
    enableFirestoreSync: true,
    toastMessageOnAuthSuccess: true,
    toastMessageOnAuthError: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoggedInGuard$$1 = /** @class */ (function () {
    function LoggedInGuard$$1(config, router, auth) {
        this.config = config;
        this.router = router;
        this.auth = auth;
    }
    /**
     * @return {?}
     */
    LoggedInGuard$$1.prototype.canActivate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.auth.afa.user.pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res) {
                return true;
            }
            _this.router.navigate(["/" + _this.config.authGuardFallbackURL]);
            return false;
        })));
    };
    LoggedInGuard$$1.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    LoggedInGuard$$1.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NgxAuthFirebaseUIConfigToken,] }] },
        { type: Router },
        { type: AuthProcessService$$1 }
    ]; };
    /** @nocollapse */ LoggedInGuard$$1.ngInjectableDef = defineInjectable({ factory: function LoggedInGuard_Factory() { return new LoggedInGuard$$1(inject(NgxAuthFirebaseUIConfigToken), inject(Router), inject(AuthProcessService$$1)); }, token: LoggedInGuard$$1, providedIn: "root" });
    return LoggedInGuard$$1;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NgxAuthFirebaseUIConfigToken = new InjectionToken('NgxAuthFirebaseUIConfig');
var NgxAuthFirebaseUIModule = /** @class */ (function () {
    function NgxAuthFirebaseUIModule(config) {
        this.config = config;
        this.config = Object.assign(defaultAuthFirebaseUIConfig, this.config);
    }
    /**
     * @param {?} configFactory
     * @param {?=} appNameFactory
     * @param {?=} config
     * @return {?}
     */
    NgxAuthFirebaseUIModule.forRoot = /**
     * @param {?} configFactory
     * @param {?=} appNameFactory
     * @param {?=} config
     * @return {?}
     */
    function (configFactory, appNameFactory, config) {
        return {
            ngModule: NgxAuthFirebaseUIModule,
            providers: [
                {
                    provide: FirebaseOptionsToken,
                    useValue: configFactory
                },
                {
                    provide: FirebaseNameOrConfigToken,
                    useFactory: appNameFactory
                },
                {
                    provide: NgxAuthFirebaseUIConfigToken,
                    useValue: config
                },
                AuthProcessService$$1,
                FirestoreSyncService,
                LoggedInGuard$$1
            ],
        };
    };
    NgxAuthFirebaseUIModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        HttpClientModule,
                        FlexLayoutModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MatTabsModule,
                        MatCardModule,
                        MatInputModule,
                        MatButtonModule,
                        MatIconModule,
                        MatSnackBarModule,
                        MatDividerModule,
                        MatChipsModule,
                        MatTooltipModule,
                        MatDialogModule,
                        MatCheckboxModule,
                        MatProgressSpinnerModule,
                        MatProgressBarModule,
                        MatDialogModule,
                        MatPasswordStrengthModule,
                        AngularFireAuthModule,
                        AngularFirestoreModule,
                    ],
                    exports: [
                        AuthComponent,
                        UserComponent$$1,
                        AuthProvidersComponent,
                        EmailConfirmationComponent,
                        // LoggedInGuard,
                        AngularFireAuthModule,
                        AngularFirestoreModule
                    ],
                    declarations: [
                        AuthComponent,
                        UserComponent$$1,
                        AuthProvidersComponent,
                        EmailConfirmationComponent,
                        LegalityDialogComponent
                    ],
                    entryComponents: [
                        LegalityDialogComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    NgxAuthFirebaseUIModule.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NgxAuthFirebaseUIConfigToken,] }] }
    ]; };
    return NgxAuthFirebaseUIModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AuthComponent, UserComponent$$1 as UserComponent, AuthProvidersComponent, Theme, Layout, LegalityDialogComponent, AuthProcessService$$1 as AuthProcessService, AuthProvider$$1 as AuthProvider, FirestoreSyncService, LoggedInGuard$$1 as LoggedInGuard, NgxAuthFirebaseUIConfigToken, NgxAuthFirebaseUIModule, EmailConfirmationComponent as ɵa };
//# sourceMappingURL=ngx-auth-firebaseui.es5.js.map
