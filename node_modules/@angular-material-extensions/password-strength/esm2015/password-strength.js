import { CommonModule } from '@angular/common';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';
import { MatProgressBarModule, MatCardModule, MatIconModule } from '@angular/material';
import { FormControl, Validators } from '@angular/forms';
import { animation, style, animate, keyframes, trigger, transition, query, stagger, animateChild, useAnimation } from '@angular/animations';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const Colors = {
    primary: 'primary',
    accent: 'accent',
    warn: 'warn',
};
/** @enum {number} */
const Criteria = {
    at_least_eight_chars: 0,
    at_least_one_lower_case_char: 1,
    at_least_one_upper_case_char: 2,
    at_least_one_digit_char: 3,
    at_least_one_special_char: 4,
};
Criteria[Criteria.at_least_eight_chars] = 'at_least_eight_chars';
Criteria[Criteria.at_least_one_lower_case_char] = 'at_least_one_lower_case_char';
Criteria[Criteria.at_least_one_upper_case_char] = 'at_least_one_upper_case_char';
Criteria[Criteria.at_least_one_digit_char] = 'at_least_one_digit_char';
Criteria[Criteria.at_least_one_special_char] = 'at_least_one_special_char';
class MatPasswordStrengthComponent {
    constructor() {
        this.validators = Object.keys(Criteria).map((/**
         * @param {?} key
         * @return {?}
         */
        key => Criteria[key]));
        this.enableLengthRule = true;
        this.enableLowerCaseLetterRule = true;
        this.enableUpperCaseLetterRule = true;
        this.enableDigitRule = true;
        this.enableSpecialCharRule = true;
        this.min = 8;
        this.max = 30;
        this.onStrengthChanged = new EventEmitter();
        this.criteriaMap = new Map();
        this.passwordFormControl = new FormControl();
        this._strength = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setRulesAndValidators();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {
            return;
        }
        else if (changes.externalError && changes.externalError.currentValue) {
            this._color = Colors.warn;
            return;
        }
        else {
            this.password && this.password.length > 0 ?
                this.calculatePasswordStrength() : this.reset();
        }
    }
    /**
     * @return {?}
     */
    get strength() {
        return this._strength ? this._strength : 0;
    }
    /**
     * @return {?}
     */
    get color() {
        if (this._strength <= 20) {
            return Colors.warn;
        }
        else if (this._strength <= 80) {
            return Colors.accent;
        }
        else {
            return Colors.primary;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _containAtLeastMinChars() {
        this.containAtLeastMinChars = this.password.length >= this.min;
        return this.containAtLeastMinChars;
    }
    /**
     * @private
     * @return {?}
     */
    _containAtLeastOneLowerCaseLetter() {
        this.containAtLeastOneLowerCaseLetter =
            this.criteriaMap
                .get(Criteria.at_least_one_lower_case_char)
                .test(this.password);
        return this.containAtLeastOneLowerCaseLetter;
    }
    /**
     * @private
     * @return {?}
     */
    _containAtLeastOneUpperCaseLetter() {
        this.containAtLeastOneUpperCaseLetter =
            this.criteriaMap
                .get(Criteria.at_least_one_upper_case_char)
                .test(this.password);
        return this.containAtLeastOneUpperCaseLetter;
    }
    /**
     * @private
     * @return {?}
     */
    _containAtLeastOneDigit() {
        this.containAtLeastOneDigit =
            this.criteriaMap
                .get(Criteria.at_least_one_digit_char)
                .test(this.password);
        return this.containAtLeastOneDigit;
    }
    /**
     * @private
     * @return {?}
     */
    _containAtLeastOneSpecialChar() {
        this.containAtLeastOneSpecialChar =
            this.criteriaMap
                .get(Criteria.at_least_one_special_char)
                .test(this.password);
        return this.containAtLeastOneSpecialChar;
    }
    /**
     * @return {?}
     */
    setRulesAndValidators() {
        if (this.enableLengthRule) {
            this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}$`));
        }
        if (this.enableLowerCaseLetterRule) {
            this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExp(/^(?=.*?[a-z])/));
        }
        if (this.enableUpperCaseLetterRule) {
            this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExp(/^(?=.*?[A-Z])/));
        }
        if (this.enableDigitRule) {
            this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExp(/^(?=.*?[0-9])/));
        }
        if (this.enableSpecialCharRule) {
            this.criteriaMap.set(Criteria.at_least_one_special_char, RegExp(/^(?=.*?[" !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~"])/));
        }
        this.passwordFormControl.setValidators(Validators.pattern(this.criteriaMap.get(Criteria.at_least_eight_chars)));
        this.validators.map((/**
         * @param {?} criteria
         * @return {?}
         */
        criteria => {
            this.passwordFormControl.setValidators(Validators.pattern(this.criteriaMap.get(criteria)));
        }));
    }
    /**
     * @return {?}
     */
    calculatePasswordStrength() {
        /** @type {?} */
        const requirements = [];
        /** @type {?} */
        const unit = 100 / this.criteriaMap.size;
        // console.log('this.criteriaMap.size = ', this.criteriaMap.size);
        // console.log('unit = ', unit);
        requirements.push(this.enableLengthRule ? this._containAtLeastMinChars() : false, this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false, this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false, this.enableDigitRule ? this._containAtLeastOneDigit() : false, this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false);
        this._strength = requirements.filter((/**
         * @param {?} v
         * @return {?}
         */
        v => v)).length * unit;
        // console.log('length = ', this._strength / unit);
        this.onStrengthChanged.emit(this.strength);
    }
    /**
     * @return {?}
     */
    reset() {
        this._strength = 0;
        this.containAtLeastMinChars =
            this.containAtLeastOneLowerCaseLetter =
                this.containAtLeastOneUpperCaseLetter =
                    this.containAtLeastOneDigit =
                        this.containAtLeastOneSpecialChar = false;
    }
}
MatPasswordStrengthComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-password-strength',
                exportAs: 'matPasswordStrength',
                template: `
    <mat-progress-bar mode="determinate"
                      [color]="color"
                      [value]="strength">
    </mat-progress-bar>
  `,
                styles: [`

  `],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
MatPasswordStrengthComponent.propDecorators = {
    password: [{ type: Input }],
    validators: [{ type: Input }],
    externalError: [{ type: Input }],
    enableLengthRule: [{ type: Input }],
    enableLowerCaseLetterRule: [{ type: Input }],
    enableUpperCaseLetterRule: [{ type: Input }],
    enableDigitRule: [{ type: Input }],
    enableSpecialCharRule: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    onStrengthChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} timing
 * @param {?} rotateX
 * @param {?} rotateY
 * @return {?}
 */
function flipIn(timing, rotateX, rotateY) {
    /** @type {?} */
    const params = { timing: timing, delay: 0, rotateX, rotateY };
    return animation([
        style({ 'backface-visibility': 'visible' }),
        animate('{{ timing }}s {{ delay }}s ease-in', keyframes([
            style({
                opacity: 0,
                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',
                offset: 0,
            }),
            style({
                opacity: 1,
                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',
                offset: 0.4,
            }),
            style({
                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',
                offset: 0.6,
            }),
            style({
                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',
                offset: 0.8,
            }),
            style({
                transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',
                offset: 1,
            }),
        ])),
    ], { params });
}
/** @type {?} */
const flipInX = flipIn(1, 1, 0);
/** @type {?} */
const flipInY = flipIn(1, 0, 1);
/** @type {?} */
const shake = animation(animate('{{ timing }}s {{ delay }}s', keyframes([
    style({ transform: 'translate3d(0, 0, 0)', offset: 0 }),
    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.1 }),
    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.2 }),
    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.3 }),
    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.4 }),
    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.5 }),
    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.6 }),
    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.7 }),
    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.8 }),
    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.9 }),
    style({ transform: 'translate3d(0, 0, 0)', offset: 1 }),
])), { params: { timing: 1, delay: 0 } });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatPasswordStrengthInfoComponent {
    constructor() {
        this.enableScoreInfo = false;
        this.lowerCaseCriteriaMsg = 'contains at least one lower character';
        this.upperCaseCriteriaMsg = 'contains at least one upper character';
        this.digitsCriteriaMsg = 'contains at least one digit character';
        this.specialCharsCriteriaMsg = 'contains at least one special character';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.minCharsCriteriaMsg) {
            this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`;
        }
    }
}
MatPasswordStrengthInfoComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-password-strength-info',
                exportAs: 'matPasswordStrengthInfo',
                template: `
    <mat-card @list>
      <mat-card-content>
        <div class="info-row" @items *ngIf="passwordComponent.enableLowerCaseLetterRule">
          <div *ngIf="passwordComponent.containAtLeastOneLowerCaseLetter; then done else error" @flipY>
          </div>
          <ng-template #done>
            <mat-icon @positiveState color="primary">done</mat-icon>
          </ng-template>
          <ng-template #error>
            <mat-icon @negativeState color="warn">error</mat-icon>
          </ng-template>
          <div>
            <p>{{lowerCaseCriteriaMsg}}</p>
          </div>
        </div>

        <div class="info-row" @items *ngIf="passwordComponent.enableUpperCaseLetterRule">
          <div *ngIf="passwordComponent.containAtLeastOneUpperCaseLetter; then done else error">
          </div>
          <ng-template #done>
            <mat-icon @positiveState color="primary">done</mat-icon>
          </ng-template>
          <ng-template #error>
            <mat-icon @negativeState color="warn">error</mat-icon>
          </ng-template>
          <div>
            <p>{{upperCaseCriteriaMsg}}</p>
          </div>
        </div>

        <div class="info-row" @items *ngIf="passwordComponent.enableDigitRule">
          <div *ngIf="passwordComponent.containAtLeastOneDigit; then done else error">
          </div>
          <ng-template #done>
            <mat-icon @positiveState color="primary">done</mat-icon>
          </ng-template>
          <ng-template #error>
            <mat-icon @negativeState color="warn">error</mat-icon>
          </ng-template>
          <div>
            <p>{{digitsCriteriaMsg}}</p>
          </div>
        </div>

        <div class="info-row" @items *ngIf="passwordComponent.enableSpecialCharRule">
          <div *ngIf="passwordComponent.containAtLeastOneSpecialChar; then done else error">
          </div>
          <ng-template #done>
            <mat-icon @positiveState color="primary">done</mat-icon>
          </ng-template>
          <ng-template #error>
            <mat-icon @negativeState color="warn">error</mat-icon>
          </ng-template>
          <div>
            <p>{{specialCharsCriteriaMsg}}</p>
          </div>
        </div>

        <div class="info-row" @items *ngIf="passwordComponent.enableLengthRule">
          <div *ngIf="passwordComponent.containAtLeastMinChars; then done else error">
          </div>
          <ng-template #done>
            <mat-icon @positiveState color="primary">done</mat-icon>
          </ng-template>
          <ng-template #error>
            <mat-icon @negativeState color="warn">error</mat-icon>
          </ng-template>
          <div>
            <p>{{minCharsCriteriaMsg}}</p>
          </div>
        </div>

        <div *ngIf="enableScoreInfo" class="info-row" @items>
          <div *ngIf="passwordComponent.strength === 100; then done else error">
          </div>
          <ng-template #done>
            <mat-icon @positiveState color="primary">done</mat-icon>
          </ng-template>
          <ng-template #error>
            <mat-icon @negativeState color="warn">error</mat-icon>
          </ng-template>
          <div>
            <p>Password's strength = {{passwordComponent.strength}} %100</p>
          </div>
        </div>

      </mat-card-content>
    </mat-card>
  `,
                styles: [`
    mat-card{flex-direction:row;place-content:stretch center;flex:1 1 0%}mat-card,mat-card mat-card-content{box-sizing:border-box;display:flex;align-items:stretch}mat-card mat-card-content{flex-direction:column;max-width:100%;place-content:stretch flex-start}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{flex-direction:row;box-sizing:border-box;display:flex}
  `],
                animations: [
                    // nice stagger effect when showing existing elements
                    trigger('list', [
                        transition(':enter', [
                            // child animation selector + stagger
                            query('@items', stagger(300, animateChild()))
                        ]),
                    ]),
                    trigger('items', [
                        // cubic-bezier for a tiny bouncing feel
                        transition(':enter', [
                            style({ transform: 'scale(0.5)', opacity: 0 }),
                            animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(1)', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ transform: 'scale(1)', opacity: 1, height: '*' }),
                            animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px' }))
                        ]),
                    ]),
                    trigger('positiveState', [
                        transition(':enter', [
                            style({ 'backface-visibility': 'visible' }),
                            animate('{{ timing }}s {{ delay }}s ease-in', keyframes([
                                style({
                                    opacity: 0,
                                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',
                                    offset: 0,
                                }),
                                style({
                                    opacity: 1,
                                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',
                                    offset: 0.4,
                                }),
                                style({
                                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',
                                    offset: 0.6,
                                }),
                                style({
                                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',
                                    offset: 0.8,
                                }),
                                style({
                                    transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',
                                    offset: 1,
                                }),
                            ])),
                        ], { params: { timing: 1, delay: 0, rotateX: 1, rotateY: 0 } }),
                    ]),
                    trigger('negativeState', [
                        transition(':enter', useAnimation(shake)),
                    ]),
                ],
            },] },
];
MatPasswordStrengthInfoComponent.propDecorators = {
    passwordComponent: [{ type: Input }],
    enableScoreInfo: [{ type: Input }],
    lowerCaseCriteriaMsg: [{ type: Input }],
    upperCaseCriteriaMsg: [{ type: Input }],
    digitsCriteriaMsg: [{ type: Input }],
    specialCharsCriteriaMsg: [{ type: Input }],
    minCharsCriteriaMsg: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatPasswordStrengthModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: MatPasswordStrengthModule,
            providers: []
        };
    }
}
MatPasswordStrengthModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    MatProgressBarModule,
                    MatCardModule,
                    MatIconModule
                ],
                exports: [MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent],
                declarations: [MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent, MatPasswordStrengthModule, shake as ɵa };
//# sourceMappingURL=password-strength.js.map
