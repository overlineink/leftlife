{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.3.2');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsDisabledState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsDisabledState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's disabled state with the individual chips. */\n  private _syncChipsDisabledState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    if (this._ngZone) {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["provide","CdkTreeNode","useExisting","MatNestedTreeNode","type","ElementRef","CdkTree","IterableDiffers","String","decorators","Attribute","args","node","Input","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","_super","tslib_1.__extends","Directive","selector","providers","CdkTreeNodePadding","level","indent","MatTree","Component","exportAs","template","host","class","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatTreeNodeToggle","_this","apply","this","arguments","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNodeDef","MatTreeNode","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","prototype","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_translateTabComplete","complete","MatTabBody","_onTranslateTabStarted","event","isCentering","_isCenterPosition","toState","_beforeCentering","emit","_onCentering","_elementRef","nativeElement","clientHeight","_getLayoutDirection","_dir","position","_computePositionAnimationState","dir","_positionIndex","_position","_computePositionFromOrigin","origin","animations","matTabsAnimations","translateTab","ChangeDetectorRef","_afterLeavingCenter","Output","_onCentered","_portalHost","ViewChild","PortalHostDirective","_content","animationDuration","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","inputs","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","Subject","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","ngOnDestroy","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","unsubscribe","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","CdkNestedTreeNode","_tree","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkTreeNodeDef","_differs","MatStepHeader","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","distinctUntilChanged","x","y","fromState","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","changeDetectorRef","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dirChangeSubscription","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_getDefaultTextForState","_left","mode","_width","_right","opened","_contentMargins","_contentMarginChanges","MatDrawerContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","disableClose","close","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","backdropClick","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","_updatePosition","_tooltipInstance","updatePosition","MatTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","_manualListeners","listener","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","hideDelay","isVisible","e","_handleTouchend","_defaultOptions","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","_scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","reason","_parentMenu","MatMenuTrigger","_checkMenu","_handleHover","_handleTouchStart","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","triggersSubmenu","_menuItemInstance","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","menu","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","_destroyMenu","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","hammerLoader","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","MatListOption","_lines","MatLine","_text","checkboxPosition","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_menuCloseSubscription","_menu","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","_matDialogCloseResult","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_syncChipsDisabledState","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","MatLabel","MatPlaceholder","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":";;;;;;;i/DkKuBA,SAAgBs3F,GAAUC,EAAG30E,GAEzB,QAAS40E,KAAO30F,KAAK40F,YAAcF,EADnCG,GAAcH,EAAG30E,GAEjB20E,EAAErzF,UAAkB,OAAN0e,EAAapc,OAAOypB,OAAOrN,IAAM40E,EAAGtzF,UAAY0e,EAAE1e,UAAW,GAAIszF,ICNnF,QAAgBG,KACd,OAAO,ECAT,QAAgB1tF,GAAyC2tF,GACvD,MAAF,UAAAz2F,GAMI,QAAJ02F,KAAA,IAAgB,GAAhBl3F,MAAAioD,EAAA,EAAgBA,EAAhB9lD,UAAAuC,OAAgBujD,IAAAjoD,EAAhBioD,GAAA9lD,UAAA8lD,EAAI,IAAJjmD,GAAAxB,EAAAyB,MAAAC,KAA2ClC,IAA3CkC,WALYF,GAAZ6gC,WAAiC,IAM/B,MAPqBpiC,GAAvBy2F,EAAA12F,GAGIqF,OAAJC,eAAQoxF,EAAR3zF,UAAA,gBAAI,WAAiB,MAAOrB,MAAK2gC,eAC7B,SAAa98B,GAAc7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,oCAGtEmxF,GAPuBD,GCOvB,QAAgBzkF,GACZykF,EAASE,GACX,MAAF,UAAA32F,GAmBI,QAAJ02F,KAAA,IAAgB,GAAhBl3F,MAAAioD,EAAA,EAAgBA,EAAhB9lD,UAAAuC,OAAgBujD,IAAAjoD,EAAhBioD,GAAA9lD,UAAA8lD,EAAI,IAAJjmD,GAAAxB,EAAAyB,MAAAC,KACelC,IADfkC,WAIMF,GAAK+8C,MAAQo4C,IAEjB,MAzBqB12F,GAAvBy2F,EAAA12F,GAGIqF,OAAJC,eAAQoxF,EAAR3zF,UAAA,aAAI,WAA4B,MAAOrB,MAAKiqF,YACxC,SAAUpmF,GACd,GAAYqnF,GAAernF,GAASoxF,CAE1B/J,KAAiBlrF,KAAKiqF,SACpBjqF,KAAKiqF,QACPjqF,KAAK0F,YAAYC,cAAc+L,UAAUC,OAAO,OAAO3R,KAAKiqF,QAE1DiB,GACFlrF,KAAK0F,YAAYC,cAAc+L,UAAUG,IAAI,OAAOq5E,GAGtDlrF,KAAKiqF,OAASiB,oCAUtB8J,GAzBuBD,GCVvB,QAAgB3sF,GAA8C2sF,GAC5D,MAAF,UAAAz2F,GAOI,QAAJ02F,KAAA,IAAgB,GAAhBl3F,MAAAioD,EAAA,EAAgBA,EAAhB9lD,UAAAuC,OAAgBujD,IAAAjoD,EAAhBioD,GAAA9lD,UAAA8lD,EAAI,IAAJjmD,GAAAxB,EAAAyB,MAAAC,KAA2ClC,IAA3CkC,WANYF,GAAZo1F,gBAAsC,IAOpC,MARqB32F,GAAvBy2F,EAAA12F,GAIIqF,OAAJC,eAAQoxF,EAAR3zF,UAAA,qBAAI,WAAsB,MAAOrB,MAAKk1F,oBAClC,SAAkBrxF,GAAc7D,KAAKk1F,eAAiB5jF,EAAAA,sBAAsBzN,oCAGhFmxF,GARuBD,GCAvB,QAAgBx8E,GAAiDw8E,EAASxyB,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAAjkE,GASI,QAAJ02F,KAAA,IAAgB,GAAhBl3F,MAAAioD,EAAA,EAAgBA,EAAhB9lD,UAAAuC,OAAgBujD,IAAAjoD,EAAhBioD,GAAA9lD,UAAA8lD,EAAI,IAAJjmD,GAAAxB,EAAAyB,MAAAC,KACelC,IADfkC,WARYF,GAAZ2/E,UAAgCld,IAW9B,MAZqBhkE,GAAvBy2F,EAAA12F,GAGIqF,OAAJC,eAAQoxF,EAAR3zF,UAAA,gBAAI,WAAyB,MAAOrB,MAAKiN,UAAY,EAAIjN,KAAKy/E,eAC1D,SAAa57E,GAEX7D,KAAKy/E,UAAqB,MAAT57E,EAAgBA,EAAQ0+D,mCAM/CyyB,GAZuBD,GCavB,QAAgB59C,GAAsD49C,GAEpE,MAAF,UAAAz2F,GAyBI,QAAJ02F,KAAA,IAAgB,GAAhBl3F,MAAAioD,EAAA,EAAgBA,EAAhB9lD,UAAAuC,OAAgBujD,IAAAjoD,EAAhBioD,GAAA9lD,UAAA8lD,EAAI,IAAJjmD,GAAAxB,EAAAyB,MAAAC,KACelC,IADfkC,WAvBIF,GAAJ6xF,YAA0B,EAMb7xF,EAAb05C,aAA4B,GAAI3wC,GAAAA,UAoB9B,MA5BqBtK,GAAvBy2F,EAAA12F,GAYI02F,EAAJ3zF,UAAAo5C,iBAAI,WACJ,GAAY8hC,GAAWv8E,KAAK2xF,WAChBvnE,EAASpqB,KAAKg3C,kBAAoBh3C,KAAK+2C,YACvCo+C,EAAUn1F,KAAK6jD,mBAAqB7jD,KAAK82C,0BACzCx8B,EAAUta,KAAKi3C,UAAYj3C,KAAKi3C,UAAiB,QAAkB,KACnEqlC,EAAW6Y,EAAQ96E,aAAaC,EAAS8P,EAE3CkyD,KAAaC,IACfv8E,KAAK2xF,WAAarV,EAClBt8E,KAAKw5C,aAAa11C,SAO1BkxF,GA5BuBD,GCJvB,QAAgBlnE,GAA4CknE,GAE1D,MAAF,UAAAz2F,GAyBI,QAAJ02F,KAAA,IAAgB,GAAhBl3F,MAAAioD,EAAA,EAAgBA,EAAhB9lD,UAAAuC,OAAgBujD,IAAAjoD,EAAhBioD,GAAA9lD,UAAA8lD,EAAI,IAAJjmD,GAAAxB,EAAAyB,MAAAC,KAA2ClC,IAA3CkC,WAvBIF,GAAJ2gC,gBAAqB,EAOjB3gC,EAAJs1F,uBAMIt1F,EAAJmhB,YAAkB,GAAIo0E,GAAAA,WAAiB,SAAAC,GAG7Bx1F,EAAK2gC,eACP3gC,EAAKy1F,kBAAkBD,GAEvBx1F,EAAwB,oBAAE4B,KAAK4zF,OA4BrC,MAjDqB/2F,GAAvBy2F,EAAA12F,GAgCI02F,EAAJ3zF,UAAA+tB,iBAAI,WACE,GAAIpvB,KAAKygC,eACP,KAAMrX,OAAM,wFAIdppB,MAAKygC,gBAAiB,EAEtBzgC,KAAwB,oBAAEmC,QAAQnC,KAAKu1F,mBACvCv1F,KAAKo1F,oBAAsB,MAI7BJ,EAAJ3zF,UAAAk0F,kBAAI,SAAkBD,GAChBA,EAAWxxF,OACXwxF,EAAWtwF,YAEjBgwF,GAjDuBD,GCnBvB,QAAgBS,KACd,MAAOC,GAAAA,OAAOC,EAAAA,WC+BhB,QAASC,GAASnzF,EAAgBozF,GAEhC,IAAK,GADCC,GAAcj0F,MAAMY,GACjBS,EAAI,EAAGA,EAAIT,EAAQS,IAC1B4yF,EAAY5yF,GAAK2yF,EAAc3yF,EAEjC,OAAO4yF,GCtBT,QAAgBnqC,GAASoqC,EAA2BxsF,GAGlDwsF,EAAM3xF,QAAQpC,KAAKqiB,EAAAA,UAA8B0xE,IAAQ7zF,UAAU,SAACmN,GAAtE,GAAuE5M,GAAvE4M,EAAA5M,MACIuzF,GAASzsF,EAAS,cAAc,GAChCysF,EAASzsF,EAAS,cAAc,GAChCysF,EAASzsF,EAAS,kBAAkB,GAErB,IAAX9G,GAA2B,IAAXA,EAClBuzF,EAASzsF,EAAS,OAAO9G,EAA/B,SAA8C,GAC/BA,EAAS,GAClBuzF,EAASzsF,EAAS,kBAAkB,KAM1C,QAASysF,GAASzsF,EAAkCkhD,EAAmBwrC,GACvE,GAAQtkF,GAAYpI,EAAQ3D,cAAc+L,SACxCskF,GAAQtkF,EAAUG,IAAI24C,GAAa94C,EAAUC,OAAO64C,GCuQtD,QAASyrC,GAA0B3sF,GAIjCg7C,OAAO3J,iBAAiBrxC,GAAS4sF,iBAAiB,WAMpD,QAASC,GAAyB96E,EAAWC,EAAW43E,GACxD,GAAQkD,GAAQvoF,KAAK0B,IAAI1B,KAAK2zC,IAAInmC,EAAI63E,EAAKpwE,MAAOjV,KAAK2zC,IAAInmC,EAAI63E,EAAKlmE,QAC5DqpE,EAAQxoF,KAAK0B,IAAI1B,KAAK2zC,IAAIlmC,EAAI43E,EAAKhmE,KAAMrf,KAAK2zC,IAAIlmC,EAAI43E,EAAK/lE,QACjE,OAAOtf,MAAKyoF,KAAKF,EAAQA,EAAQC,EAAQA,yCtB5D3CE,GAAyBz9C,EAAzB9rC,UACQwpF,EAAR33C,EAA8B7xC,UACtBypF,EAAR,gBACAF,EAAAtzF,GAAA29C,OAAA21C,EAAAtzF,GAAA29C,QAAA41C,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,uBAcA,GAAAC,GAAAzwC,EAAA0wC,aAEAD,EAGIA,EAAJC,EAAAC,EAAAt3C,EACAzxC,KAAA0B,IAAA,EAAAmnF,EAAAp3C,EAAAq3C,GAGAC,EuBrSA,QAAgB/E,KACd,MAAOzoE,OAAM,gEAIf,QAAgB+oE,GAAmCvO,GACjD,MAAOx6D,OAAM,4CAA2Cw6D,EAA1D,QAIA,QAAgB0O,KACd,MAAOlpE,OAAM,sDlCqDf,QAAgB07D,KACd,OAAQM,uBAAuB,GpIRjC,QAAgBS,GAAyCv8C,GACvD,MAAO,YAAM,MAAAA,GAAQ2kD,iBAAiB4I,cAwBxC,QAAgB/N,KACd,MAAO1/D,OAAM,6M8I4Gf,QAASmrD,GAAqBh+C,EACA/L,GAC5B,MAAFM,OAAayL,EAAa/L,GlCnK1B,QAAgBwnD,KACd,KAAM5oD,OAAM,yEEOd,QAAgB0tE,GAAmCxtD,GACjD,MAAO,YAAM,MAAAA,GAAQ2kD,iBAAiBC,SAIxC,QAAgBta,GAA4CtqC,GAE1D,MAAO,YAAM,MAAAA,GAAQ2kD,iBAAiBC,SA6UxC,QAAS3Z,GACL/pD,EAA0Bo6C,GAC5B,MAAF95C,OAAa85C,EAAmBp6C,GCjQhC,QAASyrD,GAAiB3sE,EAAkC8qE,GAG1D,IAFF,GAAMhqD,GAA6B9gB,EAAQ3D,cAAc6vE,cAEhDprD,IAAWA,EAAO1Y,UAAUgG,SAAS,yBAC1C0S,EAASA,EAAOorD,aAGlB,OAAOprD,GAASgqD,EAAY3/D,KAAK,SAAAugE,GAAU,MAAAA,GAAOxmD,KAAO,EAAQA,KAAM,KwDlIzE,QAAgBmqD,IAAgCp7E,GAC9C,MAAO6rB,OAAM,eAAe7rB,EAA9B,mCCDA,QAAgBg/D,IAA2Bw6B,GACzC,MAAO3tE,OACH,wCAAwC2tE,EAD9C,0JjFoDA,QAAgB3nB,IAAuC9lC,GACrD,MAAO,YAAM,MAAAA,GAAQ2kD,iBAAiB4I,cNiOxC,QAASxmC,IAAK2mC,GACZ,MAAO,QAAQA,EAAjB,IAKA,QAASlnC,IAAejsD,GACtB,MAAOA,GAAM23D,MAAM,iBAAmB33D,EAAWA,EAAnD,KG1QA,QAAgBqyD,IAA4BvC,GAC1C,MAAOvqC,OAAM,sCAAsCuqC,EAArD,KASA,QAAgBiE,MACd,MAAOxuC,OAAM,8JAWf,QAAgBksC,IAAmCtC,GACjD,MAAO5pC,OAAM,yHACkD4pC,EAAjE,MAQA,QAAgBsB,IAAuCR,GACrD,MAAO1qC,OAAM,2HACkD0qC,EAAjE,MAuhBA,QAAgBwE,IACd2+B,EACAC,EACAC,EACAlgF,GACA,MAAOggF,IAAkB,GAAIhkC,IAAgBikC,EAAYC,EAAWlgF,GAiBtE,QAASu+C,IAASG,GAChB,MAAOA,GAAIyB,WAAU,GAIvB,QAASvB,IAAQ7B,EAAmBh6C,GAClC,MAAOg6C,GAAY,IAAMh6C,ECvjB3B,QAAgB0+C,MAChB,GAAQxhD,GAAYu+E,EAAAA,OAAOv9E,EAAAA,UACnBihD,EAAYjiD,EAAYA,EAAUo3B,SAAW,IAEnD,QAGEM,YAAa,WAAM,MAAAuqB,GAAaA,EAAUi+B,SAAWj+B,EAAUk+B,OAAU,KoFtD7E,QAAgBzjD,MACd,KAAMxqB,OAAM,0KAYd,QAAgB+gC,MACd,KAAM/gC,OAAM,kIASd,QAAgBghC,MACd,KAAMhhC,OAAM,gI/FiCd,QAAgBqgC,MACd,OACEzU,gBAAgB,EAChBV,UAAW,QACXG,UAAW,QACXR,cAAe,oCXzBnB,QAAgBiX,IAAiC5hB,GAC/C,MAAO,YAAM,MAAAA,GAAQ2kD,iBAAiB4I,c2GrCxC,QAAgBn9C,MACd,MAAOtwB,OAAM,iEASf,QAAgB6zB,MACd,MAAO7zB,OAAM,sDAQf,QAAgBuwB,MACd,MAAOvwB,OAAM,qCvKyGf,QAAgButB,IAA4CrN,GAE1D,MAAO,YAAM,MAAAA,GAAQ2kD,iBAAiB4I,cCjFxC,QAAgB9sD,IAAkChkC,GAChD,MAAOqjB,OAAM,qBAAqBrjB,EAApC,iBAQA,QAAgBk+C,IAAoC3a,GAClD,MAAO,YAAM,MAAAA,GAAQ2kD,iBAAiB4I,YAAYS,eAAgBtzC,MA0BpE,QAAgBE,MACd,OACEzc,UAAW,EACXO,UAAW,EACXK,kBAAmB,MsD1CvB,QAAgBwD,IAAoC0rD,GAClD,MAAOA,IAAc,GAAIlsD,IGQ3B,QAAgB8C,MAChB,GAAQj3B,GAAYu+E,EAAAA,OAAOv9E,EAAAA,UACnBihD,EAAYjiD,EAAYA,EAAUo3B,SAAW,IAEnD,QAGEM,YAAa,WAAM,MAAAuqB,GAAaA,EAAUi+B,SAAWj+B,EAAUk+B,OAAU,wBAkJnD,6BAAF,KAAxB9nF,IAA4CA,EAA5C,KAAA1B,KAAA0B,IAAAC,EAAA3B,KAAA2B,IAAAD,EAAA8e,ITtJA,QAAgBuhB,MACd,OAAQM,SAAUT,INdpB,QAAgBrJ,IAA8BrgC,GAC5C,KAAMqjB,OAAM,iDAAgDrjB,EAA9D,OAeA,QAAgB68B,MACd,OAAO,ERjCT,QAAgBjZ,MACd,MAAO,IAAIrC,IqIhCb,QAAgBqH,IAAgCH,GAC9C,MAAOpF,OAAM,kDAAkDoF,EAAjE,MAIA,QAAgB0C,MACd,MAAO9H,OAAM,oFAIf,QAAgBqF,MACd,MAAOrF,OAAM,oDAIf,QAAgB+E,IAA6BhgB,GAC3C,MAAOib,OAASjb,EAAlB,qDpIkJA,QAAS+gB,IAAsBjB,EACAe,GAC/B,GAAMwoE,IAA8B,MAAO,OAIzC,OAHa,QAATvpE,GAAmBupE,EAAUp8C,UAC5BpsB,GAAgBwoE,EAAU91F,KAAK,IAE7B81F,EEpJT,QAAgB/mE,IAAsC8mE,GACpD,MAAOA,IAAc,GAAInnE,IIH3B,QAAgBoC,IAAkC+kE,GAChD,MAAOA,IAAc,GAAIjlE,IpBG3B,QAAgB7P,MAMd,MALe,UAACnZ,GAAyB,OACvCwZ,KAAMxZ,GAAWA,EAAQ7B,YAAc,GAAK,KAAO,IACnDsb,MAAOzZ,GAAWA,EAAQ3B,aAAe,GAAK,KAAO,kOiIlBzD,GAAIktF,IAAgB,SAASH,EAAG30E,GAI5B,OAHA80E,GAAgBlxF,OAAO8zF,iBAChBC,uBAA2B91F,QAAS,SAAU8yF,EAAG30E,GAAK20E,EAAEgD,UAAY33E,IACvE,SAAU20E,EAAG30E,GAAK,IAAK,GAAI2sB,KAAK3sB,GAAOA,EAAEwD,eAAempB,KAAIgoD,EAAEhoD,GAAK3sB,EAAE2sB,MACpDgoD,EAAG30E,IASjB43E,GAAW,WAQlB,MAPAA,IAAWh0F,OAAOi0F,QAAU,SAAkB/f,GAC1C,IAAK,GAAIggB,GAAG50F,EAAI,EAAG60F,EAAI73F,UAAUuC,OAAQS,EAAI60F,EAAG70F,IAAK,CACjD40F,EAAI53F,UAAUgD,EACd,KAAK,GAAIypC,KAAKmrD,GAAOl0F,OAAOtC,UAAUkiB,eAAejgB,KAAKu0F,EAAGnrD,KAAImrC,EAAEnrC,GAAKmrD,EAAEnrD,IAE9E,MAAOmrC,IAEJ8f,GAAS53F,MAAMC,KAAMC,YkB5BhCuvB,GAAA,WAAA,QAAAA,MAKA,MAJSA,GAATC,eAA0B,8BACjBD,EAATg9D,mBAA8B,8BACrBh9D,EAAT88D,mBAA8B,4BACrB98D,EAATuoE,YAAuB,8BACvBvoE,KAIAF,GAAA,WAAA,QAAAA,MAIA,MAHSA,GAAT+8D,QAAmB,QACV/8D,EAATC,SAAoB,QACXD,EAATi9D,QAAmB,QACnBj9D,KjBRa0oE,GAAyB,GAAI7nF,GAAAA,eAAwB,qBAChEoS,WAAY,OACZC,QAASsyE,IAcXj0F,GAAA,WAiBE,QAAFA,GACwDo3F,EACTC,GADSl4F,KAAxDi4F,qBAAwDA,EACTj4F,KAA/Ck4F,cAA+CA,EAbrCl4F,KAAVm4F,sBAAiC,EAGvBn4F,KAAVo4F,mBAA8B,EAGpBp4F,KAAVkX,UAA0C,gBAAbD,WAAyBA,SAAWA,SAAW,KAGlEjX,KAAVq4F,QAAsC,gBAAX/zC,SAAuBA,OAASA,OAAS,KAM5DtkD,KAAKs4F,sBAAwBt4F,KAAKm4F,uBACpCn4F,KAAKu4F,yBACLv4F,KAAKw4F,uBACLx4F,KAAKm4F,sBAAuB,GAgElC,MA3DUt3F,GAAVQ,UAAAi3F,kBAAE,WACE,MAAOt4F,MAAKi4F,sBAAwB9gF,EAAAA,cAAgBnX,KAAKy4F,cAInD53F,EAAVQ,UAAAo3F,WAAE,WACF,GAAUn0C,GAAStkD,KAAY,OAC3B,OAAOskD,KAAWA,EAAOo0C,WAAap0C,EAAOq0C,UAGvC93F,EAAVQ,UAAAk3F,uBAAE,WACMv4F,KAAKkX,YAAclX,KAAKkX,UAAU0hF,SACpCr7C,QAAQC,KACN,yHAME38C,EAAVQ,UAAAm3F,qBAAE,WAGE,GAAKx4F,KAAKkX,WAAclX,KAAKkX,UAAU2hF,MAAoC,kBAArBl+C,kBAAtD,CAIJ,GAAUm+C,GAAc94F,KAAKkX,UAAU25B,cAAc,MAEjDioD,GAAYpnF,UAAUG,IAAI,2BAC1B7R,KAAKkX,UAAU2hF,KAAK9nD,YAAY+nD,EAEpC,IAAUC,GAAgBp+C,iBAAiBm+C,EAKnCC,IAA2C,SAA1BA,EAAcr3B,SACjCnkB,QAAQC,KACN,sLAMJx9C,KAAKkX,UAAU2hF,KAAKj+B,YAAYk+B,KAIlCj4F,EAAFQ,UAAA23F,wBAAE,YACMh5F,KAAKo4F,mBAAsBp4F,KAAKq4F,WAIhCr4F,KAAKs4F,qBAAyBt4F,KAAY,QAAiB,QAAMA,KAAKk4F,eACxE36C,QAAQC,KACN,wFAEJx9C,KAAKo4F,mBAAoB,mBAtF7B76F,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUu4F,EAAAA,YACVn4F,SAAUm4F,EAAAA,oDAgBZ17F,KAAA27F,QAAAt7F,aAAAL,KAAKsS,EAAAA,WAALtS,KAAiBuW,EAAAA,OAAjBhW,MAAwBk6F,QACxBz6F,SAAAsW,GAAAjW,aAAAL,KAAKsS,EAAAA,WAALtS,KAAiBuW,EAAAA,OAAjBhW,MAAwB2sC,EAAAA,oBAqExB5pC,KO1Gas4F,GAAkB,GAAIhpF,GAAAA,eAAuB,mBACxDoS,WAAY,OACZC,QAASgzE,IAcE4D,IAA4Bj8F,QAASg8F,GAAiB97F,YAAaq4F,EAAAA,yBAGhF,QAAAr3B,KAMYr+D,KAAZq5F,eAA6B,GAAIxwF,GAAAA,QAqPjC,MAtPElF,QAAFC,eAAMy6D,EAANh9D,UAAA,qBAAE,WAAwC,MAAOrB,MAAKq5F,gDAqLpDh7B,EAAFh9D,UAAA2+D,YAAE,SAAYn8D,GACV,MAAa,OAATA,GAAiB7D,KAAK2hE,eAAe99D,IAAU7D,KAAK+gE,QAAQl9D,GACvDA,EAEF7D,KAAK0a,WAOd2jD,EAAFh9D,UAAAi4F,UAAE,SAAUC,GACRv5F,KAAKu5F,OAASA,EACdv5F,KAAKq5F,eAAev1F,QAUtBu6D,EAAFh9D,UAAA4+D,YAAE,SAAYtf,EAAU64C,GACpB,MAAOx5F,MAAKkpE,QAAQvoB,GAAS3gD,KAAKkpE,QAAQswB,IACtCx5F,KAAKqpE,SAAS1oB,GAAS3gD,KAAKqpE,SAASmwB,IACrCx5F,KAAK0pE,QAAQ/oB,GAAS3gD,KAAK0pE,QAAQ8vB,IAUzCn7B,EAAFh9D,UAAA27D,SAAE,SAASrc,EAAiB64C,GACxB,GAAI74C,GAAS64C,EAAQ,CACzB,GAAUC,GAAaz5F,KAAK+gE,QAAQpgB,GAC1B+4C,EAAc15F,KAAK+gE,QAAQy4B,EAC/B,OAAIC,IAAcC,GACR15F,KAAKigE,YAAYtf,EAAO64C,GAE3BC,GAAcC,EAEvB,MAAO/4C,IAAS64C,GAWlBn7B,EAAFh9D,UAAAknE,UAAE,SAAUrL,EAAS1tD,EAAgBD,GACjC,MAAIC,IAAOxP,KAAKigE,YAAY/C,EAAM1tD,GAAO,EAChCA,EAELD,GAAOvP,KAAKigE,YAAY/C,EAAM3tD,GAAO,EAChCA,EAEF2tD,GAEXmB,KWlQa8D,GAAmB,GAAIhyD,GAAAA,eAA+B,oBVV7DwpF,GAAmC,mBAARC,MAI3BC,IACJ9xB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzB+xB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvF9xB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKpEpP,GAAqC,SAAA31D,GAAK,MAAAtF,QAAOsF,EAAI,IAA/C82F,GAAqBpE,EAAM,GAAjC/8B,IAIMohC,IACJjyB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3E+xB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpD9xB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrCiyB,GACF,qFAaJC,GAAA,SAAA57F,GAkBE,QAAF47F,GAAmDC,EAAuB3sF,GAAxE,GAAF1N,GACIxB,EADJgF,KAAAtD,OAAAA,WAFEF,GAAFs6F,kBAA8B,EAI1B97F,EAAJ+C,UAAUi4F,UAAVh2F,KAAAxD,EAAoBq6F,GAGhBr6F,EAAKs6F,kBAAoB5sF,EAASO,QAClCjO,EAAKu6F,WAAa7sF,EAASO,SAAWP,EAASQ,OA6OnD,MApQuCzP,GAAvC27F,EAAA57F,GA0BE47F,EAAF74F,UAAA6nE,QAAE,SAAQhM,GACN,MAAOA,GAAKo9B,eAGdJ,EAAF74F,UAAAgoE,SAAE,SAASnM,GACP,MAAOA,GAAKmM,YAGd6wB,EAAF74F,UAAAqoE,QAAE,SAAQxM,GACN,MAAOA,GAAKwM,WAGdwwB,EAAF74F,UAAAipE,aAAE,SAAapN,GACX,MAAOA,GAAKq9B,UAGdL,EAAF74F,UAAA6oE,cAAE,SAAcv8D,GAAd,GAAF7N,GAAAE,IACI,IAAI25F,GAAmB,CAC3B,GAAYa,GAAM,GAAIZ,MAAKa,eAAez6F,KAAKu5F,QAAS3tB,MAAOj+D,EAAO+sF,SAAU,OAC1E,OAAO/E,GAAM,GAAI,SAAA1yF,GACb,MAAAnD,GAAK66F,+BAA+B76F,EAAK86F,QAAQJ,EAAK,GAAIK,MAAK,KAAM53F,EAAG,OAE9E,MAAO42F,IAAoBlsF,IAG7BusF,EAAF74F,UAAAspE,aAAE,WAAA,GAAF7qE,GAAAE,IACI,IAAI25F,GAAmB,CAC3B,GAAYmB,GAAM,GAAIlB,MAAKa,eAAez6F,KAAKu5F,QAASwB,IAAK,UAAWL,SAAU,OAC5E,OAAO/E,GAAM,GAAI,SAAA1yF,GAAK,MAAAnD,GAAK66F,+BACvB76F,EAAK86F,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAG53F,EAAI,OAE9C,MAAO82F,KAGTG,EAAF74F,UAAAumE,kBAAE,SAAkBj6D,GAAlB,GAAF7N,GAAAE,IACI,IAAI25F,GAAmB,CAC3B,GAAYqB,GAAM,GAAIpB,MAAKa,eAAez6F,KAAKu5F,QAAS0B,QAASttF,EAAO+sF,SAAU,OAC5E,OAAO/E,GAAM,EAAG,SAAA1yF,GAAK,MAAAnD,GAAK66F,+BACtB76F,EAAK86F,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAG53F,EAAI,OAE9C,MAAO+2F,IAA0BrsF,IAGnCusF,EAAF74F,UAAA2qE,YAAE,SAAY9O,GACV,GAAIy8B,GAAmB,CAC3B,GAAYuB,GAAM,GAAItB,MAAKa,eAAez6F,KAAKu5F,QAAS9tB,KAAM,UAAWivB,SAAU,OAC7E,OAAO16F,MAAK26F,+BAA+B36F,KAAK46F,QAAQM,EAAKh+B,IAE/D,MAAOv/D,QAAOqC,KAAKkpE,QAAQhM,KAG7Bg9B,EAAF74F,UAAAqmE,kBAAE,WAEE,MAAO,IAGTwyB,EAAF74F,UAAAsoE,kBAAE,SAAkBzM,GAChB,MAAOl9D,MAAK0pE,QAAQ1pE,KAAKm7F,wBACrBn7F,KAAKkpE,QAAQhM,GAAOl9D,KAAKqpE,SAASnM,GAAQ,EAAG,KAGnDg9B,EAAF74F,UAAA+5F,MAAE,SAAMl+B,GACJ,MAAO,IAAI29B,MAAK39B,EAAKm+B,YAGvBnB,EAAF74F,UAAAkoE,WAAE,SAAWkC,EAAcG,EAAe1O,GAGtC,GAAI0O,EAAQ,GAAKA,EAAQ,GACvB,KAAMxiD,OAAM,wBAAwBwiD,EAA1C,6CAGI,IAAI1O,EAAO,EACT,KAAM9zC,OAAM,iBAAiB8zC,EAAnC,oCAGA,IAAQje,GAASj/C,KAAKm7F,wBAAwB1vB,EAAMG,EAAO1O,EAEvD,IAAIje,EAAOoqB,YAAcuC,EACvB,KAAMxiD,OAAM,iBAAiB8zC,EAAnC,2BAAkE0O,EAAlE,KAGI,OAAO3sB,IAGTi7C,EAAF74F,UAAA+mE,MAAE,WACE,MAAO,IAAIyyB,OAGbX,EAAF74F,UAAAmgE,MAAE,SAAM39D,GAGJ,MAAoB,gBAATA,GACF,GAAIg3F,MAAKh3F,GAEXA,EAAQ,GAAIg3F,MAAKA,KAAKr5B,MAAM39D,IAAU,MAG/Cq2F,EAAF74F,UAAAogE,OAAE,SAAOvE,EAAYo+B,GACjB,IAAKt7F,KAAK+gE,QAAQ7D,GAChB,KAAM9zC,OAAM,iDAGd,IAAIuwE,GAAmB,CAGjB35F,KAAKq6F,aAAen9B,EAAKo9B,cAAgB,GAAKp9B,EAAKo9B,cAAgB,QACrEp9B,EAAOl9D,KAAKo7F,MAAMl+B,GAClBA,EAAKq+B,YAAY1tF,KAAK0B,IAAI,EAAG1B,KAAK2B,IAAI,KAAM0tD,EAAKo9B,kBAGnDgB,EAANxwE,MAA0BwwE,GAAeZ,SAAU,OAEnD,IAAYQ,GAAM,GAAItB,MAAKa,eAAez6F,KAAKu5F,OAAQ+B,EACjD,OAAOt7F,MAAK26F,+BAA+B36F,KAAK46F,QAAQM,EAAKh+B,IAE/D,MAAOl9D,MAAK26F,+BAA+Bz9B,EAAKs+B,iBAGlDtB,EAAF74F,UAAAuoE,iBAAE,SAAiB1M,EAAYu+B,GAC3B,MAAOz7F,MAAK6pE,kBAAkB3M,EAAc,GAARu+B,IAGtCvB,EAAF74F,UAAAwoE,kBAAE,SAAkB3M,EAAYw+B,GAChC,GAAQC,GAAU37F,KAAKm7F,wBACfn7F,KAAKkpE,QAAQhM,GAAOl9D,KAAKqpE,SAASnM,GAAQw+B,EAAQ17F,KAAK0pE,QAAQxM,GAUnE,OAJIl9D,MAAKqpE,SAASsyB,MAAc37F,KAAKqpE,SAASnM,GAAQw+B,GAAU,GAAK,IAAM,KACzEC,EAAU37F,KAAKm7F,wBAAwBn7F,KAAKkpE,QAAQyyB,GAAU37F,KAAKqpE,SAASsyB,GAAU,IAGjFA,GAGTzB,EAAF74F,UAAAooE,gBAAE,SAAgBvM,EAAY0+B,GAC1B,MAAO57F,MAAKm7F,wBACRn7F,KAAKkpE,QAAQhM,GAAOl9D,KAAKqpE,SAASnM,GAAOl9D,KAAK0pE,QAAQxM,GAAQ0+B,IAGpE1B,EAAF74F,UAAAw6F,UAAE,SAAU3+B,GACR,OACEA,EAAK4+B,iBACL97F,KAAK+7F,QAAQ7+B,EAAK8+B,cAAgB,GAClCh8F,KAAK+7F,QAAQ7+B,EAAK++B,eAClB5gD,KAAK,MAQT6+C,EAAF74F,UAAA2+D,YAAE,SAAYn8D,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAIo2F,GAAezoF,KAAK3N,GAAQ,CACtC,GAAYq5D,GAAO,GAAI29B,MAAKh3F,EACpB,IAAI7D,KAAK+gE,QAAQ7D,GACf,MAAOA,IAIb,MAAO5+D,GAAX+C,UAAiB2+D,YAAjB18D,KAAAtD,KAA6B6D,IAG3Bq2F,EAAF74F,UAAAsgE,eAAE,SAAe//C,GACb,MAAOA,aAAei5E,OAGxBX,EAAF74F,UAAA0/D,QAAE,SAAQ7D,GACN,OAAQg/B,MAAMh/B,EAAKm+B,YAGrBnB,EAAF74F,UAAAqZ,QAAE,WACE,MAAO,IAAImgF,MAAKsB,MAIVjC,EAAV74F,UAAA85F,wBAAE,SAAgC1vB,EAAcG,EAAe1O,GAC/D,GAAUje,GAAS,GAAI47C,MAAKpvB,EAAMG,EAAO1O,EAOrC,OAHIuO,IAAQ,GAAKA,EAAO,KACtBxsB,EAAOs8C,YAAYv7F,KAAKkpE,QAAQjqB,GAAU,MAErCA,GAQDi7C,EAAV74F,UAAA06F,QAAE,SAAgBjE,GACd,OAAQ,KAAOA,GAAGv1F,OAAO,IAUnB23F,EAAV74F,UAAAs5F,+BAAE,SAAuCpjC,GACrC,MAAOA,GAAIpmB,QAAQ,kBAAmB,KAchC+oD,EAAV74F,UAAAu5F,QAAE,SAAgBM,EAA0Bh+B,GAC5C,GAAUw3B,GAAI,GAAImG,MAAKA,KAAKuB,IACpBl/B,EAAKo9B,cAAep9B,EAAKmM,WAAYnM,EAAKwM,UAAWxM,EAAKm/B,WAC1Dn/B,EAAKo/B,aAAcp/B,EAAKq/B,aAAcr/B,EAAKs/B,mBAC/C,OAAOtB,GAAIz5B,OAAOizB,mBAnQtBn3F,KAAC8vB,EAAAA,iDAkBD9vB,KAAAI,OAAAC,aAAAL,KAAesS,EAAAA,WAAftS,KAA2BuW,EAAAA,OAA3BhW,MAAkCq7F,QArElC57F,KAAQwS,EAAAA,YAwTRmqF,GApQuC77B,IWjD1Bo+B,IACXj7B,OACEpC,UAAW,MAEbsC,SACEtC,WAAYqM,KAAM,UAAWG,MAAO,UAAWmvB,IAAK,WACpDxtB,gBAAiB9B,KAAM,UAAWG,MAAO,SACzCb,eAAgBU,KAAM,UAAWG,MAAO,OAAQmvB,IAAK,WACrDluB,oBAAqBpB,KAAM,UAAWG,MAAO,UCEjD8wB,GAAA,WAAA,QAAAA,MAM+B,sBAN/Bn/F,KAACkD,EAAAA,SAAD3C,OACE4C,SAAU+0B,EAAAA,gBACV/2B,YACGvB,QAASkhE,GAAa74C,SAAU00E,SAGrCwC,KAKA9jC,GAAoD6jC,GAFpDE,GAAA,WAAA,QAAAA,MAIkC,sBAJlCp/F,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUg8F,IACVh+F,YAAavB,QAASglE,GAAkB2D,SAA1ClN,SAEA+jC,KCtBAC,GAAA,WAAA,QAAAA,MAKA,MAHEA,GAAFv7F,UAAAgZ,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQuiF,OAAUtiF,GAAQA,EAAKuiF,4BAH5Ev/F,KAAC8vB,EAAAA,aAKDuvE,KAGAhiF,GAAA,WAAA,QAAAA,MApBA,MAsBEA,GAAFvZ,UAAAgZ,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQyiF,SAAYxiF,GAAQA,EAAKuiF,4BAH9Ev/F,KAAC8vB,EAAAA,WAADvvB,OAAaykB,WAAY,8GApBzB3H,KCuBaoiF,GAAqB,GAAI7sF,GAAAA,eAA8B,sBAE9D8sF,IACJ,YACA,QACA,aACA,WACA,aACA,aAQFrkC,GAAM,aAANskC,GACO,aAFDC,IACJC,GAAFxkC,GACEykC,IAAFH,IAIAz3E,GAAA,SAAAnnB,GAKE,QAAFmnB,GACoD63E,EACpCC,GAFd,GAAFz9F,GAGIxB,EAHJgF,KAAAtD,OAAAA,WACoDF,GAApDw9F,eAAoDA,EAHlDx9F,EAAF09F,OAAWP,GAMHM,GACFA,EAAavE,4BAuEnB,MAhFmCz6F,GAAnCknB,EAAAnnB,GA0BEmnB,EAAFpkB,UAAAo8F,YAAE,SAAYn0F,GACd,GAAUo0F,GAAyC,mBAAXp5C,QAAyB,OAAgBC,OAAS,IAEtF,KAAKm5C,EASH,MAAOP,GAGb,IAAUQ,GAAK,GAAID,GAAOp0F,EAAStJ,KAAKs9F,oBAAkBzpF,IAGhD+pF,EAAM,GAAIF,GAAOG,IACjBC,EAAQ,GAAIJ,GAAOK,MACnBC,EAAQ,GAAIN,GAAOO,MAKnBC,EAAQl+F,KAAKm+F,kBAAkBP,GAAMz4F,MAAO,QAASi5F,UAAW,GAAIN,GACpEO,EAAYr+F,KAAKm+F,kBAAkBH,GAAQ74F,MAAO,YAAam5F,KAAM,KAe3E,OAZAV,GAAIW,cAAcT,GAOlBO,EAAUE,cAAcL,GAGxBP,EAAG9rF,KAAKisF,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIM54E,EAAVpkB,UAAA88F,kBAAE,SAA0BpJ,EAAkBj8C,GAA9C,IAA4D,GAA5D0lD,MAAAz4C,EAAA,EAA4DA,EAA5D9lD,UAAAuC,OAA4DujD,IAAAy4C,EAA5Dz4C,EAAA,GAAA9lD,UAAA8lD,EACA,IAAQ04C,GAAa,GAAK1J,GAAgB,YAAsBj8C,EAK5D,OAHA0lD,GAAa98F,KAAKqzF,GAClByJ,EAAar8F,QAAQ,SAAA6jD,GAAQ,MAAAy4C,GAAWF,cAAcv4C,KAE/Cy4C,kBA9EXlhG,KAAC8vB,EAAAA,iDAMD9vB,SAAAsW,GAAAjW,aAAAL,KAAKsS,EAAAA,WAALtS,KAAiBuW,EAAAA,OAAjBhW,MAAwBk/F,QAxCxBz/F,KAAQsD,GAARjD,aAAAL,KAyCKsS,EAAAA,cA0EL4V,GAhFmCi5E,EAAAA,qBbtBnCl5C,GAAA,WAAA,QAAAA,MAIsB,sBAJtBjoD,KAACiB,EAAAA,UAADV,OACEW,SAAU,wBACVS,MAAOC,MAAS,gBAElBqmD,mBAmCE,QAAFm5C,GAAc7I,EAA2BxsF,GACrCoiD,EAASoqC,EAAOxsF,GAEpB,MAAAq1F,MAEAz3C,GAAA,WAAA,QAAAA,MAK6B,sBAL7B3pD,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUG,IACVC,SAAU0kD,GAAS3kD,IACnBE,cAAeykD,QAEjB0B,Sc5DE03C,UAAF,EAAaC,QAAb,EAAsBC,WAAtB,EAAkCC,OAAlC,8GAMA,mBAKE,QAAFC,GACYjV,EAEDzgF,EAEAkhB,GAJCxqB,KAAZ+pF,UAAYA,EAED/pF,KAAXsJ,QAAWA,EAEAtJ,KAAXwqB,OAAWA,EAPTxqB,KAAFwZ,MAAuBylF,GAAYF,OAcnC,MAHEC,GAAF39F,UAAA69F,QAAE,WACEl/F,KAAK+pF,UAAUoV,cAAcn/F,OAEjCg/F,KbaaI,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IAG3BC,GAAsBx3F,EAAAA,iCAAiCC,SAAS,kBAqCpE,QAAFg2E,GAAsBwhB,EACAj3F,EACRlB,EACAkG,GAHZ,GAAF1N,GAAAE,IAAsBA,MAAtBy/F,QAAsBA,EACAz/F,KAAtBwI,QAAsBA,EArBZxI,KAAV0/F,gBAA2B,EAGjB1/F,KAAV2/F,eAA2B,GAAI3xE,KAGrBhuB,KAAV4/F,eAA2B,GAAIxuD,KAmKrBpxC,KAAV6/F,YAAwB,SAAC16F,GAGzB,GAAU26F,GAAkBvqD,EAAAA,gCAAgCpwC,GAClD46F,EAAmBjgG,EAAKkgG,sBAC1BnF,KAAKoF,MAAQngG,EAAKkgG,qBAAuBT,EAExCz/F,GAAK2/F,QAAQS,gBAAmBJ,GAAoBC,IACvDjgG,EAAK4/F,gBAAiB,EACtB5/F,EAAKqgG,aAAah7F,EAAMo3B,QAASp3B,EAAMq3B,QAAS18B,EAAK2/F,QAAQnqF,gBAKzDtV,KAAVogG,aAAyB,SAACj7F,GACtB,IAAKrF,EAAK2/F,QAAQS,eAAgB,CAIhCpgG,EAAKkgG,qBAAuBnF,KAAKoF,MACjCngG,EAAK4/F,gBAAiB,CAMtB,KAAK,GAFCW,GAAUl7F,EAAMm7F,eAEbr9F,EAAI,EAAGA,EAAIo9F,EAAQ79F,OAAQS,IAClCnD,EAAKqgG,aAAaE,EAAQp9F,GAAGs5B,QAAS8jE,EAAQp9F,GAAGu5B,QAAS18B,EAAK2/F,QAAQnqF,gBAMrEtV,KAAVugG,YAAwB,WACfzgG,EAAK4/F,iBAIV5/F,EAAK4/F,gBAAiB,EAGtB5/F,EAAK8/F,eAAez9F,QAAQ,SAAA66E,GAGhC,GAAY/0C,GAAY+0C,EAAOxjE,QAAUylF,GAAYJ,SAC7C7hB,EAAOxyD,OAAOg2E,sBAAwBxjB,EAAOxjE,QAAUylF,GAAYL,WAEhE5hB,EAAOxyD,OAAOi2E,YAAcx4D,GAC/B+0C,EAAOkiB,cA/LP1xF,EAAS4J,YACXpX,KAAK0gG,kBAAoBp5F,EAAW3B,cAGpC3F,KAAK2/F,eACF/wE,IAAI,YAAa5uB,KAAK6/F,aACtBjxE,IAAI,UAAW5uB,KAAKugG,aACpB3xE,IAAI,aAAc5uB,KAAKugG,aAEvB3xE,IAAI,aAAc5uB,KAAKogG,cACvBxxE,IAAI,WAAY5uB,KAAKugG,aACrB3xE,IAAI,cAAe5uB,KAAKugG,cAsMjC,MA5LEtiB,GAAF58E,UAAA8+F,aAAE,SAAa9kF,EAAWC,EAAWkP,GAAnC,GAAF1qB,GAAAE,SAAA,KAAAwqB,IAAqCA,KACrC,IAAUooE,GAAgB5yF,KAAK2gG,eACL3gG,KAAK2gG,gBAAkB3gG,KAAK0gG,kBAAkBpiE,wBAC9DsiE,EAAV91E,MAAgCs0E,GAAiC50E,EAAOq2E,UAEhEr2E,GAAOs2E,WACTzlF,EAAIu3E,EAAc9vE,KAAO8vE,EAAc7vE,MAAQ,EAC/CzH,EAAIs3E,EAAc1lE,IAAM0lE,EAAcx/E,OAAS,EAGrD,IAAU2tF,GAASv2E,EAAOu2E,QAAU5K,EAAyB96E,EAAGC,EAAGs3E,GACzD14C,EAAU7+B,EAAIu3E,EAAc9vE,KAC5BiyB,EAAUz5B,EAAIs3E,EAAc1lE,IAC5BtG,EAAWg6E,EAAgBvB,cAE3BriB,EAAS/lE,SAAS45B,cAAc,MACtCmsC,GAAOtrE,UAAUG,IAAI,sBAErBmrE,EAAOrvE,MAAMmV,KAAUo3B,EAAU6mD,EAArC,KACI/jB,EAAOrvE,MAAMuf,IAAS6nB,EAAUgsD,EAApC,KACI/jB,EAAOrvE,MAAMyF,OAAqB,EAAT2tF,EAA7B,KACI/jB,EAAOrvE,MAAMoV,MAAoB,EAATg+E,EAA5B,KAGI/jB,EAAOrvE,MAAMiE,gBAAkB4Y,EAAOqyB,OAAS,KAC/CmgC,EAAOrvE,MAAMqzF,mBAAwBp6E,EAAzC,KAEI5mB,KAAK0gG,kBAAkB3vD,YAAYisC,GAInCiZ,EAA0BjZ,GAE1BA,EAAOrvE,MAAMC,UAAY,UAG7B,IAAUqzF,GAAY,GAAIjC,IAAUh/F,KAAMg9E,EAAQxyD,EA2B9C,OAzBAy2E,GAAUznF,MAAQylF,GAAYL,UAG9B5+F,KAAK4/F,eAAe/tF,IAAIovF,GAEnBz2E,EAAOi2E,aACVzgG,KAAKkhG,2BAA6BD,GAKpCjhG,KAAKmhG,sBAAsB,WAC/B,GAAYC,GAA8BH,IAAcnhG,EAAKohG,0BAEvDD,GAAUznF,MAAQylF,GAAYJ,QAMzBr0E,EAAOi2E,YAAgBW,GAAgCthG,EAAK4/F,gBAC/DuB,EAAU/B,WAEXt4E,GAEIq6E,GAIThjB,EAAF58E,UAAA89F,cAAE,SAAc8B,GAChB,GAAUI,GAAYrhG,KAAK4/F,eAAe9wE,OAAOmyE,EAY7C,IAVIA,IAAcjhG,KAAKkhG,6BACrBlhG,KAAKkhG,2BAA6B,MAI/BlhG,KAAK4/F,eAAe/hE,OACvB79B,KAAK2gG,eAAiB,MAInBU,EAAL,CAIJ,GAAUC,GAAWL,EAAU33F,QACrBs3F,EAAV91E,MAAgCs0E,GAAiC6B,EAAUz2E,OAAOq2E,UAE9ES,GAAS3zF,MAAMqzF,mBAAwBJ,EAAgBtB,aAA3D,KACIgC,EAAS3zF,MAAMqa,QAAU,IACzBi5E,EAAUznF,MAAQylF,GAAYH,WAG9B9+F,KAAKmhG,sBAAsB,WACzBF,EAAUznF,MAAQylF,GAAYF,OAC9BuC,EAAmB,WAAE1mC,YAAY0mC,IAChCV,EAAgBtB,gBAIrBrhB,EAAF58E,UAAAkgG,WAAE,WACEvhG,KAAK4/F,eAAez9F,QAAQ,SAAA66E,GAAU,MAAAA,GAAOkiB,aAI/CjhB,EAAF58E,UAAAgU,mBAAE,SAAmB/L,GAAnB,GAAFxJ,GAAAE,IACSsJ,IAAWA,IAAYtJ,KAAKwhG,kBAKjCxhG,KAAKu+E,uBAELv+E,KAAKwI,QAAQmB,kBAAkB,WAC7B7J,EAAK6/F,eAAex9F,QAAQ,SAACs1B,EAAIl6B,GAC/B+L,EAAQo7C,iBAAiBnnD,EAAMk6B,EAAI+nE,QAIvCx/F,KAAKwhG,gBAAkBl4F,IA0DjB20E,EAAV58E,UAAA8/F,sBAAE,SAA8B1pE,EAAc+P,OAA9C,KAAAA,IAA8CA,EAA9C,GACIxnC,KAAKwI,QAAQmB,kBAAkB,WAAM,MAAAkd,YAAW4Q,EAAI+P,MAItDy2C,EAAF58E,UAAAk9E,qBAAE,WAAA,GAAFz+E,GAAAE,IACQA,MAAKwhG,iBACPxhG,KAAK2/F,eAAex9F,QAAQ,SAACs1B,EAAIl6B,GAC/BuC,EAAoB,gBAAEynC,oBAAoBhqC,EAAMk6B,EAAI+nE,OAI5DvhB,KczQahoE,GACT,GAAI9F,GAAAA,eAAoC,6BAE5C8sE,GAAA,WAqEE,QAAFA,GAAsBv3E,EACRuP,EACAzH,EAC+Ci0F,EACJ1hE,GAJnC//B,KAAtB0F,YAAsBA,EA1CM1F,KAA5B+gG,OAA6C,EAmBnC/gG,KAAV2gC,WAA+B,EAqBrB3gC,KAAVygC,gBAAoC,EAQhCzgC,KAAK0hG,eAAiBD,MACtBzhG,KAAK2hG,gBAAkB,GAAI1jB,IAAej+E,KAAMiV,EAAQvP,EAAa8H,GAE/C,mBAAlBuyB,IACF//B,KAAK0hG,eAAeb,WAAaxB,cAAe,EAAGC,aAAc,IAqEvE,MA5GE37F,QAAFC,eACMq5E,EADN57E,UAAA,gBAAE,WACiB,MAAOrB,MAAK2gC,eAC7B,SAAa98B,GACX7D,KAAK2gC,UAAY98B,EACjB7D,KAAK4hG,gEAQPj+F,OAAFC,eACMq5E,EADN57E,UAAA,eAAE,WACgB,MAAOrB,MAAK6hG,UAAY7hG,KAAK0F,YAAYC,mBACzD,SAAY4T,GACVvZ,KAAK6hG,SAAWtoF,EAChBvZ,KAAK4hG,gEA2BP3kB,EAAF57E,UAAAmiB,SAAE,WACExjB,KAAKygC,gBAAiB,EACtBzgC,KAAK4hG,gCAGP3kB,EAAF57E,UAAAiL,YAAE,WACEtM,KAAK2hG,gBAAgBpjB,wBAIvBtB,EAAF57E,UAAAkgG,WAAE,WACEvhG,KAAK2hG,gBAAgBJ,cAOvB59F,OAAFC,eAAMq5E,EAAN57E,UAAA,oBAAE,WACE,OACEy/F,SAAU9gG,KAAK8gG,SACfC,OAAQ/gG,KAAK+gG,OACblkD,MAAO78C,KAAK68C,MACZgkD,UAAN/1E,MAAqB9qB,KAAK0hG,eAAeb,UAAc7gG,KAAK6gG,WACtDL,qBAAsBxgG,KAAK0hG,eAAelB,uDAQ9C78F,OAAFC,eAAMq5E,EAAN57E,UAAA,sBAAE,WACE,MAAOrB,MAAKiN,YAAcjN,KAAK0hG,eAAez0F,0CAIxCgwE,EAAV57E,UAAAugG,6BAAE,YACO5hG,KAAKiN,UAAYjN,KAAKygC,gBACzBzgC,KAAK2hG,gBAAgBtsF,mBAAmBrV,KAAKuZ,UAmBjD0jE,EAAF57E,UAAAygG,OAAE,SAAOC,EAAkCzmF,EAAekP,GACtD,WADJ,KAAAlP,IAA2CA,EAA3C,GAC6B,gBAAdymF,GACF/hG,KAAK2hG,gBAAgBxB,aAAa4B,EAAWzmF,EAA1DwP,MAAiE9qB,KAAKsV,aAAiBkV,IAE1ExqB,KAAK2hG,gBAAgBxB,aAAa,EAAG,EAAlDr1E,MAAyD9qB,KAAKsV,aAAiBysF,oBAjJ/ExkG,KAACiB,EAAAA,UAADV,OACEW,SAAU,4BACVO,SAAU,YACVE,MACEC,MAAS,aACT6iG,+BAAgC,qDA5CpCzkG,KAAEC,EAAAA,aAIFD,KAAEuS,EAAAA,SAPFvS,KAAQwS,EAAAA,WAkHRxS,SAAAsW,GAAAjW,aAAAL,KAAesS,EAAAA,WAAftS,KAA2BuW,EAAAA,OAA3BhW,MAAkCmY,QAClC1Y,KAAAI,OAAAC,aAAAL,KAAesS,EAAAA,WAAftS,KAA2BuW,EAAAA,OAA3BhW,MAAkC8mB,EAAAA,8CA9DlCi4B,QAAAt/C,KAAGS,EAAAA,MAAHF,MAAS,oBAGTmkG,YAAA1kG,KAAGS,EAAAA,MAAHF,MAAS,wBAMTgjG,WAAAvjG,KAAGS,EAAAA,MAAHF,MAAS,uBAOTijG,SAAAxjG,KAAGS,EAAAA,MAAHF,MAAS,qBAOT+iG,YAAAtjG,KAAGS,EAAAA,MAAHF,MAAS,wBAMTmP,WAAA1P,KAAGS,EAAAA,MAAHF,MAAS,uBAYTyb,UAAAhc,KAAGS,EAAAA,MAAHF,MAAS,uBAgGTm/E,KCrLA5mE,GAAA,WAAA,QAAAA,MAK8B,sBAL9B9Y,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUG,GAAiB40B,EAAAA,gBAC3B30B,SAAUm8E,GAAWp8E,IACrBE,cAAek8E,QAEjB5mE,KCeA6rF,GAAA,WAsBE,QAAFA,GAAgE1rE,GAAAx2B,KAAhEw2B,eAAgEA,EALrDx2B,KAAXwZ,MAA2C,YAGhCxZ,KAAXiN,UAA+B,EAA/B,sBApBA1P,KAACwB,EAAAA,UAADjB,OAAAwB,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACElB,SAAF,sBACEY,QAAF,ugCACEJ,SAAU,GACVC,MACFC,MAAA,sBACMgjG,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,WACIlpE,kCAAJ,4KAYA+oE,EAAAtiG,kEAFAsiG,KC7CA/6C,GAAA,WAAA,QAAAA,MAIuC,sBAJvC5pD,KAACkD,EAAAA,SAAD3C,OACEgD,SAAUohG,IACVnhG,cAAemhG,QAEjB/6C,mBCFA,QAAAm7C,MAA+B,MAA/BA,MACaC,GACTn7F,EAAck7F,IAGdE,GAA2B,EAK/B/+C,GAAA,SAAAnlD,GAAA,QAAAmlD,KAAA,GAAA3jD,GAAA,OAAAxB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,WAsBEF,GAAFugD,SAAqB,sBAAsBmiD,OAH3C,MAFiCjkG,GAAjCklD,EAAAnlD,kBAjBAf,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,eACEO,SAAU,cACVC,SAAU,4JACVK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEiI,QAAF,YACEvI,QAAF,mkBACEH,MACFC,MAAA,eACMC,KAAN,QACIqjG,gCAAJ,WACI36F,uBAAJ,sBACIw6C,yBAAJ,gBAIAmB,EAAA7jD,wCAGA6jD,OxCVI0+B,GAAmB,gBAIrB,QAAFgF,GAEWhxD,EAEA8nB,OAAX,KAAAA,IAAWA,GAAX,GAFWj+C,KAAXm2B,OAAWA,EAEAn2B,KAAXi+C,YAAWA,EACX,MAAAkpC,MAeajkC,GACT,GAAI/yC,GAAAA,eAAyC,+BAKjDqzC,GAAA,WAwDE,QAAFA,GACYte,EACA58B,EACiDo6F,EACpC9hD,GAHb5gD,KAAZklC,SAAYA,EACAllC,KAAZsI,mBAAYA,EACiDtI,KAA7D0iG,QAA6DA,EACpC1iG,KAAzB4gD,MAAyBA,EApCf5gD,KAAVwgC,WAAsB,EACZxgC,KAAV4uF,SAAoB,EACV5uF,KAAV2gC,WAAsB,EACZ3gC,KAAVgvF,qBAAiC,GAYtBhvF,KAAXwuB,GAAwB,cAAc2zD,KAYjBniF,KAArBg5C,kBAAyC,GAAI5vC,GAAAA,aAGlCpJ,KAAX6S,cAA2B,GAAIhK,GAAAA,QAH/B,MArBElF,QAAFC,eAAM4/C,EAANniD,UAAA,gBAAE,WAAiB,MAAOrB,MAAK0iG,SAAW1iG,KAAK0iG,QAAQ3oD,0CAGrDp2C,OAAFC,eAAM4/C,EAANniD,UAAA,gBAAE,WAA0B,MAAOrB,MAAKwgC,2CAStC78B,OAAFC,eACM4/C,EADNniD,UAAA,gBAAE,WACiB,MAAQrB,MAAK4gD,OAAS5gD,KAAK4gD,MAAM3zC,UAAajN,KAAK2gC,eACpE,SAAa98B,GAAc7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,oCAGlEF,OAAFC,eAAM4/C,EAANniD,UAAA,qBAAE,WAAsB,MAAOrB,MAAK0iG,SAAW1iG,KAAK0iG,QAAQxgE,+CAqB1Dv+B,OAAFC,eAAM4/C,EAANniD,UAAA;gDAAE,WACE,MAAOrB,MAAK4uF,yCAOdjrF,OAAFC,eAAM4/C,EAANniD,UAAA,iBAAE,WAEE,OAAQrB,KAAK6yB,kBAAkBrmB,aAAe,IAAIsL,wCAIpD0rC,EAAFniD,UAAAg5C,OAAE,WACOr6C,KAAKwgC,YACRxgC,KAAKwgC,WAAY,EACjBxgC,KAAKsI,mBAAmB6B,eACxBnK,KAAK6uF,8BAKTrrC,EAAFniD,UAAAk5C,SAAE,WACMv6C,KAAKwgC,YACPxgC,KAAKwgC,WAAY,EACjBxgC,KAAKsI,mBAAmB6B,eACxBnK,KAAK6uF,8BAKTrrC,EAAFniD,UAAAkG,MAAE,WACF,GAAU+B,GAAUtJ,KAAK6yB,iBAEQ,mBAAlBvpB,GAAQ/B,OACjB+B,EAAQ/B,SASZi8C,EAAFniD,UAAAytF,gBAAE,WACO9uF,KAAK4uF,UACR5uF,KAAK4uF,SAAU,EACf5uF,KAAKsI,mBAAmB6B,iBAS5Bq5C,EAAFniD,UAAA0tF,kBAAE,WACM/uF,KAAK4uF,UACP5uF,KAAK4uF,SAAU,EACf5uF,KAAKsI,mBAAmB6B,iBAK5Bq5C,EAAFniD,UAAA2nD,SAAE,WACE,MAAOhpD,MAAKm7C,WAIdqI,EAAFniD,UAAAoJ,eAAE,SAAetF,GACRA,EAAMwF,UAAYM,EAAAA,OAAS9F,EAAMwF,UAAYO,EAAAA,OAAWR,EAAAA,eAAevF,KAC1EnF,KAAKq8C,wBAGLl3C,EAAM2F,mBAQV04C,EAAFniD,UAAAg7C,sBAAE,WACOr8C,KAAKiN,WACRjN,KAAKwgC,WAAYxgC,KAAK+5C,WAAY/5C,KAAKwgC,UACvCxgC,KAAKsI,mBAAmB6B,eACxBnK,KAAK6uF,2BAA0B,KAKnCrrC,EAAFniD,UAAAoS,aAAE,WACE,MAAOzT,MAAKiN,SAAW,KAAO,KAIhCu2C,EAAFniD,UAAAwxB,gBAAE,WACE,MAAO7yB,MAAKklC,SAASv/B,eAGvB69C,EAAFniD,UAAA44D,mBAAE,WAME,GAAIj6D,KAAKwgC,UAAW,CACxB,GAAY2a,GAAYn7C,KAAKm7C,SAEnBA,KAAcn7C,KAAKgvF,uBACrBhvF,KAAKgvF,qBAAuB7zC,EAC5Bn7C,KAAK6S,cAAc/O,UAKzB0/C,EAAFniD,UAAAiL,YAAE,WACEtM,KAAK6S,cAAc7N,YAIbw+C,EAAVniD,UAAAwtF,0BAAE,SAAkC5wC,OAApC,KAAAA,IAAoCA,GAApC,GACIj+C,KAAKg5C,kBAAkBxzC,KAAK,GAAI2hF,IAAyBnnF,KAAMi+C,oBA/LnE1gD,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,aACEO,SAAU,YACVE,MACFE,KAAA,SACM45B,kBAAN,iBACIi2D,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtBp2D,OAAJ,KACIqsB,uBAAJ,sBACIt9C,uBAAJ,sBACIsnF,8BAAJ,WACIjvF,UAAJ,0BACIs+B,YAAJ,yBACIt/B,MAAS,cAEbE,QAAA,43CACAJ,SAAA,qWACEK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAnEApC,SAAEsW,GAAFjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAolD,QAFA3lD,KAAEkmD,GAAF7lD,aAAAL,KAAAsS,EAAAA,cAcA2zC,EAAA5jD,2DAwEAqN,WAAA1P,KAAAS,EAAAA,QAGAg7C,oBAAAz7C,KAAAoJ,EAAAA,UAYA68C,KClGAM,GAAA,WAAA,QAAAA,MAK8B,sBAL9BvmD,KAACkD,EAAAA,SAAD3C,OACE4C,SAAU2V,GAAiBzV,EAAAA,aAAcumD,IACzCrmD,SAAU0iD,GAAWC,IACrB1iD,cAAeyiD,GAAWC,QAE5BK,KCVaurC,GACX,GAAIl/E,GAAAA,eAA6B,4BCD/B0lB,GAAe,EAInBkuD,GAAA,WAAA,QAAAA,KASW/jF,KAAXwuB,GAAwB,aAAaqH,KACrC,sBAVAt4B,KAACiB,EAAAA,UAADV,OACEW,SAAU,YACVS,MACEC,MAAS,YACTC,KAAQ,QACRgjD,YAAa,4BAIjB5zB,KAAAjxB,KAAGS,EAAAA,SACH+lF,KCLauL,IAIXC,mBAAoBh2E,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAAS7L,EAAAA,OAAQqa,QAAS,EAAGpa,UAAW,oBAC9C8L,EAAAA,WAAW,iBACT/L,EAAAA,OAAQqa,QAAS,EAAGpa,UAAW,sBAC/B+L,EAAAA,QAAQ,6DChBd,QAAAspC,MAuDA,MAAAA,MCzDIptB,GAAe,EAInBouD,GAAA,WAAA,QAAAA,KAYWjkF,KAAX4jF,MAAoC,QAGzB5jF,KAAXwuB,GAAwB,YAAYqH,KACpC,sBAhBAt4B,KAACiB,EAAAA,UAADV,OACEW,SAAU,WACVS,MACEC,MAAS,WACTqwF,oBAAqB,iBACrBptC,YAAa,KAEbvtB,eAAgB,8BAKpB+uD,QAAArmF,KAAGS,EAAAA,QAGHwwB,KAAAjxB,KAAGS,EAAAA,SACHimF,KCnBAM,GAAA,WAAA,QAAAA,MAGuB,sBAHvBhnF,KAACiB,EAAAA,UAADV,OACEW,SAAU,gBAEZ8lF,KCEAC,GAAA,WAAA,QAAAA,MAG6B,sBAH7BjnF,KAACiB,EAAAA,UAADV,OACEW,SAAU,sBAEZ+lF,KCRAL,GAAA,WAAA,QAAAA,MAGwB,sBAHxB5mF,KAACiB,EAAAA,UAADV,OACEW,SAAU,kBAEZ0lF,KCHAE,GAAA,WAAA,QAAAA,MAGwB,sBAHxB9mF,KAACiB,EAAAA,UAADV,OACEW,SAAU,kBAEZ4lF,KvB0CIxuD,GAAe,gBAUjB,QAAF45D,GAAqB/pF,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAA+pF,MAManL,GACTh0E,EAAWm/E,GAAkB,WAiBpBC,GACT,GAAIv/E,GAAAA,eAA2C,kCAInDkzC,GAAA,SAAA/kD,GAyJE,QAAF+kD,GACa39C,EACC4C,EACsCqnF,EAC1B7pF,EAER8pF,EAEJnnF,EACAD,EACmCguB,GAV/C,GAAF12B,GAWIxB,EAXJgF,KAAAtD,KAWU0F,IAXV1F,WACaF,GAAb4F,YAAaA,EACC5F,EAAdwI,mBAAcA,EAEYxI,EAA1BgG,KAA0BA,EAERhG,EAAlB8vF,UAAkBA,EAEJ9vF,EAAd2I,UAAcA,EACA3I,EAAd0I,QAAcA,EA3GJ1I,EAAV+vF,yCAAoD,EAG1C/vF,EAAVgwF,sCAAiD,EAEvChwF,EAAV8I,WAAuB,GAAIC,GAAAA,QAyBjB/I,EAAViwF,oBAA+B,EAW7BjwF,EAAFkwF,yBAAqC,GAS3BlwF,EAAVmwF,WAAuB,GAGrBnwF,EAAFowF,aAAyB,YAAYr6D,KAGnC/1B,EAAFugD,SAAa,wBAAwBxqB,KAuDjC/1B,EAAKqwF,cAAgBR,MACrB7vF,EAAKkoF,WAAaloF,EAAKqwF,cAAcC,OAAS,OAC9CtwF,EAAKuwF,mBAAwC,mBAAnB75D,EAG1B12B,EAAKuiF,WAAcuN,GAAaA,EAAUvN,WAAcuN,EAAUvN,WAAa,WA3BnF,MAjGkC9jF,GAAlC8kD,EAAA/kD,GAgBEqF,OAAFC,eACMy/C,EADNhiD,UAAA,kBAAE,WAC2C,MAAOrB,MAAKmjF,iBACvD,SAAet/E,GACjB,GAAUw4B,GAAWr8B,KAAKmjF,WAEtBnjF,MAAKmjF,YAAct/E,GAAU7D,KAAK4vF,WAAa5vF,KAAK4vF,UAAUvN,YAAe,SAEpD,YAArBriF,KAAKmjF,aAA6B9mD,IAAax4B,GACjD7D,KAAKswF,6DAMT3sF,OAAFC,eACMy/C,EADNhiD,UAAA,0BAAE,WACoC,MAAOrB,MAAKuwF,yBAChD,SAAuB1sF,GACrB7D,KAAKuwF,oBAAsBj/E,EAAAA,sBAAsBzN,oCAQnDF,OAAFC,eAAMy/C,EAANhiD,UAAA,0BAAE,WACE,MAA2B,WAApBrB,KAAKgoF,aAA4BhoF,KAAK+vF,oDAI/CpsF,OAAFC,eAAMy/C,EAANhiD,UAAA,sBAAE,WAAgC,MAA2B,UAApBrB,KAAKgoF,4CAM5CrkF,OAAFC,eACMy/C,EADNhiD,UAAA,iBAAE,WAC0B,MAAOrB,MAAKiwF,gBACtC,SAAcpsF,GACZ7D,KAAKiwF,WAAapsF,EAClB7D,KAAKwwF,iDAkBP7sF,OAAFC,eACMy/C,EADNhiD,UAAA,kBAAE,WAEE,MAA2B,WAApBrB,KAAKqiF,YAAgD,UAArBriF,KAAK+mF,YAA0B,OAAS/mF,KAAK+mF,iBAEtF,SAAeljF,GACTA,IAAU7D,KAAK+mF,cACjB/mF,KAAK+mF,YAAcljF,GAAS7D,KAAKmwF,cAAcC,OAAS,OACxDpwF,KAAKsI,mBAAmB6B,iDAkD5Bk5C,EAAFhiD,UAAA68D,0BAAE,WACE,MAAOl+D,MAAKywF,yBAA2BzwF,KAAK0F,aAG9C29C,EAAFhiD,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,IACIA,MAAK0wF,uBAET,IAAUp2E,GAAUta,KAAK4oF,QAEjBtuE,GAAQq+B,aACV34C,KAAK0F,YAAYC,cAAc+L,UAAUG,IAAI,uBAAuByI,EAAQq+B,aAI9Er+B,EAAQk/B,aAAaz3C,KAAKqiB,EAAAA,UAAS,OAAeniB,UAAU,WAC1DnC,EAAK6wF,wBACL7wF,EAAK8wF,sBACL9wF,EAAKwI,mBAAmB6B,iBAItBmQ,EAAQ28B,WAAa38B,EAAQ28B,UAAU45C,cACzCv2E,EAAQ28B,UAAU45C,aACf9uF,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aACpB3G,UAAU,WAAM,MAAAnC,GAAKwI,mBAAmB6B,iBAKzCnK,KAAKwI,SACPxI,KAAKwI,QAAQywC,SAAS/xB,eAAenlB,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aAAa3G,UAAU,WAC1EnC,EAAKgwF,sCACPhwF,EAAKgxF,qBAMXvsF,EAAAA,MAAMvE,KAAKkkF,gBAAgB//E,QAASnE,KAAKokF,gBAAgBjgF,SAASlC,UAAU,WAC1EnC,EAAKwwF,4BACLxwF,EAAKwI,mBAAmB6B,iBAI1BnK,KAAKgkF,cAAc7/E,QAAQpC,KAAKqiB,EAAAA,UAAU,OAAOniB,UAAU,WACzDnC,EAAK0wF,gBACL1wF,EAAKwI,mBAAmB6B,iBAI1BnK,KAAK8jF,eAAe3/E,QAAQpC,KAAKqiB,EAAAA,UAAU,OAAOniB,UAAU,WAC1DnC,EAAK8wF,sBACL9wF,EAAKwI,mBAAmB6B,iBAGtBnK,KAAK8F,MACP9F,KAAK8F,KAAKyF,OAAOxJ,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aAAa3G,UAAU,WAAM,MAAAnC,GAAKgxF,sBAI3EztC,EAAFhiD,UAAA0I,sBAAE,WACE/J,KAAK0wF,wBACD1wF,KAAK6vF,yCACP7vF,KAAK8wF,oBAITztC,EAAFhiD,UAAA6K,gBAAE,WAEElM,KAAKgwF,yBAA2B,QAChChwF,KAAKsI,mBAAmBygB,iBAG1Bs6B,EAAFhiD,UAAAiL,YAAE,WACEtM,KAAK4I,WAAW9E,OAChB9D,KAAK4I,WAAW5D,YAIlBq+C,EAAFhiD,UAAA0vF,eAAE,SAAeC,GACjB,GAAU/5C,GAAYj3C,KAAK4oF,SAAW5oF,KAAK4oF,SAAS3xC,UAAY,IAC5D,OAAOA,IAAaA,EAAU+5C,IAGhC3tC,EAAFhiD,UAAA4vF,gBAAE,WACE,SAAUjxF,KAAK4oF,UAAY5oF,KAAK4oF,SAAS1oC,aAAelgD,KAAKkxF,oBAG/D7tC,EAAFhiD,UAAA8vF,UAAE,WACE,QAASnxF,KAAKoxF,aAGhB/tC,EAAFhiD,UAAAgwF,kBAAE,WACE,MAAOrxF,MAAKsxF,iBAAmBtxF,KAAK4oF,SAAS2I,kBAAoBvxF,KAAKwxF,qBAGxEnuC,EAAFhiD,UAAAowF,wBAAE,WAEE,MAA2B,WAApBzxF,KAAKqiF,aAA4BriF,KAAKmxF,aACzCnxF,KAAKmxF,cAAgBnxF,KAAKqxF,qBAGhChuC,EAAFhiD,UAAA++C,kBAAE,WAEE,MAAOpgD,MAAKmxF,aAAmC,WAApBnxF,KAAKqiF,YAA2BriF,KAAKixF,mBAIlE5tC,EAAFhiD,UAAAqwF,sBAAE,WACE,MAAQ1xF,MAAK8jF,gBAAkB9jF,KAAK8jF,eAAethF,OAAS,GACxDxC,KAAK4oF,SAAS+I,WAAc,QAAU,QAI5CtuC,EAAFhiD,UAAA4mF,qBAAE,WAAA,GAAFnoF,GAAAE,IACQA,MAAKogD,qBAAuBpgD,KAAKsxF,iBAG/BtxF,KAAKqwF,qBACPrwF,KAAK+vF,oBAAqB,EAE1BvmF,EAAAA,UAAUxJ,KAAK4xF,OAAOjsF,cAAe,iBAAiB5D,KAAKC,EAAAA,KAAK,IAAIC,UAAU,WAC5EnC,EAAKiwF,oBAAqB,KAI9B/vF,KAAKgoF,WAAa,SAClBhoF,KAAKsI,mBAAmB6B,iBAQpBk5C,EAAVhiD,UAAAsvF,sBAAE,WACE,GAAI3wF,KAAK4oF,SAAS1oC,aAAelgD,KAAKkxF,kBACpC,KAAMW,MAKFxuC,EAAVhiD,UAAAmvF,cAAE,WACExwF,KAAK8xF,iBACL9xF,KAAK4wF,uBAOCvtC,EAAVhiD,UAAAywF,eAAE,WAAA,GAAFhyF,GAAAE,IACI,IAAIA,KAAKgkF,cAAe,CAC5B,GAAU+N,GACAC,CACJhyF,MAAKgkF,cAAc7hF,QAAQ,SAAC8vF,GAC1B,GAAmB,UAAfA,EAAKrO,MAAmB,CAC1B,GAAImO,GAAajyF,EAAKoyF,UACpB,KAAMC,GAAmC,QAE3CJ,GAAYE,MACP,IAAmB,QAAfA,EAAKrO,MAAiB,CAC/B,GAAIoO,EACF,KAAMG,GAAmC,MAE3CH,GAAUC,OAUV5uC,EAAVhiD,UAAAuvF,oBAAE,WACE,GAAI5wF,KAAK4oF,SAAU,CACvB,GAAU3mC,KAEJ,IAAqC,SAAjCjiD,KAAK0xF,wBAAoC,CACnD,GAAcU,GAAYpyF,KAAKgkF,cACnBhkF,KAAKgkF,cAAcvvE,KAAK,SAAAw9E,GAAQ,MAAe,UAAfA,EAAKrO,QAAqB,KACxDyO,EAAUryF,KAAKgkF,cACjBhkF,KAAKgkF,cAAcvvE,KAAK,SAAAw9E,GAAQ,MAAe,QAAfA,EAAKrO,QAAmB,IAExDwO,GACFnwC,EAAIvgD,KAAK0wF,EAAU5jE,IACVxuB,KAAKiwF,YACdhuC,EAAIvgD,KAAK1B,KAAKkwF,cAGZmC,GACFpwC,EAAIvgD,KAAK2wF,EAAQ7jE,QAEVxuB,MAAK8jF,iBACd7hC,EAAMjiD,KAAK8jF,eAAet/E,IAAI,SAAA84C,GAAS,MAAAA,GAAM9uB,KAG/CxuB,MAAK4oF,SAAS5mC,kBAAkBC,KAK1BoB,EAAZhiD,UAAAqvF,sBAAE,WACE,IAAK1wF,KAAK4oF,SACR,KAAM0J,MAQVjvC,EAAFhiD,UAAAyvF,iBAAE,WACF,GAAUyB,GAAUvyF,KAAK4xF,OAAS5xF,KAAK4xF,OAAOjsF,cAAgB,IAE1D,IAAwB,YAApB3F,KAAKqiF,YAA6BkQ,GAAYA,EAAQrwF,SAASM,QAC9D+vF,EAAQ/lF,YAAYsL,UAIrB9X,KAAKyI,WAAczI,KAAKyI,UAAU2O,WAAtC,CAMA,IAAKH,SAAwB,gBAAES,SAAS1X,KAAK0F,YAAYC,eAEvD,YADA3F,KAAK6vF,yCAA0C,EAIrD,IAAQ2C,GAAa,EACbC,EAAW,EAET7mE,EAAY5rB,KAAKywF,wBAAwB9qF,cACzC+sF,EAAW9mE,EAAU4uC,iBAAiB,iCACtCm4B,EAAS/mE,EAAU4uC,iBAAiB,8BAE1C,IAAIx6D,KAAK4xF,QAAU5xF,KAAK4xF,OAAOjsF,cAAczD,SAASM,OAAQ,CAClE,GAAYowF,GAAgBhnE,EAAU0S,uBAQhC,IAA4B,IAAxBs0D,EAAc7vE,OAAwC,IAAzB6vE,EAAcx/E,OAG7C,MAFApT,MAAK8vF,sCAAuC,OAC5C9vF,KAAK6vF,yCAA0C,EAQjD,KAAoB,GAJdgD,GAAiB7yF,KAAK8yF,aAAaF,GACnCG,EAAa/yF,KAAK8yF,aAAaP,EAAQrwF,SAAS,GAAGo8B,yBACrD00D,EAAa,EAEvBjtC,EAAA,EAA0B32C,EAAAmjF,EAAQrwF,SAAR6jD,EAA1B32C,EAAA5M,OAA0BujD,IAAkB,CACpCitC,GADR5jF,EAAA22C,GAC4Bp+C,YAEtB6qF,EAAaO,EAAaF,EA7dN,EA8dpBJ,EAAWO,EAAa,EA/dH,IA+dOA,EAAkCC,GAAwB,EAGxF,IAAK,GAAIhwF,GAAI,EAAGA,EAAIyvF,EAASlwF,OAAQS,IACnCyvF,EAAS1sC,KAAK/iD,GAAG0K,MAAMoV,MAAWyvE,EAAxC,IAEI,KAAK,GAAIvvF,GAAI,EAAGA,EAAI0vF,EAAOnwF,OAAQS,IACjC0vF,EAAO3sC,KAAK/iD,GAAG0K,MAAMoV,MAAW0vE,EAAtC,IAGIzyF,MAAK8vF,qCACD9vF,KAAK6vF,yCAA0C,IAI7CxsC,EAAVhiD,UAAAyxF,aAAE,SAAqBI,GACnB,MAAOlzF,MAAK8F,MAA4B,QAApB9F,KAAK8F,KAAKjC,MAAkBqvF,EAAKlmE,MAAQkmE,EAAKpwE,MAO5DugC,EAAVhiD,UAAAivF,0BAAE,WAAA,GAAFxwF,GAAAE,IAEQA,MAAKwI,QACPxI,KAAK8vF,sCAAuC,EAE5C59E,QAAQC,UAAUC,KAAK,WAAM,MAAAtS,GAAKgxF,qCApdxCvzF,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,iBACEO,SAAU,eACVC,SAAU,yqgBAMVC,MACEC,MAAJ,iBACIg0F,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,mCAAN,sBACIC,0CAAJ,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACIjxB,qBAAJ,oBACIC,mBAAJ,kBACIixB,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,4BACIl7D,kCAAJ,uBAEAvxB,QAAA,SACAtI,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA0jD,EAAArnC,eAAA,WAAA,QACAze,KAAAC,EAAAA,aACAD,KAAAkJ,EAAAA,oBACAlJ,SAAAsW,GAAAjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAuxF,QACA9xF,KAAAqS,EAAAA,eAAAhS,aAAAL,KAAmCsS,EAAAA,aACnCtS,SAAAsW,GAAAjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA4xF,QACAnyF,KAAAwS,EAAAA,wHA3HAszC,EAAAzjD,gBAJAyiF,aAAA9kF,KAAAS,EAAAA,QA8OAs2F,qBAAA/2F,KAAAS,EAAAA,QArPAk0F,YAAA30F,KAAAS,EAAAA,QAuPAgqF,aAAAzqF,KAAAS,EAAAA,QA3MAu2F,eAAAh3F,KAAAuJ,EAAAA,UAAAhJ,MAAA,eA7BA2yF,0BAAAlzF,KAAAuJ,EAAAA,UAAAhJ,MAAA,yBA6OA02F,qBAAAj3F,KAAAuJ,EAAAA,UAAAhJ,MAAA,0GApGAozF,oBAAA3zF,KAAAo2B,EAAAA,aAAA71B,MAAA0mF,MAcA4M,cAAA7zF,KAAAo2B,EAAAA,aAAA71B,MAAAymF;YAsBAT,iBAAAvmF,KAAQW,EAAAA,gBAARJ,MAAAimF,MAsBAC,gBAAAzmF,KAAAW,EAAAA,gBAAAJ,MAAAmmF,MAmBAC,kBAAA3mF,KAAAW,EAAAA,gBAAAJ,MAAAqmF,MAEAC,kBAAA7mF,KAAAW,EAAAA,gBAAYJ,MAAZumF,OAEAhhC,GACAihC,IC9NAvgC,GAAA,WAAA,QAAAA,MAwBiC,sBAxBjCxmD,KAACkD,EAAAA,SAAD3C,OACEiD,cACEgjF,GACA1gC,GACA4gC,GACAM,GACAC,GACAL,GACAE,IAEF3jF,SACEE,EAAAA,aACA0V,EAAAA,iBAEFxV,SACEijF,GACA1gC,GACA4gC,GACAM,GACAC,GACAL,GACAE,QAGJtgC,KCHI0gC,GAA+B,gBAIjC,QAAFC,GAEWvuD,EAEA4iB,GAFA/4C,KAAXm2B,OAAWA,EAEAn2B,KAAX+4C,OAAWA,EACX,MAAA2rC,oBAKA,QAAAC,MAAkC,MAAlCA,MACaC,GACTx8E,EAAmBu8E,IASVE,GACT,GAAI10E,GAAAA,eAA8C,oCAChDoS,WAAY,OACZC,QAASsiE,IAQfC,GAAA,SAAAzmF,GAuFE,QAAFymF,GACYz8E,EACA5C,EACkC6wB,GAH5C,GAAFz2B,GAIIxB,EAJJgF,KAAAtD,OAAAA,WACYF,GAAZwI,mBAAYA,EACAxI,EAAZ4F,YAAYA,EAlEV5F,EAAFklF,WAAuB,EAIrBllF,EAAFmlF,SAAqB,EAeVnlF,EAAXmlB,YAA0D,KAoBrCnlB,EAArBolF,eACM,GAAI97E,GAAAA,aAGWtJ,EAArBszB,OAAkD,GAAIhqB,GAAAA,aAGjCtJ,EAArBumB,OAAkD,GAAIjd,GAAAA,aAapDtJ,EAAFiqD,cAGEjqD,EAAF0uB,GAAe,oBAAoBi2D,KAQ/B3kF,EAAKqlF,yBAA2B5uD,EAAS6uD,wBAlB7C,MA3DqC7mF,GAArCwmF,EAAAzmF,GAUEqF,OAAFC,eAAMmhF,EAAN1jF,UAAA,cAAE,WAAwB,MAAOrB,MAAKilF,SAAWjlF,KAAKglF,2CAsBpDrhF,OAAFC,eACMmhF,EADN1jF,UAAA,6BAAE,WACuC,MAAOrB,MAAKmlF,4BACnD,SAA0BthF,GACxB7D,KAAKmlF,uBAAyB7zE,EAAAA,sBAAsBzN,oCAwBtDF,OAAFC,eACMmhF,EADN1jF,UAAA,iBAAE,SACcwC,GADd,GAAF/D,GAAAE,IAEQ6D,IAASA,EAAMrB,SACjBqB,EAAM82B,MAAM,KAAKx4B,QAAQ,SAAAqoD,GAAa,MAAA1qD,GAAKiqD,WAAWS,EAAU1yC,SAAU,IAC1E9X,KAAK0F,YAAYC,cAAc6kD,UAAY,qCAiB/Cu6B,EAAF1jF,UAAAgK,mBAAE,WACErL,KAAK6J,YAAc,GAAI4zC,GAAAA,2BAAsCz9C,KAAK84C,SAASjtC,WAE3E7L,KAAKqlF,kBAOPN,EAAF1jF,UAAAikF,cAAE,SAAc3oC,GACR38C,KAAK08C,QACP18C,KAAK08C,MAAM/2C,cAAcg3C,UAAYA,IAKzCooC,EAAF1jF,UAAAkkF,cAAE,WACE,MAAOvlF,MAAK08C,MAAQ18C,KAAK08C,MAAM/2C,cAAcg3C,UAAY,GAI3DooC,EAAF1jF,UAAAgkF,eAAE,WACErlF,KAAKglF,YAAchlF,KAAK84C,QAAQt2C,OAChCxC,KAAK+pD,WAAW,4BAA8B/pD,KAAKglF,UACnDhlF,KAAK+pD,WAAW,4BAA8B/pD,KAAKglF,UACnDhlF,KAAKsI,mBAAmB6B,gBAI1B46E,EAAF1jF,UAAAmkF,iBAAE,SAAiBzsC,GACnB,GAAU5zC,GAAQ,GAAIu/E,IAA6B1kF,KAAM+4C,EACrD/4C,MAAKklF,eAAe1/E,KAAKL,mBAhI7B5H,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,mBACEQ,SAAU,wJACVI,QAAF,uoBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEX,SAAF,kBACE4I,QAAF,iBACE1I,MACFC,MAAA,oBAEAT,YACAvB,QAAA+lD,GAAA7lD,YAAA0nF,2FA3EAxnF,SAAEsW,GAAFjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAA+mF,SA0JAE,EAAAnlF,6GA5DAk5C,UAAAv7C,KAAAW,EAAAA,gBAAAJ,MAAA0lD,IAAAjiB,aAAA,MAGAsd,eAAAthD,KAAAW,EAAAA,gBAAAJ,MAAA2lD,MAGAx+B,cAAA1nB,KAAAS,EAAAA,QAGAonF,wBAAA7nF,KAAAS,EAAAA,QAGAynF,aAAAloF,KAAAS,EAAAA,QAMAknF,iBAAA3nF,KAAAoJ,EAAAA,SAWAysB,SAAA71B,KAAAoJ,EAAAA,SAGA0f,SAAA9oB,KAAAoJ,EAAAA,SAIA+K,YAAAnU,KAAAS,EAAAA,MAAAF,MAAA,YASAinF,OC1IAW,GAAA,WAKE,QAAFA,GAEap+E,GAAAtH,KAAbsH,WAAaA,EACb,sBARA/J,KAACiB,EAAAA,UAADV,OACEW,SAAU,0BACVO,SAAU,gEARZzB,KAAmBC,EAAAA,cAcnBkoF,KrIwCaC,GACT,GAAIx1E,GAAAA,eAAqC,oCAQhCy1E,IACXzoF,QAASwoF,GACTp1D,MAAOjD,EAAAA,SACPkD,WAAYq1D,GAODC,IACX3oF,QAAS44B,EAAAA,kBACT14B,YAAaonB,EAAAA,WAAW,WAAM,MAAAshE,MAC9B9vD,OAAO,GAcT8vD,GAAA,WA+FE,QAAFA,GAAsB7gD,EAAgDrb,EAChD1G,EACA6iE,EACA19E,EACkC4gC,EACtBpjC,EACQo5D,EACUhoD,EAE9B3O,GATpB,GAAFzI,GAAAE,IAAsBA,MAAtBklC,SAAsBA,EAAgDllC,KAAtE6pB,SAAsEA,EAChD7pB,KAAtBmjB,kBAAsBA,EACAnjB,KAAtBgmF,MAAsBA,EACAhmF,KAAtBsI,mBAAsBA,EAEYtI,KAAlC8F,KAAkCA,EACQ9F,KAA1Ck/D,WAA0CA,EACUl/D,KAApDkX,UAAoDA,EAE9BlX,KAAtBuI,eAAsBA,EAjFZvI,KAAVimF,qBAAgC,EACtBjmF,KAAVkmF,uBAAkC,EAUxBlmF,KAAVmmF,wBAAmC,EAMzBnmF,KAAVomF,sBAAkCx1E,EAAAA,aAAaC,MAOrC7Q,KAAVqmF,qBAAgC,EAGbrmF,KAAnBsmF,qBAA0C,GAAIz9E,GAAAA,QAMpC7I,KAAVumF,mBAA+B,WAI3BzmF,EAAKumF,oBACDpvE,SAASmtB,gBAAkBtkC,EAAKolC,SAASv/B,eAAiB7F,EAAKk6C,WAIrEh6C,KAAFk4C,UAAoC,aAGlCl4C,KAAFm4C,WAAe,aAeUn4C,KAAzBwmF,sBAAyD,MA+C/CxmF,KAAVymF,kBAAsC,EAqE3BzmF,KAAX0mF,iBAAoE7tC,EAAAA,MAAM,WACtE,MAAI/4C,GAAK6mF,cAAgB7mF,EAAK6mF,aAAa7tC,QACnCv0C,EAAAA,MAAZxE,UAAA,GAAqBD,EAAK6mF,aAAa7tC,QAAQt0C,IAAI,SAAAu0C,GAAU,MAAAA,GAAOC,qBAKzDl5C,EAAKkmF,MAAM/sC,SACb/xB,eACAnlB,KAAKC,EAAAA,KAAK,GAAIk3C,EAAAA,UAAU,WAAM,MAAAp5C,GAAK4mF,sBAtGlB,mBAAXpiC,SACT0hC,EAAMr8E,kBAAkB,WACtB26C,OAAOI,iBAAiB,OAAQ5kD,EAAKymF,sBAIzCvmF,KAAKmpC,gBAAkBD,EA+d3B,MAtfEvlC,QAAFC,eACMmiF,EADN1kF,UAAA,4BAAE,WACsC,MAAOrB,MAAKkmF,2BAClD,SAAyBriF,GACvB7D,KAAKkmF,sBAAwB50E,EAAAA,sBAAsBzN,oCAuBrDkiF,EAAF1kF,UAAAiL,YAAE,WACwB,mBAAXg4C,SACTA,OAAO/c,oBAAoB,OAAQvnC,KAAKumF,oBAG1CvmF,KAAKomF,sBAAsB3zE,cAC3BzS,KAAKimF,qBAAsB,EAC3BjmF,KAAK4mF,gBACL5mF,KAAKsmF,qBAAqBthF,YAI5BrB,OAAFC,eAAMmiF,EAAN1kF,UAAA,iBAAE,WACE,MAAOrB,MAAKymF,kBAAoBzmF,KAAK2mF,aAAa3B,2CAKpDe,EAAF1kF,UAAAwlF,UAAE,WACE7mF,KAAK8mF,iBACL9mF,KAAK+mF,eAIPhB,EAAF1kF,UAAA2lF,WAAE,WACEhnF,KAAKinF,cAEAjnF,KAAKymF,mBAINzmF,KAAKg6C,WAEPh6C,KAAK2mF,aAAatgE,OAAO7gB,OAG3BxF,KAAK2mF,aAAa1B,QAAUjlF,KAAKymF,kBAAmB,EAEhDzmF,KAAK4lB,aAAe5lB,KAAK4lB,YAAYvB,gBACvCrkB,KAAK4lB,YAAYrB,SACjBvkB,KAAK4xC,4BAA4Bn/B,eAK9BzS,KAAKimF,qBAKRjmF,KAAKsI,mBAAmBygB,kBAQ5Bg9D,EAAF1kF,UAAAslC,eAAE,WACM3mC,KAAKymF,kBACPzmF,KAAgB,YAAE2mC,kBAQtBhjC,OAAFC,eAAMmiF,EAAN1kF,UAAA,2BAAE,WAAA,GAAFvB,GAAAE,IACI,OAAOuE,GAAAA,MACLvE,KAAK0mF,iBACL1mF,KAAK2mF,aAAa98E,YAAYg0C,OAAO97C,KAAK0V,EAAAA,OAAO,WAAM,MAAA3X,GAAK2mF,oBAC5DzmF,KAAKsmF,qBACLtmF,KAAKknF,yBACLlnF,KAAK4lB,YACD5lB,KAAK4lB,YAAYuG,cAAcpqB,KAAK0V,EAAAA,OAAO,WAAM,MAAA3X,GAAK2mF,oBACtDj7E,EAAAA,MACJzJ,KAEAyC,EAAAA,IAAI,SAAAW,GAAS,MAAAA,aAAiBgiF,IAA2BhiF,EAAQ,yCAkBrExB,OAAFC,eAAMmiF,EAAN1kF,UAAA,oBAAE,WACE,MAAIrB,MAAK2mF,cAAgB3mF,KAAK2mF,aAAa98E,YAClC7J,KAAK2mF,aAAa98E,YAAYgyC,WAGhC,sCAIDkqC,EAAV1kF,UAAA6lF,uBAAE,WAAA,GAAFpnF,GAAAE,IACI,OAAKA,MAAKkX,UAIH3S,EAAAA,MACLiF,EAAAA,UAAsBxJ,KAAKkX,UAAW,SACtC1N,EAAAA,UAAsBxJ,KAAKkX,UAAW,aAEvCnV,KAAK0V,EAAAA,OAAO,SAAAtS,GACjB,GAAYiiF,GAAcjiF,EAAY,OAC1BkiF,EAAYvnF,EAAKo/D,WACnBp/D,EAAKo/D,WAAWx5D,YAAYC,cAAgB,IAEhD,OAAO7F,GAAK2mF,kBACJW,IAAgBtnF,EAAKolC,SAASv/B,iBAC5B0hF,IAAcA,EAAU3vE,SAAS0vE,OAChCtnF,EAAK8lB,cAAgB9lB,EAAK8lB,YAAYyG,eAAe3U,SAAS0vE,MAflE57E,EAAAA,GAAa,OAoBxBu6E,EAAF1kF,UAAAk2B,WAAE,SAAW1zB,GAAX,GAAF/D,GAAAE,IACIkS,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAAtS,GAAKwnF,iBAAiBzjF,MAIzDkiF,EAAF1kF,UAAAm2B,iBAAE,SAAiBC,GACfz3B,KAAKk4C,UAAYzgB,GAInBsuD,EAAF1kF,UAAAq2B,kBAAE,SAAkBD,GAChBz3B,KAAKm4C,WAAa1gB,GAIpBsuD,EAAF1kF,UAAAs2B,iBAAE,SAAiBC,GACf53B,KAAKklC,SAASv/B,cAAcsH,SAAW2qB,GAGzCmuD,EAAF1kF,UAAAoJ,eAAE,SAAetF,GACjB,GAAUwF,GAAUxF,EAAMwF,OAUtB,IAJIA,IAAY84B,EAAAA,QACdt+B,EAAM2F,iBAGJ9K,KAAKunF,cAAgB58E,IAAYM,EAAAA,OAASjL,KAAKg6C,UACjDh6C,KAAKunF,aAAalrC,wBAClBr8C,KAAKwnF,mBACLriF,EAAM2F,qBACD,IAAI9K,KAAK2mF,aAAc,CAClC,GAAYc,GAAiBznF,KAAK2mF,aAAa98E,YAAYgyC,WAC/CL,EAAa7wC,IAAY2yB,EAAAA,UAAY3yB,IAAY6yB,EAAAA,UAEnDx9B,MAAKg6C,WAAarvC,IAAY+8E,EAAAA,IAChC1nF,KAAK2mF,aAAa98E,YAAYuB,UAAUjG,GAC/Bq2C,GAAcx7C,KAAK2nF,YAC5B3nF,KAAK6mF,aAGHrrC,GAAcx7C,KAAK2mF,aAAa98E,YAAYgyC,aAAe4rC,IAC7DznF,KAAK4nF,oBAKX7B,EAAF1kF,UAAAwmF,aAAE,SAAa1iF,GACf,GAAQiqC,GAASjqC,EAAY,OACrBtB,EAAgCurC,EAAOvrC,KAGvB,YAAhBurC,EAAO7xC,OACTsG,EAAiB,IAATA,EAAc,KAAOg3B,WAAWh3B,IAQtC7D,KAAK8nF,iBAAmBjkF,IAC1B7D,KAAK8nF,eAAiBjkF,EACtB7D,KAAKk4C,UAAUr0C,GAEX7D,KAAK2nF,YAAc1wE,SAASmtB,gBAAkBj/B,EAAMiqC,QACtDpvC,KAAK6mF,cAKXd,EAAF1kF,UAAAkrD,aAAE,WACOvsD,KAAKqmF,oBAECrmF,KAAK2nF,aACd3nF,KAAK8nF,eAAiB9nF,KAAKklC,SAASv/B,cAAc9B,MAClD7D,KAAK8mF,iBACL9mF,KAAK+mF,aAAY,IAJjB/mF,KAAKqmF,qBAAsB,GAcvBN,EAAV1kF,UAAA0lF,YAAE,SAAoBgB,OAAtB,KAAAA,IAAsBA,GAAtB,GACQ/nF,KAAKk/D,YAA6C,SAA/Bl/D,KAAKk/D,WAAW8oB,aACjCD,EACF/nF,KAAKk/D,WAAW+oB,uBAEhBjoF,KAAKk/D,WAAW8oB,WAAa,SAG/BhoF,KAAKmmF,wBAAyB,IAK1BJ,EAAV1kF,UAAA4lF,YAAE,WACMjnF,KAAKmmF,yBACPnmF,KAAKk/D,WAAW8oB,WAAa,OAC7BhoF,KAAKmmF,wBAAyB,IAa1BJ,EAAV1kF,UAAAumF,gBAAE,WACF,GAAUvlF,GAAQrC,KAAK2mF,aAAa98E,YAAYsyC,iBAAmB,EACzDwC,EAAaC,EAA8Bv8C,EAC7CrC,KAAK2mF,aAAa7tC,QAAS94C,KAAK2mF,aAAa9nC,cAE3CqpC,EAAoBppC,EACxBz8C,EAAQs8C,EA1Z4B,GA4ZpC3+C,KAAK2mF,aAAapB,gBAzZiB,IA6ZrCvlF,MAAK2mF,aAAarB,cAAc4C,IAO1BnC,EAAV1kF,UAAA8mF,2BAAE,WAAA,GAAFroF,GAAAE,KACUooF,EAAcpoF,KAAKgmF,MAAM/sC,SAAS/xB,eAAenlB,KAAKC,EAAAA,KAAK,IAC3DqmF,EAAgBroF,KAAK2mF,aAAa7tC,QAAQ30C,QAAQpC,KACtD2zD,EAAAA,IAAI,WAAM,MAAA51D,GAAKwoF,kBAAkBC,wBAGjC/gD,EAAAA,MAAM,GAIR,OAAOjjC,GAAAA,MAAM6jF,EAAaC,GACvBtmF,KAGCm3C,EAAAA,UAAU,WAQR,MAPAp5C,GAAK0nF,mBACL1nF,EAAK6mF,aAAatB,iBAEdvlF,EAAKk6C,WACPl6C,EAAgB,YAAE6mC,iBAGb7mC,EAAK0oF,sBAGdxmF,EAAAA,KAAK,IAGNC,UAAU,SAAAkD,GAAS,MAAArF,GAAK2oF,kBAAkBtjF,MAIvC4gF,EAAV1kF,UAAAulF,cAAE,WACM5mF,KAAK4lB,cACP5lB,KAAKgnF,aACLhnF,KAAK4lB,YAAYmB,UACjB/mB,KAAK4lB,YAAc,OAIfmgE,EAAV1kF,UAAAimF,iBAAE,SAAyBzjF,GAC3B,GAAU6kF,GAAY1oF,KAAK2mF,cAAgB3mF,KAAK2mF,aAAa1hE,YACvDjlB,KAAK2mF,aAAa1hE,YAAYphB,GAC9BA,EAII8kF,EAA0B,MAAbD,EAAoBA,EAAY,EAI/C1oF,MAAKk/D,WACPl/D,KAAKk/D,WAAW0pB,SAAS/kF,MAAQ8kF,EAEjC3oF,KAAKklC,SAASv/B,cAAc9B,MAAQ8kF,EAGtC3oF,KAAK8nF,eAAiBa,GAQhB5C,EAAV1kF,UAAAonF,kBAAE,SAA0BtjF,GACpBA,GAASA,EAAMgxB,SACjBn2B,KAAK6oF,6BAA6B1jF,EAAMgxB,QACxCn2B,KAAKsnF,iBAAiBniF,EAAMgxB,OAAOtyB,OACnC7D,KAAKk4C,UAAU/yC,EAAMgxB,OAAOtyB,OAC5B7D,KAAKklC,SAASv/B,cAAc4B,QAC5BvH,KAAK2mF,aAAanB,iBAAiBrgF,EAAMgxB,SAG3Cn2B,KAAKgnF,cAMCjB,EAAV1kF,UAAAwnF,6BAAE,SAAqCpI,GACnCzgF,KAAK2mF,aAAa7tC,QAAQ32C,QAAQ,SAAA42C,GAC5BA,GAAU0nC,GAAQ1nC,EAAO5/B,UAC3B4/B,EAAOwB,cAKLwrC,EAAV1kF,UAAAylF,eAAE,WAAA,GAAFhnF,GAAAE,IACI,KAAKA,KAAK2mF,aACR,KAAMmC,IAGZ,IAAQ99D,GAAahrB,KAAK4lB,WAEtB,IAAKoF,EAuBE,CACYA,EAAWoe,YAA4B,iBAG/C2/C,UAAU/oF,KAAKgpF,wBACxBh+D,EAAWmoD,YAAYpwD,MAAO/iB,KAAKipF,uBA3BnCjpF,MAAK6nC,QAAU,GAAIpkB,GAAAA,eAAezjB,KAAK2mF,aAAa1nF,SAAUe,KAAKmjB,mBACnE6H,EAAahrB,KAAK6pB,SAASuD,OAAOptB,KAAK6zC,qBACvC7zC,KAAK4lB,YAAcoF,EAInBA,EAAW+oB,gBAAgB9xC,UAAU,SAAAkD,IAG/BA,EAAMwF,UAAY84B,EAAAA,QAAWt+B,EAAMwF,UAAY2yB,EAAAA,UAAYn4B,EAAMw2C,UACnE77C,EAAK0nF,mBACL1nF,EAAKwmF,qBAAqBxiF,UAI1B9D,KAAKuI,iBACPvI,KAAKomF,sBAAwBpmF,KAAKuI,eAAegD,SAAStJ,UAAU,WAC9DnC,EAAKk6C,WAAahvB,GACpBA,EAAWmoD,YAAYpwD,MAAOjjB,EAAKmpF,qBAYvCj+D,KAAeA,EAAW3G,gBAC5B2G,EAAW1G,OAAOtkB,KAAK6nC,SACvB7nC,KAAK4xC,4BAA8B5xC,KAAKmoF,6BAG9C,IAAUe,GAAUlpF,KAAKg6C,SAErBh6C,MAAK2mF,aAAatB,iBAClBrlF,KAAK2mF,aAAa1B,QAAUjlF,KAAKymF,kBAAmB,EAIhDzmF,KAAKg6C,WAAakvC,IAAYlpF,KAAKg6C,WACrCh6C,KAAK2mF,aAAavzD,OAAO5tB,QAIrBugF,EAAV1kF,UAAAwyC,kBAAE,WACE,MAAO,IAAInnB,GAAAA,eACTC,iBAAkB3sB,KAAKupC,sBACvBL,eAAgBlpC,KAAKmpC,kBACrBpmB,MAAO/iB,KAAKipF,iBACZ96E,UAAWnO,KAAK8F,QAIZigF,EAAV1kF,UAAAkoC,oBAAE,WAyBE,MAxBAvpC,MAAKsoF,kBAAoBtoF,KAAK6pB,SAAS9jB,WACpCwiC,oBAAoBvoC,KAAKgpF,wBACzBvgD,wBAAuB,GACvB0gD,UAAS,GACT3/C,gBAEGK,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,SAKVjhB,WAAY,kCAIXlpB,KAAKsoF,mBAGNvC,EAAV1kF,UAAA2nF,qBAAE,WACE,MAAIhpF,MAAKopF,YACAppF,KAAKopF,YAAY9hF,WAGnBtH,KAAKk/D,WAAal/D,KAAKk/D,WAAWhB,4BAA8Bl+D,KAAKklC,UAGtE6gD,EAAV1kF,UAAA4nF,eAAE,WACE,MAAOjpF,MAAK2mF,aAAalB,YAAczlF,KAAKqpF,iBAItCtD,EAAV1kF,UAAAgoF,cAAE,WACE,MAAOrpF,MAAKgpF,uBAAuBrjF,cAAc24B,wBAAwBvb,OAOnEgjE,EAAV1kF,UAAAmmF,iBAAE,WACExnF,KAAK2mF,aAAa98E,YAAYiD,cAAc9M,KAAK2mF,aAAavB,sBAAwB,GAAK,IAIrFW,EAAV1kF,UAAAsmF,SAAE,WACF,GAAUr+E,GAAUtJ,KAAKklC,SAASv/B,aAC9B,QAAQ2D,EAAQg4D,WAAah4D,EAAQ2D,WAAajN,KAAKkmF,sCA7kB3D3oF,KAACiB,EAAAA,UAADV,OACEW,SAAU,oDACVS,MACEoqF,sBAAuB,wBACvBzwE,cAAe,2CACf0wE,2BAA4B,uCAC5B3mC,+BAAgC,uDAChCjqC,uBAAwB,qDACxB8pC,mBAAoB,iEACpBof,uBAAwB,wBAGxB2nB,YAAa,iBACbjrD,SAAU,eACV0jC,UAAW,uBACXxjC,YAAa,0BAEfz/B,SAAU,yBACVN,WAAYonF,4CA7FdvoF,KAAEC,EAAAA,aAZFD,KAAE+vB,EAAAA,UAqBF/vB,KAAE8a,EAAAA,mBAHF9a,KAAEuS,EAAAA,SARFvS,KAAEkJ,EAAAA,oBAgLFlJ,SAAAsW,GAAAjW,aAAAL,KAAeuW,EAAAA,OAAfhW,MAAsB6nF,QA9LtBpoF,KAAQqS,EAAAA,eAARhS,aAAAL,KA+LesS,EAAAA,aA5JftS,KAAQ8lD,GAARzlD,aAAAL,KA6JesS,EAAAA,WA7JftS,KA6J2BksF,EAAAA,SAC3BlsF,SAAAsW,GAAAjW,aAAAL,KAAesS,EAAAA,WAAftS,KAA2BuW,EAAAA,OAA3BhW,MAAkCoa,EAAAA,cAtKlC3a,KAAQoS,EAAAA,mCAuIRg3E,eAAAppF,KAAGS,EAAAA,MAAHF,MAAS,qBAMTsrF,cAAA7rF,KAAGS,EAAAA,MAAHF,MAAS,gCAMT0oF,wBAAAjpF,KAAGS,EAAAA,MAAHF,MAAS,kBAMT4rF,uBAAAnsF,KAAGS,EAAAA,MAAHF,MAAS,8BAsfTioF,KsI9pBA4D,GAAA,WAAA,QAAAA,MAYoC,sBAZpCpsF,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUojD,GAAiBt6B,EAAAA,cAAe3oB,GAAiBD,EAAAA,cAC3DE,SACEikF,GACAjhC,GACAiiC,GACAL,GACA7kF,IAEFE,cAAegkF,GAAiBgB,GAAwBL,IACxDhnF,WAAYknF,QAEd+D,KCPI35E,GAAS,gBAIb,QAAA45E,MAA2B,MAA3BA,MAEaC,GAC8BziF,EAAcwiF,IAMzDE,GAAA,SAAAxrF,GAuFE,QAAFwrF,GAC4C5yE,EAC9B1O,EACA9C,EACAohC,EAEAijD,GANZ,GAAFjqF,GAOQxB,EAPRgF,KAAAtD,OAAAA,WAC4CF,GAA5CoX,UAA4CA,EAC9BpX,EAAd0I,QAAcA,EACA1I,EAAd4F,YAAcA,EACA5F,EAAdgnC,eAAcA,EAEAhnC,EAAdiqF,UAAcA,EA1EZjqF,EAAFkqF,aAAgB,EASNlqF,EAAVmqF,OAAiC,UAQvBnqF,EAAVoqF,UAA8B,EAMDpqF,EAA7BiG,SAA0D,cA8BjCjG,EAAzB+9B,KAA8C,SAW5C/9B,EAAF+5C,IAAgB7pC,OA4GhB,MA9K8BzR,GAA9BurF,EAAAxrF,GAKEqF,OAAFC,eACMkmF,EADNzoF,UAAA,aAAE,WAC4B,MAAOrB,MAAKiqF,YACxC,SAAUpmF,GACR7D,KAAKg+D,UAAUn6D,GACf7D,KAAKiqF,OAASpmF,mCAKhBF,OAAFC,eACMkmF,EADNzoF,UAAA,eAAE,WACyB,MAAOrB,MAAKkqF,cACrC,SAAYC,GACVnqF,KAAKkqF,SAAW54E,EAAAA,sBAAsB64E,oCAWxCxmF,OAAFC,eACMkmF,EADNzoF,UAAA,eAAE,WACwB,MAAOrB,MAAKgH,cACpC,SAAYnD,GACV7D,KAAKgH,SAAWnD,EAChB7D,KAAKgqF,YAAuB,MAATnmF,IAAiB,GAAGA,GAAQiU,OAAOtV,OAAS,EAC/DxC,KAAKoqF,sDAKPzmF,OAAFC,eACMkmF,EADNzoF,UAAA,mBAAE,WAC4B,MAAOrB,MAAKqqF,kBACxC,SAAgBC,GACd,GAAIA,IAAmBtqF,KAAKqqF,aAAc,CAC9C,GAAYE,GAAevqF,KAAKwqF,aAC1BxqF,MAAKyqF,2BAA2BH,EAAgBtqF,KAAKqqF,cACrDrqF,KAAKqqF,aAAeC,EAEhBC,IACFD,EAAiBC,EAAa5yB,aAAa,aAAc2yB,GACrDC,EAAalzB,gBAAgB,iDAUvC1zD,OAAFC,eACMkmF,EADNzoF,UAAA,cAAE,WACwB,MAAOrB,MAAK0qF,aACpC,SAAWP,GACTnqF,KAAK0qF,QAAUp5E,EAAAA,sBAAsB64E,oCAoBvCL,EAAFzoF,UAAAspF,QAAE,WACE,OAA2C,IAApC3qF,KAAK+F,SAAS4a,QAAQ,UAI/BmpE,EAAFzoF,UAAAupF,QAAE,WACE,OAA4C,IAArC5qF,KAAK+F,SAAS4a,QAAQ,WAG/BmpE,EAAFzoF,UAAAiL,YAAE,WACF,GAAUi+E,GAAevqF,KAAKwqF,aAEtBD,KACEvqF,KAAK6qF,aACP7qF,KAAK8mC,eAAeC,kBAAkBwjD,EAAcvqF,KAAK6qF,aAMvD7qF,KAAK+pF,WAAa/pF,KAAK+pF,UAAUe,aACnC9qF,KAAK+pF,UAAUe,YAAYP,KAMzBT,EAAVzoF,UAAA+oF,mBAAE,WAME,MALKpqF,MAAKwqF,cAGRxqF,KAAKwqF,cAAch+E,YAAcxM,KAAKyrB,QAFtCzrB,KAAKwqF,cAAgBxqF,KAAK+qF,sBAIrB/qF,KAAKwqF,eAINV,EAAVzoF,UAAA0pF,oBAAE,WAEF,GAAUC,GAAWhrF,KAAK+pF,WAAa/pF,KAAKkX,UAClCqzE,EAAeS,EAASn6C,cAAc,OAwB5C,OArBA05C,GAAa5yB,aAAa,KAAM,qBAAqB33D,KAAK65C,KAC1D0wC,EAAa74E,UAAUG,IAAI,qBAC3B04E,EAAa/9E,YAAcxM,KAAKyrB,QAE5BzrB,KAAK6qF,aACPN,EAAa5yB,aAAa,aAAc33D,KAAK6qF,aAG/C7qF,KAAK0F,YAAYC,cAAcorC,YAAYw5C,GAGN,kBAA1Bx+E,uBACT/L,KAAKwI,QAAQmB,kBAAkB,WAC7BoC,sBAAsB,WACpBw+E,EAAa74E,UAAUG,IAhBT,wBAoBlB04E,EAAa74E,UAAUG,IApBL,oBAuBb04E,GAIDT,EAAVzoF,UAAAopF,2BAAE,SAAmCH,EAAwBW,GAE7D,GAAUx/D,GAAUzrB,KAAKoqF,oBAEjBa,IACFjrF,KAAK8mC,eAAeC,kBAAkBtb,EAASw/D,GAG7CX,GACFtqF,KAAK8mC,eAAeI,SAASzb,EAAS6+D,IAKlCR,EAAVzoF,UAAA28D,UAAE,SAAkBktB,GACZA,IAAiBlrF,KAAKiqF,SACpBjqF,KAAKiqF,QACPjqF,KAAK0F,YAAYC,cAAc+L,UAAUC,OAAO,aAAa3R,KAAKiqF,QAEhEiB,GACFlrF,KAAK0F,YAAYC,cAAc+L,UAAUG,IAAI,aAAaq5E,oBA1LlE3tF,KAACiB,EAAAA,UAADV,OACEW,SAAU,aACVmJ,QAAS,8BACT1I,MACEC,MAAS,YACTgsF,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,yBAC5BC,6BAA8B,oDA0ElCruF,SAAAsW,GAAAjW,aAAAL,KAAOsS,EAAAA,WAAPtS,KAAmBuW,EAAAA,OAAnBhW,MAA0Boa,EAAAA,cA7G1B3a,KAAEuS,EAAAA,SAHFvS,KAAEC,EAAAA,aALFD,KAAQ+sC,EAAAA,gBAWR/sC,KAAEsuF,EAAAA,+BAwCFhvC,QAAAt/C,KAAGS,EAAAA,MAAHF,MAAS,mBASTguF,UAAAvuF,KAAGS,EAAAA,MAAHF,MAAS,qBAWTiI,WAAAxI,KAAGS,EAAAA,MAAHF,MAAS,sBAGT2tB,UAAAluB,KAAGS,EAAAA,MAAHF,MAAS,cAUT+sF,cAAAttF,KAAGS,EAAAA,MAAHF,MAAS,yBAiBT+/B,OAAAtgC,KAAGS,EAAAA,MAAHF,MAAS,kBAGTiuF,SAAAxuF,KAAGS,EAAAA,MAAHF,MAAS,qBAoHTgsF,GA9K8BD,ICxC9BmC,GAAA,WAAA,QAAAA,MAQ6B,sBAR7BzuF,KAACkD,EAAAA,SAAD3C,OACE4C,SACE6V,EAAAA,WACA1V,IAEFC,SAAUgpF,IACV/oF,cAAe+oF,QAEjBkC,KCVaC,GAAwB,GAAI97E,GAAAA,eAAoB,oCAK7D,QAAA+7E,KAWElsF,KAAF+D,KAAoB,KAGlB/D,KAAFoyC,aAA0B,EAMxBpyC,KAAF0jC,cAA2B,EAGzB1jC,KAAF4jB,UAA8B,KAO5B5jB,KAAFsxE,mBAAgC,EAM9BtxE,KAAFgkC,WAAwB,EAMtBhkC,KAAFqxE,cAA2B,EAC3B,MAAA6a,MC1CaC,IAIXC,iBAAkB7yE,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgB7L,EAAAA,OAAOC,UAAW,sBACxC4L,EAAAA,MAAM,UAAW7L,EAAAA,OAAOC,UAAW,oBACnC8L,EAAAA,WAAW,qCACPC,EAAAA,QAAW2V,GAAmB+8D,QADtC,IACiD78D,GAAgB88D,qBAC7D5yE,EAAAA,WAAW,kBACPC,EAAAA,QAAW2V,GAAmBi9D,QADtC,IACiD/8D,GAAgBg9D,wBCcjEC,GAAA,SAAAnuF,GA2CE,QAAFmuF,GACY/mF,EACA4C,EACAw6B,EACR4pD,EAC8Bz1E,EAEvB01E,GAPT,GAAF7sF,GAQIxB,EARJgF,KAAAtD,OAAAA,WACYF,GAAZ4F,YAAYA,EACA5F,EAAZwI,mBAAYA,EACAxI,EAAZgjC,kBAAYA,EAIDhjC,EAAX6sF,kBAAWA,EAxBT7sF,EAAFqoB,gBAAmD,OAGjDroB,EAAFgyE,uBAA2B,GAAI1oE,GAAAA,aAMrBtJ,EAAV8sF,4BAA4D,KAkBxD9sF,EAAKoX,UAAYD,EACjBnX,EAAK+sF,wBAA0BH,EAC5B1gE,SAASC,EAAAA,YAAY6gE,OAAQ7gE,EAAAA,YAAY8gE,MAAO9gE,EAAAA,YAAY+gE,SAC5D/qF,UAAU,WACTnC,EAAKmtF,aAAa,oCACdP,EAAmBQ,UAAUjhE,EAAAA,YAAY6gE,SAC7ChtF,EAAKmtF,aAAa,mCACdP,EAAmBQ,UAAUjhE,EAAAA,YAAY8gE,QAC7CjtF,EAAKmtF,aAAa,oCACdP,EAAmBQ,UAAUjhE,EAAAA,YAAY+gE,aAvCrD,MAJ6CzuF,GAA7CkuF,EAAAnuF,GAgDEmuF,EAAFprF,UAAAgnB,sBAAE,SAAyBC,GAIvB,MAHAtoB,MAAKmtF,0BACLntF,KAAKotF,iBACLptF,KAAKiyE,gCACEjyE,KAAKyoB,cAAcJ,sBAAsBC,IAIlDmkE,EAAFprF,UAAAqnB,qBAAE,SAAwBJ,GAItB,MAHAtoB,MAAKmtF,0BACLntF,KAAKotF,iBACLptF,KAAKiyE,gCACEjyE,KAAKyoB,cAAcC,qBAAqBJ,IAIjDmkE,EAAFprF,UAAAynB,MAAE,WACO9oB,KAAK4I,aACR5I,KAAKmoB,gBAAkB,UACvBnoB,KAAKsI,mBAAmBygB,kBAK5B0jE,EAAFprF,UAAAilB,KAAE,WACOtmB,KAAK4I,aACR5I,KAAKmoB,gBAAkB,SACvBnoB,KAAKsI,mBAAmB6B,iBAI5BsiF,EAAFprF,UAAAiL,YAAE,WACEtM,KAAK6sF,wBAAwBp6E,cAC7BzS,KAAK4I,YAAa,GAGpB6jF,EAAFprF,UAAA2pD,iBAAE,SAAiB7lD,GACO,WAAlBA,EAAMG,QACRtF,KAAKwjC,gBACsB,YAAlBr+B,EAAMG,SAAyBtF,KAAK2sF,kBAAkB3oD,WAC/DhkC,KAAKujC,aAGPvjC,KAAK8xE,uBAAuBtsE,KAAKL,IAGnCsnF,EAAFprF,UAAA4pD,kBAAE,SAAkB9lD,GAChBnF,KAAK8xE,uBAAuBtsE,KAAKL,IAG3BsnF,EAAVprF,UAAA4rF,aAAE,SAAqB9jE,EAAkBtX,GACzC,GAAUH,GAAY1R,KAAK0F,YAAYC,cAAc+L,SACjDG,GAAMH,EAAUG,IAAIsX,GAAYzX,EAAUC,OAAOwX,IAG3CsjE,EAAVprF,UAAA8rF,wBAAE,WACE,GAAIntF,KAAKyoB,cAAcpE,cACrB,KAAM+E,OAAM,gFAIRqjE,EAAVprF,UAAA+rF,eAAE,WACF,GAAU9jF,GAAuBtJ,KAAK0F,YAAYC,cACxCujB,EAAalpB,KAAK2sF,kBAAkBzjE,UAEtCtnB,OAAMC,QAAQqnB,GAEhBA,EAAW/mB,QAAQ,SAAAgnB,GAAY,MAAA7f,GAAQoI,UAAUG,IAAIsX,KAC5CD,GACT5f,EAAQoI,UAAUG,IAAIqX,IAMlBujE,EAAVprF,UAAAkiC,WAAE,WACOvjC,KAAKsjC,aACRtjC,KAAKsjC,WAAatjC,KAAK8iC,kBAAkB1V,OAAOptB,KAAK0F,YAAYC,gBAGnE3F,KAAKsjC,WAAWW,gCAIVwoD,EAAVprF,UAAAmiC,cAAE,WACF,GAAU0uC,GAAUlyE,KAAK4sF,2BAGjB5sF,MAAK2sF,kBAAkBtb,cAAgBa,GAAoC,kBAAlBA,GAAQ3qE,OACnE2qE,EAAQ3qE,QAGNvH,KAAKsjC,YACPtjC,KAAKsjC,WAAWmB,WAKZgoD,EAAVprF,UAAA4wE,8BAAE,WAAA,GAAFnyE,GAAAE,IACIA,MAAK4sF,4BAA8B5sF,KAAKkX,UAAuB,cAG3DlX,KAAK0F,YAAYC,cAAc4B,OACjC2K,QAAQC,UAAUC,KAAK,WAAM,MAAAtS,GAAK4F,YAAYC,cAAc4B,0BA1KlEhK,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,6BACEQ,SAAU,8CACVI,QAAF,+mBACEI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE8G,YAAF6lF,GAAAC,kBACEltF,MACFC,MAAe,6BACT8lD,SAAN,KACI7lD,KAAJ,SACIgzE,aAAJ,OACI/vB,oBAAJ,+BACIh5B,WAAY,kBACZgkE,iBAAJ,4BACI/jE,gBAAJ,mHA1CA/rB,KAAE+vF,EAAAA,mBAGF/vF,KAAEkwB,EAAAA,qBAiBFlwB,SAAmBsW,GAAnBjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAoa,EAAAA,cALA3a,KAAQ2uF,MACRO,EAAA7sF,6EAmCA6sF,uBCjDAc,GAAA,WAAA,QAAAA,MAWmC,sBAXnChwF,KAACkD,EAAAA,SAAD3C,OACE4C,SACEE,EAAAA,aACA4oB,EAAAA,cACA3oB,GACAuV,EAAAA,cAEFtV,SAAU2rF,GAAyB5rF,IACnCE,cAAe0rF,IACfhjE,iBAAkBgjE,QAEpBc,mBCcE,QAAFC,GACI7nE,EACQC,EAERuzC,GAJF,GAAFr5D,GAAAE,IAEYA,MAAZ4lB,YAAYA,EAVO5lB,KAAnB6lB,gBAAqC,GAAIhd,GAAAA,QAGtB7I,KAAnB8lB,aAAkC,GAAIjd,GAAAA,QAUlC7I,KAAK2lB,kBAAoBA,EACzB3lB,KAAK0jC,aAAe/d,EAAkBgnE,kBAAkBjpD,aAGxD/d,EAAkBmsD,uBAAuB/vE,KACvC0V,EAAAA,OAAO,SAAAtS,GAAS,MAAoB,SAApBA,EAAMytE,WAA0C,YAAlBztE,EAAMG,UACpDtD,EAAAA,KAAK,IAENC,UAAU,WACTnC,EAAKgmB,aAAahiB,OAClBhE,EAAKgmB,aAAa9gB,aAIpB2gB,EAAkBmsD,uBAAuB/vE,KACvC0V,EAAAA,OAAO,SAAAtS,GAAS,MAAoB,SAApBA,EAAMytE,WAA0C,WAAlBztE,EAAMG,UACpDtD,EAAAA,KAAK,IAENC,UAAU,WACTnC,EAAK8lB,YAAYmB,UACjBjnB,EAAK+lB,gBAAgB/hB,KAAKhE,EAAK+yE,SAC/B/yE,EAAK+lB,gBAAgB7gB,aAGvBT,EAAAA,MACEqhB,EAAYuf,gBACZvf,EAAYmuB,gBAAgBhyC,KAAK0V,EAAAA,OAAO,SAAAtS,GAAS,MAAAA,GAAMwF,UAAY84B,EAAAA,WACnExhC,UAAU,WACLnC,EAAK4jC,cACR5jC,EAAKomB,YA6Cb,MApCEsnE,GAAFnsF,UAAA6kB,QAAE,SAAQ+4B,GAAR,GAAFn/C,GAAAE,IACSA,MAAK6lB,gBAAgBQ,SAExBrmB,KAAK2lB,kBAAkBmsD,uBAAuB/vE,KAC5C0V,EAAAA,OAAO,SAAAtS,GAAS,MAAoB,UAApBA,EAAMytE,YACtB5wE,EAAAA,KAAK,IACLC,UAAU,WAAM,MAAAnC,GAAK8lB,YAAYmtD,mBAEnC/yE,KAAK6yE,QAAU5zB,EACfj/C,KAAK2lB,kBAAkBW,SAK3BknE,EAAFnsF,UAAA4lB,eAAE,WACE,MAAOjnB,MAAK6lB,gBAAgBqB,gBAI9BsmE,EAAFnsF,UAAA8lB,YAAE,WACE,MAAOnnB,MAAK8lB,aAAaoB,gBAM3BsmE,EAAFnsF,UAAA8jC,cAAE,WACE,MAAOnlC,MAAK4lB,YAAYuf,iBAM1BqoD,EAAFnsF,UAAA0yC,cAAE,WACE,MAAO/zC,MAAK4lB,YAAYmuB,iBAE5By5C,KCzFaC,GACT,GAAIt9E,GAAAA,eAAqC,oCAK7Cu9E,GAAA,WAkBE,QAAFA,GACc7jE,EACAE,EACwB4jE,EACZx0B,EAER/wB,GALJpoC,KAAd6pB,SAAcA,EACA7pB,KAAd+pB,UAAcA,EACwB/pB,KAAtC2tF,mBAAsCA,EACZ3tF,KAA1Bm5D,UAA0BA,EAERn5D,KAAlBooC,gBAAkBA,EAtBRpoC,KAAV4tF,2BAAsE,KAvCtE,MA0CEjqF,QAAFC,eAAM8pF,EAANrsF,UAAA,6BAAE,WACF,GAAU+oB,GAASpqB,KAAK2tF,kBACpB,OAAOvjE,GAASA,EAAOyjE,sBAAwB7tF,KAAK4tF,gCAGtD,SAA0B/pF,GACpB7D,KAAK2tF,mBACP3tF,KAAK2tF,mBAAmBE,sBAAwBhqF,EAEhD7D,KAAK4tF,2BAA6B/pF,mCAiBtC6pF,EAAFrsF,UAAAspB,KAAE,SAA0B2pD,EACT9pD,GADjB,GAAF1qB,GAAAE,KAGU6qB,EACF0pD,EAAqBv0E,KAAKooC,iBAAmB,GAAI8jD,IAAwB1hE,GACvEQ,EAAahrB,KAAK2rB,eAAed,GACjCe,EAAY5rB,KAAK8tF,iBAAiB9iE,EAAYH,GAC9CkjE,EAAM,GAAIP,IAAwB5hE,EAAWZ,EAAYhrB,KAAKm5D,UAEpE,IAAImb,YAAkCv6D,GAAAA,YACpC6R,EAAUlD,qBAAqB,GAAIjF,GAAAA,eAAkB6wD,EAAsB,MACzEzoD,UAAWhB,EAAQ9mB,KACnBiqF,eAAgBD,SAEb,CACX,GAAYzlE,GAAS,GAAIgD,GAAAA,gBAAgBgpD,MAAwBzgE,GACrD7T,KAAK8rB,gBAAgBjB,EAASkjE,IAC9BhiE,EAAaH,EAAUvD,sBAAsBC,EACnDylE,GAAIviE,SAAWO,EAAWP,SAuB5B,MAnBAuiE,GAAI9mE,iBAAiBhlB,UAAU,WAEzBnC,EAAK+tF,uBAAyBE,IAChCjuF,EAAK+tF,sBAAwB,QAI7B7tF,KAAK6tF,uBAGP7tF,KAAK6tF,sBAAsB5mE,iBAAiBhlB,UAAU,WAAM,MAAA8rF,GAAIpoE,kBAAkBmD,UAClF9oB,KAAK6tF,sBAAsB3nE,WAG3B6nE,EAAIpoE,kBAAkBmD,QAGxB9oB,KAAK6tF,sBAAwBE,EAEtBA,GAMTL,EAAFrsF,UAAA6kB,QAAE,WACMlmB,KAAK6tF,uBACP7tF,KAAK6tF,sBAAsB3nE,WAI/BwnE,EAAFrsF,UAAAiL,YAAE,WACMtM,KAAK4tF,4BACP5tF,KAAK4tF,2BAA2B1nE,WAO5BwnE,EAAVrsF,UAAAysF,iBAAE,SAAyB9iE,EACAR,GAE3B,GAAUS,GAAeT,GAAUA,EAAOxG,kBAAoBwG,EAAOxG,iBAAiBkH,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBjrB,KAAK+pB,UAAW,GAAIqB,WACrE8gE,GAAsB1hE,MAGnBa,EACF,GAAIC,GAAAA,gBAAgBmhE,GAAyBjiE,EAAOxG,iBAAkBkH,EAE1E,OAD4DF,GAAW1G,OAAO+G,GAC1DG,UAOdkiE,EAAVrsF,UAAAsqB,eAAE,SAAuBnB,GACzB,GAAUiC,GAAgB,GAAIC,GAAAA,eACxBve,UAAWqc,EAAOrc,UAClBikC,YAAa5nB,EAAO4nB,YACpB+iC,oBAAqB3qD,EAAO8mD,kBAC5BH,SAAU,OACVjoC,eAAgBlpC,KAAK6pB,SAASokE,iBAAiBC,QAC/CvhE,iBAAkB3sB,KAAK6pB,SAAS9jB,WAC7B6mB,SACAK,qBACAE,OAAO,MAOZ,OAJI3C,GAAOypB,gBACTxnB,EAAcwnB,cAAgBzpB,EAAOypB,eAGhCj0C,KAAK6pB,SAASuD,OAAOX,IAQtBihE,EAAVrsF,UAAAyqB,gBAAE,SAA2BtB,EACAwjE,GAE7B,GAAU/iE,GAAeT,GAAUA,EAAOxG,kBAAoBwG,EAAOxG,iBAAiBkH,SAC5EkqD,EAAkB,GAAIhqD,WACzBoiE,GAAmBQ,IACnB/B,GAAuBzhE,EAAOzmB,OAWjC,QARIymB,EAAOrc,WACL8c,GAAiBA,EAAaxV,IAA2B7F,EAAAA,eAAgB,OAC7EwlE,EAAgBxmD,IAAIhf,EAAAA,gBAClB/L,MAAO2mB,EAAOrc,UACd5C,OAAQC,EAAAA,OAIL,GAAI2f,GAAAA,eAAeF,GAAgBjrB,KAAK+pB,UAAWqrD,mBAzJ9D73E,KAAC8vB,EAAAA,WAADvvB,OAAaykB,WAAYgrE,2CA5BzBhwF,KAAQ+vB,EAAAA,UAKR/vB,KAAEiwB,EAAAA,WA4CFjwB,KAA0DmwF,EAA1D9vF,aAAAL,KAAOsS,EAAAA,WAAPtS,KAAmBmwB,EAAAA,aApCnBnwB,KAAQs4E,EAAAA,SAARj4E,aAAAL,KAqCOsS,EAAAA,aAnCPtS,KAA+B2uF,GAA/BtuF,aAAAL,KAoCOsS,EAAAA,WApCPtS,KAoCmBuW,EAAAA,OApCnBhW,MAoC0B2vF,uMA5D1BC,KjBoCMS,GAA6B,SAM7BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,yBAMA,QAAFC,GAAqB3oF,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAA2oF,MAEaC,GAELh+E,EAAWlJ,EAAcgB,EAAmBimF,MAKpD1M,GAAA,SAAArjF,GA4BE,QAAFqjF,GAAcr6E,EAKAmB,EACQ0M,EAE0CqhB,GAR9D,GAAF12B,GASIxB,EATJgF,KAAAtD,KASUsH,IATVtH,IAMsBF,GAAtBqV,cAAsBA,EAE0CrV,EAAhE02B,eAAgEA,EAhBrD12B,EAAXyuF,cAAoCzuF,EAAK0uF,mBAAmB,UAAW,gBAG5D1uF,EAAX2uF,aAAmC3uF,EAAK0uF,mBAAmB,kBAkBvD,KAAmB,GAAvBzoC,GAAA,EAAuB2oC,EAAvBN,GAAuBroC,EAAvB2oC,EAAAlsF,OAAuBujD,IAAwB,CAAtC,GAAM8S,GAAf61B,EAAA3oC,EACUjmD,GAAK0uF,mBAAmB31B,IACzBvxD,EAAwB,cAAiBoK,UAAUG,IAAIgnD,SAI5D/4D,GAAKqV,cAAcK,QAAQ1V,EAAK4F,aAAa,GAEzC5F,EAAKyuF,gBACPzuF,EAAK+8C,MAAQsxC,MAxBnB,MAV+B5vF,GAA/BojF,EAAArjF,GAsCEqjF,EAAFtgF,UAAAiL,YAAE,WACEtM,KAAKmV,cAAcU,eAAe7V,KAAK0F,cAIzCi8E,EAAFtgF,UAAAkG,MAAE,WACEvH,KAAK6yB,kBAAkBtrB,SAGzBo6E,EAAFtgF,UAAAwxB,gBAAE,WACE,MAAO7yB,MAAK0F,YAAYC,eAG1Bg8E,EAAFtgF,UAAA4gC,kBAAE,WACE,MAAOjiC,MAAKkiC,eAAiBliC,KAAKiN,UAIpC00E,EAAFtgF,UAAAmtF,mBAAE,WAAF,IAAqB,GAArB1uF,GAAAE,KAAAy7D,KAAA1V,EAAA,EAAqBA,EAArB9lD,UAAAuC,OAAqBujD,IAAA0V,EAArB1V,GAAA9lD,UAAA8lD,EACI,OAAO0V,GAAW5jD,KAAK,SAAA82E,GAAa,MAAA7uF,GAAK+yB,kBAAkB8iD,aAAagZ,qBAzE5EpxF,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,iMACEO,SAAU,YACVE,MAGF8iE,aAAA,mBACM7oC,kCAAN,uCAEAl6B,SAAA,mVACAI,QAAA;mnMACEuI,QAAF,WAAA,gBAAA,SACEtI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAhEApC,KAAE2Y,EAAAA,eAJF3Y,KAAQI,OAAQC,aAAhBL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA8mB,EAAAA,4BA4FA+8D,EAAA/hF,uDAVA+hF,sBAsDA,QAAAC,GAAAp0E,EAAAq0E,EAAAv6E,EAyBEy4B,GAIF,MAAAzhC,GAAAgF,KAAAtD,KAAAsH,EAAAkG,EAAAq0E,EAAA9hD,IAAA//B,+DAKAA,KAAAiN,WACA9H,EAAA2F,iBACQ3F,EAAR28E,6BAGAF,EAAAhkF,aACAL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,gLAxCAS,MAKM85B,kBAAN,4JAIIG,kCAAJ,uCAEAvxB,QAAA,WAAA,gBAAA,SACA3I,SAAA,mVACAI,QAAA,2mMACAC,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAIAiiF,EAAA5lE,eAAA,WAAA,QACAze,KAAAwS,EAAAA,kJA7JA6xE,EAAAhiF,gBAKAsN,WAAA3P,KAAAS,EAAAA,gBCCAwe,GAAA,WAAA,QAAAA,MAgB8B,sBAhB9Bjf,KAACkD,EAAAA,SAAD3C,OACE4C,SACEE,EAAAA,aACAyV,GACAxV,IAEFC,SACE6gF,GACAC,GACA/gF,IAEFE,cACE4gF,GACAC,QAGJplE,KC6BaulE,GACT,GAAI5xE,GAAAA,eAA8C,qCASzC6xE,IACX7kF,QAAS44B,EAAAA,kBACT14B,YAAaonB,EAAAA,WAAW,WAAM,MAAAw9D,MAC9BhsD,OAAO,iBAOT,QAAAisD,MAA2C,MAA3CA,MAEIC,GAAmB,gBAIrB,QAAFC,GAEWjsD,EAGAtyB,GAHA7D,KAAXm2B,OAAWA,EAGAn2B,KAAX6D,MAAWA,EACX,MAAAu+E,MAGAH,GAAA,WAqHE,QAAFA,GACY3hD,EAEJskC,GAFI5kE,KAAZsgC,gBAAYA,EAtGFtgC,KAAVk6B,WAAsB,EACZl6B,KAAV23C,WAAsB,EACZ33C,KAAV2gC,WAAsB,EAepB3gC,KAAFu6B,8BAAwD,aAGtDv6B,KAAFm4C,WAA0B,aAqBhBn4C,KAAVugC,MAAkB,2BAA2B4hD,KA8BxBniF,KAArBolB,YAAmC,GAAIhc,GAAAA,aA2BlBpJ,KAArBuL,OACM,GAAInC,GAAAA,aAOJpJ,KAAKqiF,WACDzd,GAAkBA,EAAeyd,WAAazd,EAAeyd,WAAa,WAiIpF,MA/ME1+E,QAAFC,eACMq+E,EADN5gF,UAAA,YAAE,WACqB,MAAOrB,MAAKugC,WACjC,SAAS18B,GAAT,GAAF/D,GAAAE,IACIA,MAAKugC,MAAQ18B,EAET7D,KAAKsiF,gBACPtiF,KAAKsiF,eAAengF,QAAQ,SAAA21B,GAC1BA,EAAO9d,KAAOla,EAAKygC,MACnBzI,EAAOsJ,mDAObz9B,OAAFC,eACMq+E,EADN5gF,UAAA,gBAAE,WAC0B,MAAOrB,MAAKk6B,eACtC,SAAar2B,GACX7D,KAAKk6B,UAAY5oB,EAAAA,sBAAsBzN,oCAIzCF,OAAFC,eACMq+E,EADN5gF,UAAA,aAAE,WAEF,GAAU8X,GAAWnZ,KAAKy5C,gBAAkBz5C,KAAKy5C,gBAAgBtgC,WAE7D,OAAInZ,MAAK+5C,SACA5gC,EAAS3U,IAAI,SAAAszB,GAAU,MAAAA,GAAOj0B,QAGhCsV,EAAS,GAAKA,EAAS,GAAGtV,UAAQgQ,QAE3C,SAAUitB,GACR9gC,KAAKg7C,qBAAqBla,GAC1B9gC,KAAKolB,YAAY5f,KAAKxF,KAAK6D,wCAW7BF,OAAFC,eAAMq+E,EAAN5gF,UAAA,gBAAE,WACF,GAAU8X,GAAWnZ,KAAKy5C,gBAAgBtgC,QACtC,OAAOnZ,MAAK+5C,SAAW5gC,EAAYA,EAAS,IAAM,sCAIpDxV,OAAFC,eACMq+E,EADN5gF,UAAA,gBAAE,WAC0B,MAAOrB,MAAK23C,eACtC,SAAa9zC,GACX7D,KAAK23C,UAAYrmC,EAAAA,sBAAsBzN,oCAIzCF,OAAFC,eACMq+E,EADN5gF,UAAA,gBAAE,WAC0B,MAAOrB,MAAK2gC,eACtC,SAAa98B,GACX7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,GAEnC7D,KAAKsiF,gBACPtiF,KAAKsiF,eAAengF,QAAQ,SAAA21B,GAAU,MAAAA,GAAOsJ,mDAiBjD6gD,EAAF5gF,UAAAmiB,SAAE,WACExjB,KAAKy5C,gBAAkB,GAAIK,GAAAA,eAAgC95C,KAAK+5C,aAAUlmC,IAAW,IAGvFouE,EAAF5gF,UAAAgK,mBAAE,kBACE+D,EAAApP,KAAKy5C,iBAAgBY,OAAzBt6C,MAAAqP,EAAmCpP,KAAKsiF,eAAe7qE,OAAO,SAAAqgB,GAAU,MAAAA,GAAO1B,YAO7E6rD,EAAF5gF,UAAAk2B,WAAE,SAAW1zB,GACT7D,KAAK6D,MAAQA,EACb7D,KAAKsgC,gBAAgBn2B,gBAIvB83E,EAAF5gF,UAAAm2B,iBAAE,SAAiBC,GACfz3B,KAAKu6B,8BAAgC9C,GAIvCwqD,EAAF5gF,UAAAq2B,kBAAE,SAAkBD,GAChBz3B,KAAKm4C,WAAa1gB,GAIpBwqD,EAAF5gF,UAAAs2B,iBAAE,SAAiBC,GACf53B,KAAKiN,SAAW2qB,GAIlBqqD,EAAF5gF,UAAAg2B,iBAAE,WACF,GAAUle,GAAWnZ,KAAKmZ,SAChBgd,EAASv0B,MAAMC,QAAQsX,GAAYA,EAASA,EAAS3W,OAAS,GAAK2W,EACnEhU,EAAQ,GAAIi9E,IAAqB,EAAUpiF,KAAK6D,MACtD7D,MAAKu6B,8BAA8Bp1B,EAAMtB,OACzC7D,KAAKuL,OAAO/F,KAAKL,IASnB88E,EAAF5gF,UAAAkhF,kBAAE,SAAkBzqD,EAAyBuiB,EAAiB4D,OAA9D,KAAAA,IAA8DA,GAA9D,GAGSj+C,KAAK+5C,WAAY/5C,KAAKmZ,UAAa2e,EAAO1B,UAC5Cp2B,KAAa,SAAqBo2B,SAAU,GAG3CikB,EACFr6C,KAAKy5C,gBAAgBY,OAAOviB,GAE5B93B,KAAKy5C,gBAAgBc,SAASziB,GAI5BmmB,GACFj+C,KAAKq3B,mBAKPr3B,KAAKolB,YAAY5f,KAAKxF,KAAK6D,QAI7Bo+E,EAAF5gF,UAAAmhF,YAAE,SAAY1qD,GACV,MAAO93B,MAAKy5C,gBAAgB2E,WAAWtmB,IAIzCmqD,EAAF5gF,UAAAohF,cAAE,SAAc3qD,GACZ,WAA8B,KAAnB93B,KAAK0iF,YAIZ1iF,KAAK+5C,UAAYn4C,MAAMC,QAAQ7B,KAAK0iF,WAC/B1iF,KAAK0iF,UAAU7qE,KAAK,SAAAhU,GAAS,MAAgB,OAAhBi0B,EAAOj0B,OAAiBA,IAAUi0B,EAAOj0B,QAGxEi0B,EAAOj0B,QAAU7D,KAAK0iF,YAIvBT,EAAV5gF,UAAA25C,qBAAE,SAA6Bn3C,GAA7B,GAAF/D,GAAAE,IAGI,IAFAA,KAAK0iF,UAAY7+E,EAEZ7D,KAAKsiF,eAIV,GAAItiF,KAAK+5C,UAAYl2C,EAAO,CAC1B,IAAKjC,MAAMC,QAAQgC,GACjB,KAAMulB,OAAM,qDAGdppB,MAAKugF,kBACL18E,EAAM1B,QAAQ,SAAC+6C,GAAsB,MAAAp9C,GAAKq9C,aAAaD,SAEvDl9C,MAAKugF,kBACLvgF,KAAKm9C,aAAat5C,IAKdo+E,EAAV5gF,UAAAk/E,gBAAE,WACEvgF,KAAKy5C,gBAAgBltB,QACrBvsB,KAAKsiF,eAAengF,QAAQ,SAAA21B,GAAU,MAAAA,GAAO1B,SAAU,KAIjD6rD,EAAV5gF,UAAA87C,aAAE,SAAqBt5C,GACvB,GAAUw5C,GAAsBr9C,KAAKsiF,eAAe7tE,KAAK,SAAAqjB,GACnD,MAAuB,OAAhBA,EAAOj0B,OAAiBi0B,EAAOj0B,QAAUA,GAG9Cw5C,KACFA,EAAoBjnB,SAAU,EAC9Bp2B,KAAKy5C,gBAAgBY,OAAOgD,oBAzPlC9/C,KAACiB,EAAAA,UAADV,OACEW,SAAU,0BACVC,WACEsjF,IACC7kF,QAAS+kF,GAA8B7kF,YAAa4kF,IAEvD/iF,MACEE,KAAQ,QACRD,MAAS,0BACT2I,uBAAwB,WACxB66E,qCAAsC,WACtCC,sDAAuD,6BAEzD5jF,SAAU,+DA5FZzB,KAAEkJ,EAAAA,oBAsMFlJ,SAAAsW,GAAAjW,aAAAL,KAAKsS,EAAAA,WAALtS,KAAiBuW,EAAAA,OAAjBhW,MAAwBikF,2BAhFxBO,iBAAA/kF,KAAGW,EAAAA,gBAAHJ,MAAmB2mB,EAAAA,WAAW,WAAM,MAAAo+D,SAGpCR,aAAA9kF,KAAGS,EAAAA,QAGHgc,OAAAzc,KAAGS,EAAAA,QAeHknB,WAAA3nB,KAAGS,EAAAA,QAOH6F,QAAAtG,KAAGS,EAAAA,QAoBHonB,cAAA7nB,KAAGoJ,EAAAA,SASHozC,WAAAx8C,KAAGS,EAAAA,QAOHiP,WAAA1P,KAAGS,EAAAA,QAWHuN,SAAAhO,KAAGoJ,EAAAA,UA0IHs7E,mBAIA,QAAAa,MAAkC,MAAlCA,MACaC,GACT36E,EAAmB06E,IAGvBD,GAAA,SAAAvkF,GAuGE,QAAFukF,GAA0BG,EACJ16E,EACA5C,EACAyP,EAEeotD,EAEnBqC,GAPhB,GAAF9kE,GAQIxB,EARJgF,KAAAtD,OAAAA,IACsBF,GAAtBwI,mBAAsBA,EACAxI,EAAtB4F,YAAsBA,EACA5F,EAAtBqV,cAAsBA,EAjFZrV,EAAVmjF,mBAA8B,EACpBnjF,EAAV+2B,UAAqB,EAWO/2B,EAA5B+jB,eAA4D,KA4DlD/jB,EAAV6gC,WAA+B,EAGV7gC,EAArByL,OACM,GAAInC,GAAAA,YAYV,IAAUo5D,GAAiB9pD,OAAO6pD,SAC9BziE,GAAKoN,SAAYs1D,GAAqC,IAAnBA,EAAwBA,EAAiB,KAC5E1iE,EAAKojF,kBAAoBF,EACzBljF,EAAKuiF,WACDzd,GAAkBA,EAAeyd,WAAazd,EAAeyd,WAAa,aAjBlF,MA9EqC9jF,GAArCskF,EAAAvkF,GA0BEqF,OAAFC,eAAMi/E,EAANxhF,UAAA,gBAAE,WAAyB,MAAUrB,MAAKwuB,GAA1C,2CAeE7qB,OAAFC,eACMi/E,EADNxhF,UAAA,kBAAE,WAEE,MAAOrB,MAAKkjF,kBAAoBljF,KAAKkjF,kBAAkBb,WAAariF,KAAKmjF,iBAE3E,SAAet/E,GACb7D,KAAKmjF,YAAct/E,mCAKrBF,OAAFC,eACMi/E,EADNxhF,UAAA,eAAE,WAEE,MAAOrB,MAAKkjF,kBAAoBljF,KAAKkjF,kBAAkBV,YAAYxiF,MAAQA,KAAK62B,cAElF,SAAYhzB,GACd,GAAUi9B,GAAWxvB,EAAAA,sBAAsBzN,EAEnCi9B,KAAa9gC,KAAK62B,WACpB72B,KAAK62B,SAAWiK,EAEZ9gC,KAAKkjF,mBACPljF,KAAKkjF,kBAAkBX,kBAAkBviF,KAAMA,KAAK62B,UAGtD72B,KAAKsI,mBAAmB6B,iDAK5BxG,OAAFC,eACMi/E,EADNxhF,UAAA,gBAAE,WAEE,MAAOrB,MAAK2gC,WAAc3gC,KAAKkjF,mBAAqBljF,KAAKkjF,kBAAkBj2E,cAE7E,SAAapJ,GAAkB7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,oCAwBtEg/E,EAAFxhF,UAAAmiB,SAAE,WACExjB,KAAKijF,kBAAoBjjF,KAAKkjF,oBAAsBljF,KAAKkjF,kBAAkBnpC,SAC3E/5C,KAAK03E,MAAQ13E,KAAKijF,kBAAoB,QAAU,WAChDjjF,KAAKwuB,GAAKxuB,KAAKwuB,IAAM,qBAAqB2zD,KAEtCniF,KAAKijF,oBACPjjF,KAAKga,KAAOha,KAAKkjF,kBAAkBlpE,MAGjCha,KAAKkjF,mBAAqBljF,KAAKkjF,kBAAkBT,cAAcziF,QACjEA,KAAKo2B,SAAU,GAGjBp2B,KAAKmV,cAAcK,QAAQxV,KAAK0F,aAAa,IAG/Cm9E,EAAFxhF,UAAAiL,YAAE,WAAA,GAAFxM,GAAAE,KACU4gD,EAAQ5gD,KAAKkjF,iBAEnBljF,MAAKmV,cAAcU,eAAe7V,KAAK0F,aAInCk7C,GAASA,EAAM4hC,YAAYxiF,OAC7BkS,QAAQC,UAAUC,KAAK,WAAM,MAAAwuC,GAAM2hC,kBAAkBziF,GAAM,MAK/D+iF,EAAFxhF,UAAAkG,MAAE,WACEvH,KAAKojF,eAAez9E,cAAc4B,SAIpCs7E,EAAFxhF,UAAAgiF,eAAE,WACF,GAAUC,KAAatjF,KAAKijF,oBAA4BjjF,KAAK62B,QAErDysD,KAAetjF,KAAK62B,WACtB72B,KAAK62B,SAAWysD,EACZtjF,KAAKkjF,oBACPljF,KAAKkjF,kBAAkBX,kBAAkBviF,KAAMA,KAAK62B,UAAU,GAC9D72B,KAAKkjF,kBAAkB/qC,eAI3Bn4C,KAAKuL,OAAO/F,KAAK,GAAI48E,IAAsBpiF,KAAMA,KAAK6D,SAQxDg/E,EAAFxhF,UAAA+/B,cAAE,WAGEphC,KAAKsI,mBAAmB6B,+BAhL5B5M,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,oBACEQ,SAAU,ykBACVI,QAAF,2wFACEC,cAAFC,EAAAA,kBAAmCC,KACjCR,SAAF,kBACES,gBAAFC,EAAAA,wBAAAC,OACEiI,QAAF,iBACE1I,MACFqkF,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtCC,gDAAJ,4BACIvkF,MAAJ,4DAKIi6B,UAAJ,uHAsFA77B,KAAuCC,EAAAA,aA3bvCD,KAAE2Y,EAAAA,eAIF3Y,KAAEI,OAAFC,aAAAL,KAAAM,EAAAA,UAAAC,MAAA,gBAXAP,SAAQsW,GAARjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAikF,SAwcAc,EAAAjjF,wHA7EAwjF,iBAAA7lF,KAAQuJ,EAAAA,UAARhJ,MAAA,YAKA0wB,KAAAjxB,KAAAS,EAAAA,QAKAgc,OAAAzc,KAAAS,EAAAA,QASA6F,QAAAtG,KAAAS,EAAAA,QAGAkP,WAAA3P,KAAAS,EAAAA,QAGAqkF,aAAA9kF,KAAQS,EAAAA,QAGRo4B,UAAA74B,KAAAS,EAAAA,QAGAiP,WAAA1P,KAAAS,EAAAA,QAUAuN,SAAAhO,KAAAoJ,EAAAA,UA2BAk8E,OC1bAc,GAAA,WAAA,QAAAA,MAKoC,sBALpCpmF,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUG,GAAiBwV,IAC3BvV,SAAUD,GAAiBohF,GAAsBY,IACjD9hF,cAAekhF,GAAsBY,QAEvCc,KCGArJ,GAAA,WAAA,QAAAA,MAI6B,sBAJ7B/8E,KAACiB,EAAAA,UAADV,OACEW,SAAU,mBACVS,MAAOC,MAAS,wBAElBm7E,KAMAC,GAAA,WAAA,QAAAA,MAM2B,sBAN3Bh9E,KAACiB,EAAAA,UAADV,OACEW,SAAU,mDACVS,MACEC,MAAS,sBAGbo7E,KAMAC,GAAA,WAAA,QAAAA,MAM8B,sBAN9Bj9E,KAACiB,EAAAA,UAADV,OACEW,SAAU,4DACVS,MACEC,MAAS,yBAGbq7E,KAMAC,GAAA,WAAA,QAAAA,KAUWz6E,KAAX4jF,MAAoC,QACpC,sBAXArmF,KAACiB,EAAAA,UAADV,OACEW,SAAU,mBACVO,SAAU,iBACVE,MACEC,MAAS,mBACT0kF,qCAAsC,yCAK1CD,QAAArmF,KAAGS,EAAAA,SACHy8E,KAMAC,GAAA,WAAA,QAAAA,MAI4B,sBAJ5Bn9E,KAACiB,EAAAA,UAADV,OACEW,SAAU,kBACVS,MAAOC,MAAS,uBAElBu7E,KAMAI,GAAA,WAAA,QAAAA,MAI2B,sBAJ3Bv9E,KAACiB,EAAAA,UAADV,OACEW,SAAU,mCACVS,MAAOC,MAAS,sBAElB27E,KAMAH,GAAA,WAAA,QAAAA,MAI6B,sBAJ7Bp9E,KAACiB,EAAAA,UAADV,OACEW,SAAU,2CACVS,MAAOC,MAAS,yBAElBw7E,KAMAC,GAAA,WAAA,QAAAA,MAI6B,sBAJ7Br9E,KAACiB,EAAAA,UAADV,OACEW,SAAU,4CACVS,MAAOC,MAAS,yBAElBy7E,KAMAC,GAAA,WAAA,QAAAA,MAI6B,sBAJ7Bt9E,KAACiB,EAAAA,UAADV,OACEW,SAAU,2CACVS,MAAOC,MAAS,yBAElB07E,KAMAE,GAAA,WAAA,QAAAA,MAI6B,sBAJ7Bx9E,KAACiB,EAAAA,UAADV,OACEW,SAAU,4CACVS,MAAOC,MAAS,yBAElB47E,KAMAC,GAAA,WAAA,QAAAA,MAI4B,sBAJ5Bz9E,KAACiB,EAAAA,UAADV,OACEW,SAAU,qCACVS,MAAOC,MAAS,uBAElB67E,KAcAb,GAAA,WAAA,QAAAA,MASA,sBATA58E,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,WACEO,SAAU,UACVC,SAAU,8EACVI,QAAF,6yEACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACET,MAAFC,MAAA,gBAGAg7E,iCAcA,MALAC,GAAAx8E,aAQAL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,kTARAa,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACET,MAAQC,MAAV,uBAGAi7E,iCAcA,sBAHA78E,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,uBAAAQ,SAAA,2NAQAK,cAAAC,EAAAA,kBAAAC,sDARAN,MAAAC,MAAA,4BAGAk7E,KX/JAY,GAAA,WAAA,QAAAA,MAyB4B,sBAzB5B19E,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUG,IACVC,SACEq5E,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAn6E;uDAEFE,cACEo5E,GAASC,GAAeC,GAAmBC,GAAgBC,GAAcC,GACzEC,GAAgBC,GAAeC,GAAgBC,GAAgBC,GAAgBC,GAC/EC,GAAgBC,QAGpBC,KC/BaC,GACT,GAAI/qE,GAAAA,eAAuC,6BC0B3C0lB,GAAe,EAONslD,IACXh+E,QAAS44B,EAAAA,kBACT14B,YAAaonB,EAAAA,WAAW,WAAM,MAAA22D,MAC9BnlD,OAAO,OASPolD,KAAF,EAEEC,QAAF,EAEEC,UAAF,EAEEC,cAAF,gHAIA,mBAAA,QAAAC,MAKA,MAAAA,oBAKE,QAAFC,GAAqBh2E,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAAg2E,MACaC,GAMLpjE,EAAcjI,EAAWlI,EAAmBhB,EAAcs0E,KAAmB,WAWrFN,GAAA,SAAA98E,GAmFE,QAAF88E,GAAc9zE,EACQgB,EACA6M,EACA3M,EACe0E,EAEX0uE,EACsCplD,GAP9D,GAAF12B,GAQIxB,EARJgF,KAAAtD,KAQUsH,IARVtH,WACsBF,GAAtBwI,mBAAsBA,EACAxI,EAAtBqV,cAAsBA,EACArV,EAAtB0I,QAAsBA,EAGI1I,EAA1B87E,aAA0BA,EACsC97E,EAAhE02B,eAAgEA,EA9DzC12B,EAAvB8jB,UAA2C,GAKf9jB,EAA5B+jB,eAA4D,KAElD/jB,EAAV62B,UAA8B,mBAAkBd,GAGrC/1B,EAAX0uB,GAAwB1uB,EAAK62B,UAYlB72B,EAAX8b,cAA+C,QAGpC9b,EAAXka,KAAiC,KAGZla,EAArByL,OACM,GAAInC,GAAAA,aAGWtJ,EAArB+7E,oBAAkE,GAAIzyE,GAAAA,aAepEtJ,EAAFq4C,WAA0B,aAEhBr4C,EAAVg8E,uBAA2C,GAEjCh8E,EAAVi8E,mBAAqDC,GAAqBX,KAEhEv7E,EAAVy6B,8BAAgE,aA+CtDz6B,EAAV+2B,UAA8B,EAgBpB/2B,EAAV6gC,WAA+B,EAwBrB7gC,EAAVm8E,gBAAoC,EA3EhCn8E,EAAKoN,SAAWqI,SAASrI,IAAa,EAEtCpN,EAAKqV,cAAcK,QAAQlO,GAAY,GAAMrF,UAAU,SAAAg1B,GAChDA,GAMH/kB,QAAQC,UAAUC,KAAK,WACrBtS,EAAKq4C,aACL7vC,EAAmB6B,qBAgD7B,MAnIiC5L,GAAjC68E,EAAA98E,GAoBEqF,OAAFC,eAAMw3E,EAAN/5E,UAAA,eAAE,WAAwB,OAAUrB,KAAKwuB,IAAMxuB,KAAK22B,WAApD,0CAGEhzB,OAAFC,eACMw3E,EADN/5E,UAAA,gBAAE,WAC0B,MAAOrB,MAAK42B,eACtC,SAAa/yB,GAAkB7D,KAAK42B,UAAYtlB,EAAAA,sBAAsBzN,oCAiEtEu3E,EAAF/5E,UAAA44D,mBAAE,aAEAmhB,EAAF/5E,UAAAiL,YAAE,WACEtM,KAAKmV,cAAcU,eAAe7V,KAAK0F,cAMzC/B,OAAFC,eACMw3E,EADN/5E,UAAA,eAAE,WACyB,MAAOrB,MAAK62B,cACrC,SAAYhzB,GACNA,GAAS7D,KAAKo2B,UAChBp2B,KAAK62B,SAAWhzB,EAChB7D,KAAKsI,mBAAmB6B,iDAS5BxG,OAAFC,eACMw3E,EADN/5E,UAAA,gBAAE,WACiB,MAAOrB,MAAK2gC,eAC7B,SAAa98B,GACf,GAAUi9B,GAAWxvB,EAAAA,sBAAsBzN,EAEnCi9B,KAAa9gC,KAAKiN,WACpBjN,KAAK2gC,UAAYG,EACjB9gC,KAAKsI,mBAAmB6B,iDAW5BxG,OAAFC,eACMw3E,EADN/5E,UAAA,qBAAE,WAC+B,MAAOrB,MAAKi8E,oBAC3C,SAAkBp4E,GACpB,GAAUq4E,GAAUr4E,GAAS7D,KAAKi8E,cAC9Bj8E,MAAKi8E,eAAiBp4E,EAElBq4E,IACEl8E,KAAKi8E,eACPj8E,KAAKm8E,sBAAsBH,GAAqBR,eAEhDx7E,KAAKm8E,sBACHn8E,KAAKo2B,QAAU4lD,GAAqBV,QAAUU,GAAqBT,WAEvEv7E,KAAK67E,oBAAoBr2E,KAAKxF,KAAKi8E,kDAKvCb,EAAF/5E,UAAA4gC,kBAAE,WACE,MAAOjiC,MAAKkiC,eAAiBliC,KAAKiN,UAIpCmuE,EAAF/5E,UAAAy3B,mBAAE,WAME94B,KAAKsI,mBAAmBygB,iBAI1BqyD,EAAF/5E,UAAAk2B,WAAE,SAAW1zB,GACT7D,KAAKo2B,UAAYvyB,GAInBu3E,EAAF/5E,UAAAm2B,iBAAE,SAAiBC,GACfz3B,KAAKu6B,8BAAgC9C,GAIvC2jD,EAAF/5E,UAAAq2B,kBAAE,SAAkBD,GAChBz3B,KAAKm4C,WAAa1gB,GAIpB2jD,EAAF/5E,UAAAs2B,iBAAE,SAAiBC,GACf53B,KAAKiN,SAAW2qB,GAGlBwjD,EAAF/5E,UAAA+6E,gBAAE,WACE,MAAOp8E,MAAKo2B,QAAU,OAAUp2B,KAAKq8E,cAAgB,QAAU,SAGzDjB,EAAV/5E,UAAA86E,sBAAE,SAA8BG,GAChC,GAAQC,GAAWv8E,KAAK+7E,mBAChBzyE,EAAuBtJ,KAAK0F,YAAYC,aAE5C,IAAI42E,IAAaD,IAGbt8E,KAAK87E,uBAAuBt5E,OAAS,GACvC8G,EAAQoI,UAAUC,OAAO3R,KAAK87E,wBAGhC97E,KAAK87E,uBAAyB97E,KAAKw8E,0CAC/BD,EAAUD,GACdt8E,KAAK+7E,mBAAqBO,EAEtBt8E,KAAK87E,uBAAuBt5E,OAAS,GAAG,CAC1C8G,EAAQoI,UAAUG,IAAI7R,KAAK87E,uBAGjC,IAAYW,GAAiBz8E,KAAK87E,sBAE5B97E,MAAKwI,QAAQmB,kBAAkB,WAC7Bkd,WAAW,WACTvd,EAAQoI,UAAUC,OAAO8qE,IACxB,SAKDrB,EAAV/5E,UAAAg2B,iBAAE,WACF,GAAUlyB,GAAQ,GAAIs2E,GAClBt2E,GAAMgxB,OAASn2B,KACfmF,EAAMixB,QAAUp2B,KAAKo2B,QAErBp2B,KAAKu6B,8BAA8Bv6B,KAAKo2B,SACxCp2B,KAAKuL,OAAO/F,KAAKL,IAInBi2E,EAAF/5E,UAAAy2B,OAAE,WACE93B,KAAKo2B,SAAWp2B,KAAKo2B,SAUvBglD,EAAF/5E,UAAAi2B,cAAE,SAAcnyB,GAAd,GAAFrF,GAAAE,IAQImF,GAAMgyB,kBAGDn3B,KAAKiN,UAAkC,SAAtBjN,KAAK47E,aAkBf57E,KAAKiN,UAAkC,SAAtBjN,KAAK47E,eAGhC57E,KAAKo3B,cAAczxB,cAAcywB,QAAUp2B,KAAKo2B,QAChDp2B,KAAKo3B,cAAczxB,cAAc02E,cAAgBr8E,KAAKq8E,gBApBlDr8E,KAAKq8E,eAAuC,UAAtBr8E,KAAK47E,cAE7B1pE,QAAQC,UAAUC,KAAK,WACrBtS,EAAKm8E,gBAAiB,EACtBn8E,EAAK+7E,oBAAoBr2E,KAAK1F,EAAKm8E,kBAIvCj8E,KAAK83B,SACL93B,KAAKm8E,sBACDn8E,KAAK62B,SAAWmlD,GAAqBV,QAAUU,GAAqBT,WAKxEv7E,KAAKq3B,qBAUT+jD,EAAF/5E,UAAAkG,MAAE,WACEvH,KAAKmV,cAAc0iB,SAAS73B,KAAKo3B,cAAe,aAGlDgkD,EAAF/5E,UAAAq7E,oBAAE,SAAoBv3E,GAIlBA,EAAMgyB,mBAGAikD,EAAV/5E,UAAAm7E,0CAAE,SACID,EAAgCD,GAElC,GAA4B,mBAAxBt8E,KAAKw2B,eACP,MAAO,EAGb,IAAQmmD,GAAqB,EAEzB,QAAQJ,GACN,IAAKP,IAAqBX,KAGxB,GAAIiB,IAAaN,GAAqBV,QACpCqB,EAAa,wBACR,CAAA,GAAIL,GAAYN,GAAqBR,cAG1C,MAAO,EAFPmB,GAAa,0BAIf,KACF,KAAKX,IAAqBT,UACxBoB,EAAaL,IAAaN,GAAqBV,QAC3C,oBAAsB,yBAC1B,MACF,KAAKU,IAAqBV,QACxBqB,EAAaL,IAAaN,GAAqBT,UAC3C,oBAAsB,uBAC1B,MACF,KAAKS,IAAqBR,cACxBmB,EAAaL,IAAaN,GAAqBV,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBqB,kBAtVhCp/E,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,eACEQ,SAAU,q7CACVI,QAAF,g5MACEL,SAAF,cACEE,MACFC,MAAA,eACM45B,OAAN,KACIC,kBAAJ,OACI4jD,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,4BACI5jD,kCAAJ,uCAEAz6B,WAAAy8E,IACAvzE,QAAA,gBAAA,QAAA,YACEtI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FA7GApC,KAAE2Y,EAAAA,eAFF3Y,KAAEuS,EAAAA,SALFvS,KAAQI,OAARC,aAAAL,KAAAM,EAAAA,UAAAC,MAAA,gBAYAP,SAAEsW,GAAFjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAo9E,QA8KA39E,KAAAI,OAAAC,aAAAL,KAAesS,EAAAA,WAAftS,KAAAuW,EAAAA,OAAmChW,MAAnC8mB,EAAAA,4BAGAw2D,EAAAx7E,wHA9DA4uB,KAAAjxB,KAAAS,EAAAA,QAKAq7B,WAAA97B,KAAAS,EAAAA,QAKA4d,gBAAQre,KAARS,EAAAA,QAMAgc,OAAAzc,KAAAS,EAAAA,QAMAuN,SAAAhO,KAAAoJ,EAAAA,SAGAk1E,sBAAAt+E,KAAAoJ,EAAAA,SAGA9C,QAAAtG,KAAAS,EAAAA,QAIAo5B,gBAAA75B,KAAAuJ,EAAAA,UAAAhJ,MAAA,WAGAk/E,SAAAz/E,KAAAuJ,EAAAA,UAAAhJ,MAAAm/E,MAGA7mD,UAAA74B,KAAAS,EAAAA,QAGAiP,WAAA1P,KAAAS,EAAAA,QAmDAq+E,gBAAG9+E,KAAHS,EAAAA,SAgCAo9E,OCjPa8B,IACX//E,QAAS2hE,EAAAA,cACTzhE,YAAaonB,EAAAA,WAAW,WAAM,MAAA04D,MAC9BlnD,OAAO,GAQTknD,GAAA,SAAA7+E,GAAA,QAAA6+E,oDAM6E,MAA3B5+E,GAAlD4+E,EAAA7+E,kBANAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,8HAEVC,WAAYw+E,IACZh+E,MAAOk+E,kBAAmB,4BAE5BD,GAAkDE,EAAAA,2BCnBlDC,GAAA,WAAA,QAAAA,MAKgC,sBALhC//E,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUE,EAAAA,aAAcyV,GAAiBxV,GAAiByV,EAAAA,iBAC1DxV,SAAUs6E,GAAa+B,GAA8Bt8E,IACrDE,cAAeq6E,GAAa+B,QAE9BG,mBCgCE,QAAFC,GAEWpnD,EAEAhd,EAEA8kC,OAAX,KAAAA,IAAWA,GAAX,GAJWj+C,KAAXm2B,OAAWA,EAEAn2B,KAAXmZ,SAAWA,EAEAnZ,KAAXi+C,YAAWA,EACX,MAAAs/B,oBAME,QAAFC,GAAqB93E,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAA83E,MAEaC,GAELntE,EAAWlI,EAAmBhB,EAAco2E,KAAe,WAE7DE,IAAwB,kBAM9B3M,GAAA,WAAA,QAAAA,MAI4B,sBAJ5BxzE,KAACiB,EAAAA,UAADV,OACEW,SAAU,mCACVS,MAAOC,MAAS,uBAElB4xE,KAMAC,GAAA,WAAA,QAAAA,MAIkC,sBAJlCzzE,KAACiB,EAAAA,UAADV,OACEW,SAAU,gDACVS,MAAOC,MAAS,8BAElB6xE,KAKApB,GAAA,SAAAtxE,GA6HE,QAAFsxE,GAAqBlqE,EACC8C,EACRgF,EAEA0H,GAJZ,GAAFpV,GAKIxB,EALJgF,KAAAtD,KAKU0F,IALV1F,WAAqBF,GAArB4F,YAAqBA,EACC5F,EAAtB0I,QAAsBA,EAlFpB1I,EAAFqsD,WAAuB,EAGrBrsD,EAAF69E,oBAAgC,EAsBpB79E,EAAZ0gC,WAAiC,EAuBrB1gC,EAAZ89E,aAAmC,EAUvB99E,EAAZ+9E,YAAkC,EAGvB/9E,EAAXi9B,SAAsB,GAAIl0B,GAAAA,QAGf/I,EAAXk9B,QAAqB,GAAIn0B,GAAAA,QAGJ/I,EAArBs5C,gBACM,GAAIhwC,GAAAA,aAGWtJ,EAArBg+E,UAA6D,GAAI10E,GAAAA,aAG5CtJ,EAArBw6C,QAA2D,GAAIlxC,GAAAA,aAc3DtJ,EAAKi+E,oBAELj+E,EAAKk+E,YAAc,GAAIC,IAAen+E,EAAM0I,EAAS9C,EAAa8H,GAClE1N,EAAKk+E,YAAY3oE,mBAAmB3P,EAAYC,eAChD7F,EAAKwV,aAAeJ,QAkIxB,MArP6B3W,GAA7BqxE,EAAAtxE,GAkBEqF,OAAFC,eAAMgsE,EAANvuE,UAAA,sBAAE,WACE,MAAOrB,MAAKiN,UAAYjN,KAAKkiC,iBAAmBliC,KAAKsV,aAAarI,0CAmBpEtJ,OAAFC,eACMgsE,EADNvuE,UAAA,gBAAE,WAC0B,MAAOrB,MAAKwgC,eACtC,SAAa38B,GACf,GAAUq6E,GAAe5sE,EAAAA,sBAAsBzN,EAEvCq6E,KAAiBl+E,KAAKwgC,YACxBxgC,KAAKwgC,UAAY09C,EACjBl+E,KAAKm+E,6DAMTx6E,OAAFC,eACMgsE,EADNvuE,UAAA,aAAE,WAEE,WAAsBwS,IAAf7T,KAAKi6B,OACRj6B,KAAKi6B,OACLj6B,KAAK0F,YAAYC,cAAc6G,iBAErC,SAAU3I,GAAc7D,KAAKi6B,OAASp2B,mCAStCF,OAAFC,eACMgsE,EADNvuE,UAAA,kBAAE,WAC4B,MAAOrB,MAAK49E,aAAe59E,KAAK29E,wBAC5D,SAAe95E,GACb7D,KAAK49E,YAActsE,EAAAA,sBAAsBzN,oCAO3CF,OAAFC,eACMgsE,EADNvuE,UAAA,iBAAE,WAC2B,MAAOrB,MAAK69E,gBACvC,SAAch6E,GACZ7D,KAAK69E,WAAavsE,EAAAA,sBAAsBzN,oCAqB1CF,OAAFC,eAAMgsE,EAANvuE,UAAA,oBAAE,WACE,MAAOrB,MAAK0vE,WAAa1vE,KAAKmZ,SAASuhB,WAAa,sCAiBtDk1C,EAAFvuE,UAAA08E,kBAAE,WAEE,IAAmB,GAAvBh4B,GAAA,EAAuBq4B,EAAvBV,GAAuB33B,EAAvBq4B,EAAA57E,OAAuBujD,IAAsB,CAApC,GAAM8S,GAAfulB,EAAAr4B,EACM,IAAI/lD,KAAK0F,YAAYC,cAAcgwE,aAAa9c,IAC9C74D,KAAK0F,YAAYC,cAAc04E,QAAQ59D,gBAAkBo4C,EAEzD,WADC74D,MAAK0F,YAAyB,cAAiBgM,UAAUG,IAAIgnD,GAIjE74D,KAAK0F,YAAyB,cAAiBgM,UAAUG,IAAI,sBAGhE+9D,EAAFvuE,UAAAiL,YAAE,WACEtM,KAAK89E,UAAUt4E,MAAM84E,KAAMt+E,OAC3BA,KAAKg+E,YAAYO,wBAInB3O,EAAFvuE,UAAAg5C,OAAE,WACOr6C,KAAKwgC,YACRxgC,KAAKwgC,WAAY,EACjBxgC,KAAKm+E,6BAKTvO,EAAFvuE,UAAAk5C,SAAE,WACMv6C,KAAKwgC,YACPxgC,KAAKwgC,WAAY,EACjBxgC,KAAKm+E,6BAKTvO,EAAFvuE,UAAAm9E,qBAAE,WACOx+E,KAAKwgC,YACRxgC,KAAKwgC,WAAY,EACjBxgC,KAAKm+E,0BAAyB,KAKlCvO,EAAFvuE,UAAAo9E,eAAE,SAAexgC,GAGb,WAHJ,KAAAA,IAAiBA,GAAjB,GACIj+C,KAAKwgC,WAAaxgC,KAAKmZ,SACvBnZ,KAAKm+E,yBAAyBlgC,GACvBj+C,KAAKmZ,UAIdy2D,EAAFvuE,UAAAkG,MAAE,WACOvH,KAAKmsD,YACRnsD,KAAK0F,YAAYC,cAAc4B,QAC/BvH,KAAK+8B,SAASj5B,MAAMw6E,KAAMt+E,QAE5BA,KAAKmsD,WAAY,GASnByjB,EAAFvuE,UAAAsQ,OAAE,WACM3R,KAAK0+E,WACP1+E,KAAKs6C,QAAQ90C,MAAM84E,KAAMt+E,QAK7B4vE,EAAFvuE,UAAAkS,aAAE,SAAapO,GACPnF,KAAKiN,SACP9H,EAAM2F,iBAEN3F,EAAMgyB,mBAKVy4C,EAAFvuE,UAAAoJ,eAAE,SAAetF,GACb,IAAInF,KAAKiN,SAIT,OAAQ9H,EAAMwF,SACZ,IAAKg0E,GAAAA,OACL,IAAKC,GAAAA,UAEH5+E,KAAK2R,SAELxM,EAAM2F,gBACN,MACF,KAAKI,GAAAA,MAEClL,KAAK0vE,YACP1vE,KAAKy+E,gBAAe,GAItBt5E,EAAM2F,mBAKZ8kE,EAAFvuE,UAAAgvE,MAAE,WAAA,GAAFvwE,GAAAE,IAKIA,MAAKwI,QAAQywC,SACV/xB,eACAnlB,KAAKC,EAAAA,KAAK,IACVC,UAAU,WACTnC,EAAK0I,QAAQmE,IAAI,WACf7M,EAAKqsD,WAAY,EACjBrsD,EAAKk9B,QAAQl5B,MAAMw6E,KAAMx+E,SAKzB8vE,EAAVvuE,UAAA88E,yBAAE,SAAiClgC,OAAnC,KAAAA,IAAmCA,GAAnC,GACIj+C,KAAKo5C,gBAAgB5zC,MACnB2wB,OAAQn2B,KACRi+C,YAANA,EACM9kC,SAAUnZ,KAAKwgC,4BAvQrBjjC,KAACiB,EAAAA,UAADV,OACEW,SAAU,yDACVmJ,QAAS,QAAS,WAAY,iBAC9B5I,SAAU,UACVE,MACEC,MAAS,WACT65B,kBAAmB,uBACnB55B,KAAQ,SACRy/E,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7Bz1B,kBAAmB,mBACnBzhD,uBAAwB,sBACxBs9C,uBAAwB,eACxBjlD,UAAW,uBACXs+B,YAAa,yBACbrF,UAAW,UACXmF,SAAU,mDArGdhhC,KAAEC,EAAAA,aAKFD,KAAEuS,EAAAA,SATFvS,KAAQwS,EAAAA,WAuNRxS,SAAAsW,GAAAjW,aAAAL,KAAesS,EAAAA,WAAftS,KAA2BuW,EAAAA,OAA3BhW,MAAkCmY,2BA9ElCgpE,SAAA1hF,KAAGo2B,EAAAA,aAAH71B,MAAgBizE,MAGhBmO,eAAA3hF,KAAGo2B,EAAAA,aAAH71B,MAAgBkzE,MAGhBmO,aAAA5hF,KAAGo2B,EAAAA,aAAH71B,MAAgB2mB,EAAAA,WAAW,WAAM,MAAAqsD,SAGjC33D,WAAA5b,KAAGS,EAAAA,QAaH6F,QAAAtG,KAAGS,EAAAA,QAeH0xE,aAAAnyE,KAAGS,EAAAA,QAUH0gF,YAAAnhF,KAAGS,EAAAA,QAcHo7C,kBAAA77C,KAAGoJ,EAAAA,SAIHm3E,YAAAvgF,KAAGoJ,EAAAA,SAGH2zC,UAAA/8C,KAAGoJ,EAAAA,UAoJHipE,GArP6B6N,IAqQ7B3M,GAAA,WAQE,QAAFA,GAAwBsO,GAAAp/E,KAAxBo/E,YAAwBA,EAexB,MAZEtO,GAAFzvE,UAAAkS,aAAE,SAAapO,GACPnF,KAAKo/E,YAAYV,WACnB1+E,KAAKo/E,YAAYztE,SAQnBxM,EAAMgyB,kCArBV55B,KAACiB,EAAAA,UAADV,OACEW,SAAU,kBACVS,MACEC,MAAS,yCACTgB,UAAW,gEAIf5C,KAAqCqyE,MAerCkB,KClYaH,GACT,GAAIxgE,GAAAA,eAAuC,2CrB8B7C,QAAFkvE,GAAqBvoC,EACAC,EACAC,EAEAC,GAJAj3C,KAArB82C,0BAAqBA,EACA92C,KAArB+2C,YAAqBA,EACA/2C,KAArBg3C,iBAAqBA,EAEAh3C,KAArBi3C,UAAqBA,EACrB,MAAAooC,MACaC,GACTnoC,EAAgBkoC,IAIhBxpD,GAAe,gBAIjB,QAAF0pD,GAEWppD,EAEAtyB,GAFA7D,KAAXm2B,OAAWA,EAEAn2B,KAAX6D,MAAWA,EACX,MAAA07E,MAMA/P,GAAA,SAAAlxE,GAiQE,QAAFkxE,GAAwB9pE,EACF4C,EACYxC,EACRixC,EACAC,EACZF,EAE2BG,GAPvC,GAAFn3C,GAQIxB,EARJgF,KAAAtD,KAQU82C,EAA2BC,EAAaC,EAAkBC,IARpEj3C,WAAwBF,GAAxB4F,YAAwBA,EACF5F,EAAtBwI,mBAAsBA,EACYxI,EAAlCgG,KAAkCA,EAKOhG,EAAzCm3C,UAAyCA,EAtO9Bn3C,EAAX64C,YAAiC,gBAOvB74C,EAAV0/E,wBAAmD,KAGzC1/E,EAAV8I,WAAuB,GAAIC,GAAAA,QAkBzB/I,EAAFi4C,KAAiB,iBAAiBliB,KAMhC/1B,EAAF2/E,UAAc,EAMZ3/E,EAAF4/E,cAAiC,KAM/B5/E,EAAFq4C,WAAe,aAGbr4C,EAAFo4C,UAAoC,aAqB1Bp4C,EAAV63C,WAA+B,EAgBrB73C,EAAV83C,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAgC1Ch4C,EAAZ82B,WAAiC,EA6CrB92B,EAAZ6gC,WAAiC,EAGJ7gC,EAA7B2vE,gBAA0E,aAe9D3vE,EAAZ89E,aAAmC,EA6Bd99E,EAArByL,OACM,GAAInC,GAAAA,aAOWtJ,EAArBslB,YAAsD,GAAIhc,GAAAA,aAclDtJ,EAAKm3C,YACPn3C,EAAKm3C,UAAUoC,cAAgBv5C,KAZrC,MAnOiCvB,GAAjCixE,EAAAlxE,GA4DEqF,OAAFC,eAAM4rE,EAANnuE,UAAA,gBAAE,WACE,MAAOrB,MAAK+5C,SAAW/5C,KAAKy5C,gBAAgBtgC,SAAWnZ,KAAKy5C,gBAAgBtgC,SAAS,oCAIvFxV,OAAFC,eAAM4rE,EAANnuE,UAAA,YAAE,WAA4B,MAAOrB,MAAKi7C,MAAQ,KAAO,2CAMvDt3C,OAAFC,eACM4rE,EADNnuE,UAAA,gBAAE,WAC0B,MAAOrB,MAAK23C,eACtC,SAAa9zC,GACX7D,KAAK23C,UAAYrmC,EAAAA,sBAAsBzN,oCASzCF,OAAFC,eACM4rE,EADNnuE,UAAA,mBAAE,WACmD,MAAOrB,MAAK43C,kBAC/D,SAAgBngB,GACdz3B,KAAK43C,aAAengB,EAChBz3B,KAAKy5C,iBAEPz5C,KAAK45C,wDASTj2C,OAAFC,eACM4rE,EADNnuE,UAAA,aAAE,WACmB,MAAOrB,MAAKi6B,YAC/B,SAAUp2B,GACR7D,KAAKu3B,WAAW1zB,GAChB7D,KAAKi6B,OAASp2B,mCAQhBF,OAAFC,eAAM4rE,EAANnuE,UAAA,UAAE,WACE,MAAOrB,MAAK2/E,WAAa3/E,KAAK2/E,WAAWnxD,GAAKxuB,KAAK+3C,sCAOrDp0C,OAAFC,eACM4rE,EADNnuE,UAAA,gBAAE,WAC0B,MAAOrB,MAAK42B,eACtC,SAAa/yB,GACX7D,KAAK42B,UAAYtlB,EAAAA,sBAAsBzN,GACvC7D,KAAKw5C,aAAa11C,wCAQpBH,OAAFC,eACM4rE,EADNnuE,UAAA,mBAAE,WAEE,MAAOrB,MAAK2/E,WAAa3/E,KAAK2/E,WAAWz/B,YAAclgD,KAAKu5C,kBAE9D,SAAgB11C,GACd7D,KAAKu5C,aAAe11C,EACpB7D,KAAKw5C,aAAa11C,wCAKpBH,OAAFC,eAAM4rE,EAANnuE,UAAA,eAAE,WACE,MAAQrB,MAAK2/E,YAAc3/E,KAAK2/E,WAAW7P,SAAY9vE,KAAK4/E,mDAO9Dj8E,OAAFC,eAAM4rE,EAANnuE,UAAA,aAAE,WACE,QAASrB,KAAK2/E,YAAc3/E,KAAK2/E,WAAW1kC,QAAgC,IAAtBj7C,KAAK2vE,MAAMntE,wCAOnEmB,OAAFC,eAAM4rE,EAANnuE,UAAA,wBAAE,WAAkC,OAAQrB,KAAKi7C,OAASj7C,KAAK8vE,yCAM7DnsE,OAAFC,eACM4rE,EADNnuE,UAAA,gBAAE,WAC0B,MAAOrB,MAAKi3C,YAAcj3C,KAAKi3C,UAAUhqC,SAAWjN,KAAK2gC,eACnF,SAAa98B,GACX7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,GACvC7D,KAAK6/E,2DAWPl8E,OAAFC,eACM4rE,EADNnuE,UAAA,kBAAE,WAC4B,MAAOrB,MAAK49E,iBACxC,SAAe/5E,GAAf,GAAF/D,GAAAE,IACIA,MAAK49E,YAActsE,EAAAA,sBAAsBzN,GAErC7D,KAAK2vE,OACP3vE,KAAK2vE,MAAMxtE,QAAQ,SAAAm8E,GAAQ,MAAAA,GAAKX,mBAAqB79E,EAAK89E,+CAK9Dj6E,OAAFC,eACM4rE,EADNnuE,UAAA,gBAAE,SACawC,GACX7D,KAAK0/E,cAAgB77E,EACrB7D,KAAKy/E,UAAY57E,mCAInBF,OAAFC,eAAM4rE,EAANnuE,UAAA,4BAAE,WACE,MAAOkD,GAAAA,MAAXxE,UAAA,GAAoBC,KAAK2vE,MAAMnrE,IAAI,SAAA85E,GAAQ,MAAAA,GAAKllC,oDAI9Cz1C,OAAFC,eAAM4rE,EAANnuE,UAAA,wBAAE,WACE,MAAOkD,GAAAA,MAAXxE,UAAA,GAAoBC,KAAK2vE,MAAMnrE,IAAI,SAAA85E,GAAQ,MAAAA,GAAKvhD,6CAI9Cp5B,OAAFC,eAAM4rE,EAANnuE,UAAA,uBAAE,WACE,MAAOkD,GAAAA,MAAXxE,UAAA,GAAoBC,KAAK2vE,MAAMnrE,IAAI,SAAA85E,GAAQ,MAAAA,GAAKthD,4CAI9Cr5B,OAAFC,eAAM4rE,EAANnuE,UAAA,yBAAE,WACE,MAAOkD,GAAAA,MAAXxE,UAAA,GAAoBC,KAAK2vE,MAAMnrE,IAAI,SAAA85E,GAAQ,MAAAA,GAAKR,8CA+B9CtO,EAAFnuE,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,IACIA,MAAK6J,YAAc,GAAI8B,GAAAA,gBAAyB3L,KAAK2vE,OAClD9jE,WACA8xC,0BACA/xC,0BAA0B5L,KAAK8F,KAAO9F,KAAK8F,KAAKjC,MAAQ,OAEvD7D,KAAK8F,MACP9F,KAAK8F,KAAKyF,OACPxJ,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aACpB3G,UAAU,SAAAgE,GAAO,MAAAnG,GAAK+J,YAAY+B,0BAA0B3F,KAKjEjG,KAAK6J,YAAYg0C,OAAO97C,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aAAa3G,UAAU,WACjEnC,EAAK2/E,WAAa,EAClB54D,WAAW,WACT/mB,EAAK2/E,UAAY3/E,EAAK4/E,eAAiB,EACvC5/E,EAAKwI,mBAAmB6B,mBAK5BnK,KAAK2vE,MAAMxrE,QAAQpC,KAAKqiB,EAAAA,UAAU,MAAO3a,EAAAA,UAAUzJ,KAAK4I,aAAa3G,UAAU,WACzEnC,EAAKmN,UAGPiF,QAAQC,UAAUC,KAAK,WACrBtS,EAAK+/E,4BAIT//E,EAAKggF,cAGLhgF,EAAK85C,uBAGL95C,EAAKigF,kBAGLjgF,EAAKkgF,gCAELlgF,EAAK05C,aAAa11C,UAItB0rE,EAAFnuE,UAAAmiB,SAAE,WACExjB,KAAKy5C,gBAAkB,GAAIK,GAAAA,eAAwB95C,KAAK+5C,aAAUlmC,IAAW,GAC7E7T,KAAKw5C,aAAa11C,QAGpB0rE,EAAFnuE,UAAA6kC,UAAE,WACMlmC,KAAKi3C,WAIPj3C,KAAKy6C,oBAIT+0B,EAAFnuE,UAAAiL,YAAE,WACEtM,KAAK4I,WAAW9E,OAChB9D,KAAK4I,WAAW5D,WAChBhF,KAAKw5C,aAAax0C,WAElBhF,KAAKigF,sBAKPzQ,EAAFnuE,UAAA8uE,cAAE,SAAc+P,GACZlgF,KAAK2/E,WAAaO,GAOpB1Q,EAAFnuE,UAAA2gD,kBAAE,SAAkBC,GAAiBjiD,KAAKkiD,iBAAmBD,EAAI5G,KAAK,MAGpEm0B,EAAFnuE,UAAAk2B,WAAE,SAAW1zB,GACL7D,KAAK2vE,OACP3vE,KAAKg7C,qBAAqBn3C,GAAO,IAKrC2rE,EAAFnuE,UAAAm2B,iBAAE,SAAiBC,GACfz3B,KAAKk4C,UAAYzgB,GAInB+3C,EAAFnuE,UAAAq2B,kBAAE,SAAkBD,GAChBz3B,KAAKm4C,WAAa1gB,GAIpB+3C,EAAFnuE,UAAAs2B,iBAAE,SAAiBC,GACf53B,KAAKiN,SAAW2qB,EAChB53B,KAAKw5C,aAAa11C,QAOpB0rE,EAAFnuE,UAAA8gD,iBAAE,SAAiBh9C,GACVnF,KAAKmgF,oBAAoBh7E,IAC5BnF,KAAKuH,SAQTioE,EAAFnuE,UAAAkG,MAAE,WACMvH,KAAKiN,UAMLjN,KAAK2/E,YAAc3/E,KAAK2/E,WAAW7P,UAE5B9vE,KAAK2vE,MAAMntE,OAAS,GAC7BxC,KAAK6J,YAAYgB,qBACjB7K,KAAKw5C,aAAa11C,SAElB9D,KAAKogF,cACLpgF,KAAKw5C,aAAa11C,UAKtB0rE,EAAFnuE,UAAA++E,YAAE,WACMpgF,KAAK2/E,YACP3/E,KAAK2/E,WAAWp4E,SAOpBioE,EAAFnuE,UAAAmlE,SAAE,SAASrhE,GACX,GAAUiqC,GAASjqC,EAAY,MAGvBA,GAAMwF,UAAYi0E,EAAAA,WAAa5+E,KAAKqgF,cAAcjxC,IACpDpvC,KAAK6J,YAAYmB,oBACjB7F,EAAM2F,kBACGskC,GAAUA,EAAO19B,UAAUgG,SAAS,cACzCvS,EAAMwF,UAAYC,EAAAA,MACpB5K,KAAK6J,YAAYgB,qBACjB1F,EAAM2F,kBACG3F,EAAMwF,UAAYI,EAAAA,KAC3B/K,KAAK6J,YAAYmB,oBACjB7F,EAAM2F,kBAEN9K,KAAK6J,YAAYuB,UAAUjG,GAG7BnF,KAAKw5C,aAAa11C,SAQZ0rE,EAAZnuE,UAAA0+E,gBAAE,WAEE//E,KAAKy/E,UAAYz/E,KAAK0/E,gBAAwC,IAAtB1/E,KAAK2vE,MAAMntE,QAAgB,EAAI,IAO/DgtE,EAAZnuE,UAAA2+E,8BAAE,WACE,GAAoC,MAAhChgF,KAAKw/E,yBAAmCx/E,KAAK2vE,MAAMntE,OAAQ,CACnE,GAAY89E,GAAezyE,KAAK2B,IAAIxP,KAAKw/E,wBAAyBx/E,KAAK2vE,MAAMntE,OAAS,EAChFxC,MAAK6J,YAAYiD,cAAcwzE,GAGjCtgF,KAAKw/E,wBAA0B,MASzBhQ,EAAVnuE,UAAAwL,cAAE,SAAsBxK,GACpB,MAAOA,IAAS,GAAKA,EAAQrC,KAAK2vE,MAAMntE,QAGlCgtE,EAAVnuE,UAAAg/E,cAAE,SAAsB/2E,GACpB,GAAIA,GAA8C,UAAnCA,EAAQq7C,SAASlkC,cAA2B,CAEzD,OADS,EACK5c,MAGhB,OAAO,GAGT2rE,EAAFnuE,UAAA25C,qBAAE,SAAqBn3C,EAAYo6C,GAAjC,GAAFn+C,GAAAE,IAII,QAJJ,KAAAi+C,IAAmCA,GAAnC,GACIj+C,KAAKugF,kBACLvgF,KAAK2vE,MAAMxtE,QAAQ,SAAAm8E,GAAQ,MAAAA,GAAK/jC,aAE5B34C,MAAMC,QAAQgC,GAChBA,EAAM1B,QAAQ,SAAA+6C,GAAgB,MAAAp9C,GAAKq9C,aAAaD,EAAce,KAC9Dj+C,KAAKo9C,kBACA,CACX,GAAYojC,GAAoBxgF,KAAKm9C,aAAat5C,EAAOo6C,EAI/CuiC,IACEviC,GACFj+C,KAAK6J,YAAYiD,cAAc0zE,KAU/BhR,EAAVnuE,UAAA87C,aAAE,SAAqBt5C,EAAYo6C,GAAjC,GAAFn+C,GAAAE,SAAA,KAAAi+C,IAAmCA,GAAnC,EAEA,IAAUuiC,GAAoBxgF,KAAK2vE,MAAMl7D,KAAK,SAAA6pE,GACxC,MAAqB,OAAdA,EAAKz6E,OAAiB/D,EAAK83C,aAAa0mC,EAAKz6E,MAAQA,IAQ9D,OALI28E,KACFviC,EAAcuiC,EAAkBhC,uBAAyBgC,EAAkBnmC,SAC3Er6C,KAAKy5C,gBAAgBY,OAAOmmC,IAGvBA,GAGDhR,EAAVnuE,UAAAu4C,qBAAE,WAAA,GAAF95C,GAAAE,IAGIkS,SAAQC,UAAUC,KAAK,YACjBtS,EAAKm3C,WAAan3C,EAAKm6B,UACzBn6B,EAAKk7C,qBAAqBl7C,EAAKm3C,UAAYn3C,EAAKm3C,UAAUpzC,MAAQ/D,EAAKm6B,QAAQ,GAC/En6B,EAAK05C,aAAa11C,WAShB0rE,EAAVnuE,UAAAk/E,gBAAE,SAAwBE,GACtBzgF,KAAKy5C,gBAAgBltB,QACrBvsB,KAAK2vE,MAAMxtE,QAAQ,SAAAm8E,GACbA,IAASmC,GACXnC,EAAK/jC,aAGTv6C,KAAKw5C,aAAa11C,QAOZ0rE,EAAVnuE,UAAA+7C,YAAE,WAAA,GAAFt9C,GAAAE,IACQA,MAAK23C,YACP33C,KAAKy5C,gBAAgBltB,QAErBvsB,KAAK2vE,MAAMxtE,QAAQ,SAAAm8E,GACbA,EAAKnlE,UACPrZ,EAAK25C,gBAAgBY,OAAOikC,KAGhCt+E,KAAKw5C,aAAa11C,SAKd0rE,EAAVnuE,UAAAg9C,kBAAE,SAA0BG,GAC5B,GAAQC,GAAmB,IAGrBA,GADE78C,MAAMC,QAAQ7B,KAAKmZ,UACPnZ,KAAKmZ,SAAS3U,IAAI,SAAA85E,GAAQ,MAAAA,GAAKz6E,QAE/B7D,KAAKmZ,SAAWnZ,KAAKmZ,SAAStV,MAAQ26C,EAEtDx+C,KAAKi6B,OAASwkB,EACdz+C,KAAKuL,OAAO/F,KAAK,GAAI+5E,IAAkBv/E,KAAMy+C,IAC7Cz+C,KAAKolB,YAAY5f,KAAKi5C,GACtBz+C,KAAKk4C,UAAUuG,GACfz+C,KAAKsI,mBAAmB6B,gBAI1BqlE,EAAFnuE,UAAAgvE,MAAE,WAAA,GAAFvwE,GAAAE,IACSA,MAAK4/E,mBACR5/E,KAAK6J,YAAYiD,eAAe,GAG7B9M,KAAKiN,WACJjN,KAAK2/E,WAKP94D,WAAW,WACJ/mB,EAAKgwE,SACRhwE,EAAK4gF,mBAKT1gF,KAAK0gF,mBAMXlR,EAAFnuE,UAAAq/E,eAAE,WACE1gF,KAAKm4C,aACLn4C,KAAKsI,mBAAmB6B,eACxBnK,KAAKw5C,aAAa11C,QAGZ0rE,EAAVnuE,UAAAy+E,YAAE,WACE9/E,KAAKigF,qBACLjgF,KAAK2gF,sBACL3gF,KAAK4gF,0BACL5gF,KAAK6gF,yBAGCrR,EAAVnuE,UAAA4+E,mBAAE,WACMjgF,KAAK8gF,yBACP9gF,KAAK8gF,uBAAuBruE,cAC5BzS,KAAK8gF,uBAAyB,MAG5B9gF,KAAK+gF,wBACP/gF,KAAK+gF,sBAAsBtuE,cAC3BzS,KAAK+gF,sBAAwB,MAG3B/gF,KAAKghF,6BACPhhF,KAAKghF,2BAA2BvuE,cAChCzS,KAAKghF,2BAA6B,MAGhChhF,KAAKihF,0BACPjhF,KAAKihF,wBAAwBxuE,cAC7BzS,KAAKihF,wBAA0B,OAK3BzR,EAAVnuE,UAAAu/E,wBAAE,WAAA,GAAF9gF,GAAAE,IACIA,MAAKghF,2BAA6BhhF,KAAKkhF,qBAAqBj/E,UAAU,SAAAkD,GACpEA,EAAMgxB,OAAOhd,SACTrZ,EAAK25C,gBAAgBY,OAAOl1C,EAAMgxB,QAClCr2B,EAAK25C,gBAAgBc,SAASp1C,EAAMgxB,QAGnCr2B,EAAKi6C,UACRj6C,EAAK6vE,MAAMxtE,QAAQ,SAAAm8E,IACZx+E,EAAK25C,gBAAgB2E,WAAWkgC,IAASA,EAAKnlE,UACjDmlE,EAAK/jC,aAKPp1C,EAAM84C,aACRn+C,EAAKu+C,uBAMHmxB,EAAVnuE,UAAAs/E,oBAAE,WAAA,GAAF7gF,GAAAE,IACIA,MAAK8gF,uBAAyB9gF,KAAKmhF,iBAAiBl/E,UAAU,SAAAkD,GAClE,GAAUi8E,GAAoBthF,EAAK6vE,MAAM3iE,UAAU2T,QAAQxb,EAAMm5E,KAEvDx+E,GAAK+M,cAAcu0E,IACrBthF,EAAK+J,YAAYC,sBAAsBs3E,GAEzCthF,EAAK05C,aAAa11C,SAGpB9D,KAAK+gF,sBAAwB/gF,KAAKqhF,gBAAgBp/E,UAAU,WAC1DnC,EAAKuwE,QACLvwE,EAAK05C,aAAa11C,UAId0rE,EAAVnuE,UAAAw/E,sBAAE,WAAA,GAAF/gF,GAAAE,IACIA,MAAKihF,wBAA0BjhF,KAAKshF,kBAAkBr/E,UAAU,SAAAkD,GACpE,GAAYm5E,GAAOn5E,EAAMm5E,KACb8C,EAAYthF,EAAK6vE,MAAM3iE,UAAU2T,QAAQxb,EAAMm5E,KAKjDx+E,GAAK+M,cAAcu0E,IAAc9C,EAAKnyB,YACxCrsD,EAAK0/E,wBAA0B4B,MAM7B5R,EAAVnuE,UAAA8+E,oBAAE,SAA4Bh7E,GAG1B,IAFJ,GAAQo8E,GAAiBp8E,EAAY,OAE1Bo8E,GAAkBA,IAAmBvhF,KAAK0F,YAAYC,eAAe,CAC1E,GAAI47E,EAAe7vE,UAAUgG,SAAS,YACpC,OAAO,CAGT6pE,GAAiBA,EAAe/L,cAGlC,OAAO,GAIDhG,EAAVnuE,UAAAu+E,gBAAE,WACE,MAAO5/E,MAAK2vE,MAAM93D,KAAK,SAAAymE,GAAQ,MAAAA,GAAKnyB,aAI9BqjB,EAAVnuE,UAAAw+E,wBAAE,WAAA,GAAF//E,GAAAE,IACQA,MAAK2vE,OACP3vE,KAAK2vE,MAAMxtE,QAAQ,SAAAm8E,GACjBA,EAAKrxE,SAAWnN,EAAK6gC,4BAzsB7BpjC,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,gBACEQ,SAAU,qEACVD,SAAU,cACVE,MACF85B,kBAAyB,8BACnB2pB,0BAAN,2BACIJ,uBAAJ,sBACIz6C,uBAAJ,sBACI06C,sBAAJ,aACIE,8BAAJ,WACI7pC,cAAJ,OACI2oE,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClCxiD,0BAAJ,kBACI//B,MAAJ,gBACIi6B,UAAJ,UACImF,SAAJ;mBACIE,YAAJ,mBACI1F,OAAQ,QAEZr6B,YAAAvB,QAAA8lD,GAAA5lD,YAAAmyE,IACAnwE,QAAA,6uFACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FA9EApC,KAAEqS,EAAAA,eAAFhS,aAAAL,KAAAsS,EAAAA,aAJAtS,KAAE4lD,EAAAA,OAAFvlD,aAAAL,KAAAsS,EAAAA,aAPAtS,KAAQ6lD,EAAAA,mBAARxlD,aAAAL,KAAAsS,EAAAA,aAsBAtS,KAA6Dqd,KAA7Drd,KAA8B+lD,EAAAA,UAA9B1lD,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAs4C,EAAAA,UAAA25B,EAAkD5vE,6EA2IlDgkD,cAAArmD,KAAAS,EAAAA,QAGA6F,QAAAtG,KAAAS,EAAAA,QAYAq7B,WAAA97B,KAAAS,EAAAA,QAeAkiD,cAAG3iD,KAAHS,EAAAA,QAoBAiP,WAAA1P,KAAGS,EAAAA,QAYHyxE,kBAAAlyE,KAAAS,EAAAA,MAAAF,MAAA,sBAiCA4xE,aAAAnyE,KAAAS,EAAAA,QASAkP,WAAA3P,KAAAS,EAAAA,QAMAuN,SAAAhO,KAAAoJ,EAAAA,SAWAye,cAAA7nB,KAAAoJ,EAAAA,SA2BAgpE,QAAApyE,KAAAW,EAAAA,gBAAAJ,MAAA8xE,OAWAJ,OC/SI35C,GAAe,EAMnBg6C,GAAA,WAmEE,QAAFA,GACcnqE,EACiC0iC,GADjCpoC,KAAd0F,YAAcA,EACiC1F,KAA/CooC,gBAA+CA,EApD7CpoC,KAAF8vE,SAAqB,EAkBnB9vE,KAAF+vE,YAAwB,EAQtB/vE,KAAFgwE,kBAA8ChwE,KAAKooC,gBAAgB4nC,kBAIjEhwE,KAAFiwE,QAA6C,GAAI7mE,GAAAA,aAGtCpJ,KAAXkgD,YAAiC,GAGtBlgD,KAAXwuB,GAAwB,uBAAuBqH,KAMrC71B,KAAV2gC,WAA+B,EAW3B3gC,KAAKo3B,cAAgBp3B,KAAK0F,YAAyB,cAgEvD,MAjHE/B,QAAFC,eACMisE,EADNxuE,UAAA,gBAAE,SACawC,GACPA,IACF7D,KAAKkwE,UAAYrsE,EACjB7D,KAAKkwE,UAAUC,cAAcnwE,wCAOjC2D,OAAFC,eACMisE,EADNxuE,UAAA,iBAAE,WAC2B,MAAOrB,MAAK+vE,gBACvC,SAAclsE,GAAkB7D,KAAK+vE,WAAaz+D,EAAAA,sBAAsBzN,oCAsBxEF,OAAFC,eACMisE,EADNxuE,UAAA,gBAAE,WAC0B,MAAOrB,MAAK2gC,WAAc3gC,KAAKkwE,WAAalwE,KAAKkwE,UAAUjjE,cACrF,SAAapJ,GAAkB7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,oCAItEF,OAAFC,eAAMisE,EAANxuE,UAAA,aAAE,WAAuB,OAAQrB,KAAKo3B,cAAcvzB,uCAWlDgsE,EAAFxuE,UAAAiiB,YAAE,WACEtjB,KAAKkwE,UAAU12B,aAAa11C,QAI9B+rE,EAAFxuE,UAAAmlE,SAAE,SAASrhE,GACPnF,KAAKowE,aAAajrE,IAIpB0qE,EAAFxuE,UAAAgvE,MAAE,WACMrwE,KAAKswE,WACPtwE,KAAKowE,eAEPpwE,KAAK8vE,SAAU,EAEV9vE,KAAKkwE,UAAUJ,SAClB9vE,KAAKkwE,UAAUG,QAEjBrwE,KAAKkwE,UAAU12B,aAAa11C,QAG9B+rE,EAAFxuE,UAAAkvE,OAAE,WACEvwE,KAAK8vE,SAAU,EACf9vE,KAAKkwE,UAAU12B,aAAa11C,QAI9B+rE,EAAFxuE,UAAA+uE,aAAE,SAAajrE,IACNnF,KAAKo3B,cAAcvzB,OAAWsB,GACjCnF,KAAKkwE,UAAU1J,SAASrhE,GAErBA,IAASnF,KAAKwwE,gBAAgBrrE,KACjCnF,KAAKiwE,QAAQzqE,MAAO2f,MAAOnlB,KAAKo3B,cAAevzB,MAAO7D,KAAKo3B,cAAcvzB,QAErEsB,GACFA,EAAM2F,mBAKZ+kE,EAAFxuE,UAAAkgE,SAAE,WAEEvhE,KAAKkwE,UAAU12B,aAAa11C,QAI9B+rE,EAAFxuE,UAAAkG,MAAE,WACEvH,KAAKo3B,cAAc7vB,SAIbsoE,EAAVxuE,UAAAmvE,gBAAE,SAAwBrrE,GACtB,GAAIuF,EAAAA,eAAevF,GACjB,OAAO,CAGb,IAAUsrE,GAAazwE,KAAKgwE,kBAClBrlE,EAAUxF,EAAMwF,OACtB,OAAO/I,OAAMC,QAAQ4uE,GAAcA,EAAW9vD,QAAQhW,IAAY,EAAI8lE,EAAW/hD,IAAI/jB,mBApIzFpN,KAACiB,EAAAA,UAADV,OACEW,SAAU,yBACVO,SAAU,gCACVE,MACEC,MAAS,mCACTs/B,YAAa,mBACbF,SAAU,UACVnF,UAAW,WACX6oC,UAAW,aACXlpC,OAAQ,KACRwwB,kBAAmB,mBACnBmnB,qBAAsB,sBACtBluB,sBAAuB,iHAnC3BjlD,KAAmBC,EAAAA,aA4FnBD,SAAAsW,GAAAjW,aAAAL,KAAKuW,EAAAA,OAALhW,MAAY6yE,2BAhDZC,WAAArzE,KAAGS,EAAAA,MAAHF,MAAS,qBAWTwyE,YAAA/yE,KAAGS,EAAAA,MAAHF,MAAS,2BAUTkyE,oBAAAzyE,KAAGS,EAAAA,MAAHF,MAAS,mCAITmyE,UAAA1yE,KAAGoJ,EAAAA,OAAH7I,MAAU,0BAIVoiD,cAAA3iD,KAAGS,EAAAA,QAGHwwB,KAAAjxB,KAAGS,EAAAA,QAGHiP,WAAA1P,KAAGS,EAAAA,SA8EH6xE,KCtJMgB,IACJrB,GACAI,GACAC,GACAiB,GACAC,GACAC,IAUFpY,IACQoX,mBAAoB/kE,EAAAA,QAR5BgmE,GAAA,WAAA,QAAAA,MAa6B,sBAb7B1zE,KAACkD,EAAAA,SAAD3C,OACEgD,QAAS+vE,GACT9vE,aAAc8vE,GACdnyE,WACEkc,IAEEzd,QAASwzE,GACT7K,SAAQ,SAMdmL,mBCLA,QAAAC,KAcElxE,KAAFZ,KAAsB,SAGpBY,KAAFkpB,WAAmC,GAGjClpB,KAAFoyC,aAA0B,EAGxBpyC,KAAFi0C,cAA2B,GAGzBj0C,KAAF0jC,cAA2B,EAGzB1jC,KAAF+iB,MAAmB,GAGjB/iB,KAAFoT,OAAoB,GASlBpT,KAAFmxE,SAA+B,OAS7BnxE,KAAF+D,KAAoB,KAMlB/D,KAAFoxE,gBAAoC,KAGlCpxE,KAAF4jB,UAA8B,KAG5B5jB,KAAFgkC,WAAwB,EAMtBhkC,KAAFqxE,cAA2B,EAUzBrxE,KAAFsxE,mBAAgC,EAGhC,MAAAJ,MClGMK,IAIJ/3D,EAAAA,MAAM,aAAc7L,EAAAA,OAAOqa,QAAS,EAAGpa,UAAW,gBAClD4L,EAAAA,MAAM,QAAS7L,EAAAA,OAAOC,UAAW,UACjC8L,EAAAA,WAAW,aAAcC,EAAAA,QAAQ,mCAC7BhM,EAAAA,OAAOC,UAAW,OAAQoa,QAAS,MACvCtO,EAAAA,WAAW,uBACPC,EAAAA,QAAQ,sCAAuChM,EAAAA,OAAOqa,QAAS,OAOxDwpD,IAKXC,gBAAiBl4D,EAAAA,QAAQ,kBAAmBg4D,IAG5CG,YAAan4D,EAAAA,QAAQ,cAAeg4D,KCQtCI,GAAA,SAAArzE,GA8CE,QAAFqzE,GACYjsE,EACAo9B,EACAx6B,EAC8B4O,EAE/B2T,GANT,GAAF/qB,GAQIxB,EARJgF,KAAAtD,OAAAA,WACYF,GAAZ4F,YAAYA,EACA5F,EAAZgjC,kBAAYA,EACAhjC,EAAZwI,mBAAYA,EAC8BxI,EAA1CoX,UAA0CA,EAE/BpX,EAAX+qB,QAAWA,EApBD/qB,EAAV8xE,qCAAqE,KAGnE9xE,EAAF+xE,OAAsC,QAGpC/xE,EAAFgyE,uBAA2B,GAAI1oE,GAAAA,aAG7BtJ,EAAFiyE,gBAAmC,OAfnC,MAFwCxzE,GAAxCozE,EAAArzE,GAqCEqzE,EAAFtwE,UAAAgnB,sBAAE,SAAyBC,GAMvB,MALItoB,MAAKyoB,cAAcpE,eACrB2tD,IAGFhyE,KAAKiyE,gCACEjyE,KAAKyoB,cAAcJ,sBAAsBC,IAOlDqpD,EAAFtwE,UAAAqnB,qBAAE,SAAwBJ,GAMtB,MALItoB,MAAKyoB,cAAcpE,eACrB2tD,IAGFhyE,KAAKiyE,gCACEjyE,KAAKyoB,cAAcC,qBAAqBJ,IAIzCqpD,EAAVtwE,UAAAkiC,WAAE,WACOvjC,KAAKsjC,aACRtjC,KAAKsjC,WAAatjC,KAAK8iC,kBAAkB1V,OAAOptB,KAAK0F,YAAYC,gBAM/D3F,KAAK6qB,QAAQmZ,WACfhkC,KAAKsjC,WAAWW,gCAKZ0tC,EAAVtwE,UAAAmiC,cAAE,WACF,GAAU0uC,GAAUlyE,KAAK4xE,oCAGjB5xE,MAAK6qB,QAAQwmD,cAAgBa,GAAoC,kBAAlBA,GAAQ3qE,OACzD2qE,EAAQ3qE,QAGNvH,KAAKsjC,YACPtjC,KAAKsjC,WAAWmB,WAKZktC,EAAVtwE,UAAA4wE,8BAAE,WAAA,GAAFnyE,GAAAE,IACQA,MAAKkX,YACPlX,KAAK4xE,qCAAuC5xE,KAAKkX,UAAuB,cAGpElX,KAAK0F,YAAYC,cAAc4B,OAIjC2K,QAAQC,UAAUC,KAAK,WAAM,MAAAtS,GAAK4F,YAAYC,cAAc4B,YAMlEoqE,EAAFtwE,UAAA2pD,iBAAE,SAAiB7lD,GACO,UAAlBA,EAAMG,QACRtF,KAAKujC,aACsB,SAAlBp+B,EAAMG,SACftF,KAAKwjC,gBAGPxjC,KAAK8xE,uBAAuBtsE,KAAKL,IAInCwsE,EAAFtwE,UAAA4pD,kBAAE,SAAkB9lD,GAChBnF,KAAK8xE,uBAAuBtsE,KAAKL,IAInCwsE,EAAFtwE,UAAA8wE,oBAAE,WACEnyE,KAAK6xE,OAAS,OAId7xE,KAAKsI,mBAAmB6B,+BApJ5B5M,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,uBACEQ,SAAU,8CACVI,QAAF,ioCACEC,cAAFC,EAAAA,kBAAAC,uFAKEN,MACFC,MAAe,uBACT8lD,SAAN,KACImtB,aAAJ,OACIhwB,YAAJ,MACIvpC,cAAJ,eACIypC,yBAAJ,6CACID,oBAAJ,oBACIM,0BAAJ,kCACI0vB,qBAAJ,SACIC,2BAAJ,4BACIC,0BAAJ,kHAxDAh1E,KAAEkJ,EAAAA,oBAmBFlJ,SAAmBsW,GAAnBjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAoa,EAAAA,cAdA3a,KAAE2zE,MAeFS,EAAA/xE,6EA2CA+xE,uBCtDInN,GAAW,gBAwBb,QAAFgO,GACY5sD,EACD6sD,EAEPtZ,EACS3qC,OAAb,KAAAA,IAAaA,EAAb,cAAwCg2C,KALtC,IAAF1kE,GAAAE,IACYA,MAAZ4lB,YAAYA,EACD5lB,KAAXyyE,mBAAWA,EAGEzyE,KAAbwuB,GAAaA,EAnBXxuB,KAAF0jC,aAAsC1jC,KAAKyyE,mBAAmB5nD,QAAQ6Y,aAGnD1jC,KAAnB8lB,aAAkC,GAAIjd,GAAAA,QAGnB7I,KAAnB0yE,aAAkC,GAAI7pE,GAAAA,QAGnB7I,KAAnB2yE,cAAmC,GAAI9pE,GAAAA,QAanC4pE,EAAmB54B,IAAMrrB,EAGzBikD,EAAmBX,uBAAuB/vE,KACxC0V,EAAAA,OAAO,SAAAtS,GAAS,MAAoB,SAApBA,EAAMytE,WAA0C,UAAlBztE,EAAMG,UACpDtD,EAAAA,KAAK,IAENC,UAAU,WACTnC,EAAKgmB,aAAahiB,OAClBhE,EAAKgmB,aAAa9gB,aAIpBytE,EAAmBX,uBAAuB/vE,KACxC0V,EAAAA,OAAO,SAAAtS,GAAS,MAAoB,SAApBA,EAAMytE,WAA0C,SAAlBztE,EAAMG,UACpDtD,EAAAA,KAAK,IACLC,UAAU,WAAM,MAAAnC,GAAK8lB,YAAYmB,YAEnCnB,EAAYuG,cAAclqB,UAAU,WAClCnC,EAAK6yE,cAAc7uE,KAAKhE,EAAK+yE,SAC7B/yE,EAAK6yE,cAAc3tE,WACnBlF,EAAK4yE,aAAa5uE,KAAKhE,EAAK+yE,SAC5B/yE,EAAK4yE,aAAa1tE,WAClBlF,EAAKg+D,kBAAiB,KACtBh+D,EAAK8lB,YAAYmB,YAGnBnB,EAAYmuB,gBACThyC,KAAK0V,EAAAA,OAAO,SAAAtS,GAAS,MAAAA,GAAMwF,UAAY84B,EAAAA,SAAW3jC,EAAK4jC,gBACvDzhC,UAAU,WAAM,MAAAnC,GAAK6jC,UAgI5B,MAzHE6uC,GAAFnxE,UAAAsiC,MAAE,SAAMmvC,GAAN,GAAFhzE,GAAAE,IACIA,MAAK6yE,QAAUC,EAGf9yE,KAAKyyE,mBAAmBX,uBAAuB/vE,KAC7C0V,EAAAA,OAAO,SAAAtS,GAAS,MAAoB,UAApBA,EAAMytE,YACtB5wE,EAAAA,KAAK,IAENC,UAAU,WACTnC,EAAK6yE,cAAc7uE,KAAKgvE,GACxBhzE,EAAK6yE,cAAc3tE,WACnBlF,EAAK8lB,YAAYmtD,mBAGnB/yE,KAAKyyE,mBAAmBN,uBAM1BK,EAAFnxE,UAAA8lB,YAAE,WACE,MAAOnnB,MAAK8lB,aAAaoB,gBAM3BsrD,EAAFnxE,UAAAw8D,YAAE,WACE,MAAO79D,MAAK0yE,aAAaxrD,gBAM3BsrD,EAAFnxE,UAAA2xE,aAAE,WACE,MAAOhzE,MAAK2yE,cAAczrD,gBAM5BsrD,EAAFnxE,UAAA8jC,cAAE,WACE,MAAOnlC,MAAK4lB,YAAYuf,iBAM1BqtC,EAAFnxE,UAAA0yC,cAAE,WACE,MAAO/zC,MAAK4lB,YAAYmuB,iBAO1By+B,EAAFnxE,UAAAslC,eAAE,SAAe5gC,GACjB,GAAQuiC,GAAW,KAAK2qC,sBAgBpB,OAdIltE,KAAaA,EAAS+c,MAAQ/c,EAASinB,OACzCjnB,EAAS+c,KAAOwlB,EAASxlB,KAAK/c,EAAS+c,MAAQwlB,EAAStb,MAAMjnB,EAASinB,OAEvEsb,EAASrb,qBAGPlnB,IAAaA,EAASmnB,KAAOnnB,EAASonB,QACxCpnB,EAASmnB,IAAMob,EAASpb,IAAInnB,EAASmnB,KAAOob,EAASnb,OAAOpnB,EAASonB,QAErEmb,EAAS4qC,mBAGX,KAAKttD,YAAY+gB,iBAEjB,MAQF6rC,EAAFnxE,UAAA8xE,WAAE,SAAWpwD,EAAoB3P,GAG7B,WAHJ,KAAA2P,IAAaA,EAAb,QAAA,KAAA3P,IAAiCA,EAAjC,IACI,KAAK6/D,uBAAuBlwD,MAAMA,GAAO3P,OAAOA,GAChD,KAAKwS,YAAY+gB,iBACjB,MAIF6rC,EAAFnxE,UAAA+xE,cAAE,SAAc/oB,GAEZ,MADA,MAAKzkC,YAAYwtD,cAAc/oB,GAC/B,MAIFmoB,EAAFnxE,UAAAgyE,iBAAE,SAAiBhpB,GAEf,MADA,MAAKzkC,YAAYytD,iBAAiBhpB,GAClC,MAQFmoB,EAAFnxE,UAAAiyE,UAAE,WACE,MAAOtzE,MAAKmnB,eAQdqrD,EAAFnxE,UAAAkyE,YAAE,WACE,MAAOvzE,MAAKgzE,gBAINR,EAAVnxE,UAAA4xE,qBAAE,WACE,MAAOjzE,MAAK4lB,YAAYwjB,YAA4B,kBAExDopC,KC7KagB,GAAkB,GAAIrjE,GAAAA,eAAoB,iBAG1CsjE,GACT,GAAItjE,GAAAA,eAAgC,8BAG3BujE,GACT,GAAIvjE,GAAAA,eAAqC,8BAchCwjE,IACXx2E,QAASu2E,GACTnjD,MAAOjD,EAAAA,SACPkD,WAAYojD,GAOdzV,GAAA,WAwCE,QAAFA,GACct0C,EACAE,EACYovC,EACoC/wB,EACpBc,EACJ2qC,EACxBC,GAPZ,GAAFh0E,GAAAE,IACcA,MAAd6pB,SAAcA,EACA7pB,KAAd+pB,UAAcA,EACY/pB,KAA1Bm5D,UAA0BA,EACoCn5D,KAA9DooC,gBAA8DA,EAExBpoC,KAAtC6zE,cAAsCA,EACxB7zE,KAAd8zE,kBAAcA,EA7CJ9zE,KAAV+zE,2BACmB/zE,KAAnBg0E,2BAAgD,GAAInrE,GAAAA,QACjC7I,KAAnBi0E,wBAA6C,GAAIprE,GAAAA,QACvC7I,KAAVk0E,oBAAgC,GAAIlmD,KA+BzBhuB,KAAXm0E,eAA8Ct7B,EAAAA,MAAY,WAAM,MAAA/4C,GAAKs0E,YAAY5xE,OAC3E1C,EAAKu0E,gBACLv0E,EAAKu0E,gBAAgBtyE,KAAKqiB,EAAAA,cAAUvQ,OAUtC7T,KAAKmpC,gBAAkBD,EAuQ3B,MA9SEvlC,QAAFC,eAAMu6D,EAAN98D,UAAA,mBAAE,WACE,MAAOrB,MAAK6zE,cAAgB7zE,KAAK6zE,cAAcO,YAAcp0E,KAAK+zE,yDAIpEpwE,OAAFC,eAAMu6D,EAAN98D,UAAA,mBAAE,WACE,MAAOrB,MAAK6zE,cAAgB7zE,KAAK6zE,cAAc1sD,YAAcnnB,KAAKi0E,yDAQpEtwE,OAAFC,eAAMu6D,EAAN98D,UAAA,iBAAE,WACE,MAAOrB,MAAKmnB,6CAGdxjB,OAAFC,eAAMu6D,EAAN98D,UAAA,uBAAE,WACF,GAAU+oB,GAASpqB,KAAK6zE,aACpB,OAAOzpD,GAASA,EAAOiqD,gBAAkBr0E,KAAKg0E,4DA6BhD7V,EAAF98D,UAAAspB,KAAE,SAA0B2pD,EAClB9pD,GADR,GAAF1qB,GAAAE,IAKI,IAFAwqB,EAAS+pD,EAAqB/pD,EAAQxqB,KAAKooC,iBAAmB,GAAI8oC,KAE9D1mD,EAAOgE,IAAMxuB,KAAKw0E,cAAchqD,EAAOgE,IACzC,KAAMpF,OAAM,mBAAmBoB,EAAOgE,GAA5C,kDAGA,IAAUxD,GAAahrB,KAAK2rB,eAAenB,GACjCinD,EAAkBzxE,KAAKy0E,uBAAuBzpD,EAAYR,GAC1DkqD,EAAY10E,KAAK20E,qBAA2BL,EACA7C,EACAzmD,EACAR,EAWlD,OARKxqB,MAAKo0E,YAAY5xE,QACpBxC,KAAK40E,+CAGP50E,KAAKo0E,YAAY1yE,KAAKgzE,GACtBA,EAAU7W,cAAc57D,UAAU,WAAM,MAAAnC,GAAK+0E,kBAAkBH,KAC/D10E,KAAKmnB,YAAYrjB,KAAK4wE,GAEfA,GAMTvW,EAAF98D,UAAAyzE,SAAE,WACE90E,KAAK+0E,cAAc/0E,KAAKo0E,cAO1BjW,EAAF98D,UAAAmzE,cAAE,SAAchmD,GACZ,MAAOxuB,MAAKo0E,YAAY3/D,KAAK,SAAAugE,GAAU,MAAAA,GAAOxmD,KAAOA,KAGvD2vC,EAAF98D,UAAAiL,YAAE,WAGEtM,KAAK+0E,cAAc/0E,KAAK+zE,yBACxB/zE,KAAKg0E,2BAA2BhvE,WAChChF,KAAKi0E,wBAAwBjvE,YAQvBm5D,EAAV98D,UAAAsqB,eAAE,SAAuBnB,GACzB,GAAUiC,GAAgBzsB,KAAK6zC,kBAAkBrpB,EAC7C,OAAOxqB,MAAK6pB,SAASuD,OAAOX,IAQtB0xC,EAAV98D,UAAAwyC,kBAAE,SAA0BohC,GAC5B,GAAUz7D,GAAQ,GAAIkT,GAAAA,eAChBC,iBAAkB3sB,KAAK6pB,SAAS9jB,WAAW6mB,SAC3Csc,eAAgB+rC,EAAa/rC,gBAAkBlpC,KAAKmpC,kBACpDjgB,WAAY+rD,EAAa/rD,WACzBkpB,YAAa6iC,EAAa7iC,YAC1BjkC,UAAW8mE,EAAa9mE,UACxBmoC,SAAU2+B,EAAa3+B,SACvBxyB,UAAWmxD,EAAanxD,UACxBqtD,SAAU8D,EAAa9D,SACvB+D,UAAWD,EAAaC,UACxBC,oBAAqBF,EAAa3D,mBAOpC,OAJI2D,GAAahhC,gBACfz6B,EAAMy6B,cAAgBghC,EAAahhC,eAG9Bz6B,GASD2kD,EAAV98D,UAAAozE,uBAAE,SAA+BnrC,EAAqB9e,GACtD,GAAUS,GAAeT,GAAUA,EAAOxG,kBAAoBwG,EAAOxG,iBAAiBkH,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBjrB,KAAK+pB,UAAW,GAAIqB,WACrE8lD,GAAiB1mD,MAEda,EACF,GAAIC,GAAAA,gBAAgBqmD,GAAoBnnD,EAAOxG,iBAAkBkH,EAGrE,OAFqBoe,GAAQhlB,OAA2B+G,GAEpCG,UAYd2yC,EAAV98D,UAAAszE,qBAAE,SACIL,EACA7C,EACAzmD,EACAR,GAIN,GAAUkqD,GACF,GAAIlC,IAAmBxnD,EAAYymD,EAAiBzxE,KAAKm5D,UAAW3uC,EAAOgE,GAW/E,IARIhE,EAAO4nB,aACTpnB,EAAWma,gBAAgBljC,UAAU,WAC9ByyE,EAAUhxC,cACbgxC,EAAU/wC,UAKZ2wC,YAAkCv6D,GAAAA,YACpC03D,EAAgB/oD,qBACd,GAAIjF,GAAAA,eAAkB6wD,EAAsB,MACnCzoD,UAAWrB,EAAOzmB,KAAM2wE,UAFzCA,SAGW,CACX,GAAYxpD,GAAWlrB,KAAK8rB,gBAAmBtB,EAAQkqD,EAAWjD,GACtD1lD,EAAa0lD,EAAgBppD,sBAC/B,GAAIiD,GAAAA,gBAAgBgpD,MAAwBzgE,GAAWqX,GAC3DwpD,GAAU5W,kBAAoB/xC,EAAWP,SAO3C,MAJAkpD,GACGvB,WAAW3oD,EAAOzH,MAAOyH,EAAOpX,QAChCuzB,eAAenc,EAAOzkB,UAElB2uE,GAWDvW,EAAV98D,UAAAyqB,gBAAE,SACItB,EACAkqD,EACAjD,GAEN,GAAUxmD,GAAeT,GAAUA,EAAOxG,kBAAoBwG,EAAOxG,iBAAiBkH,SAM5EkqD,EAAkB,GAAIhqD,WACzBumD,GAAoBF,IACpB+B,GAAiBhpD,EAAOzmB,OACxByuE,GAAckC,IAWjB,QARIlqD,EAAOrc,WACL8c,GAAiBA,EAAaxV,IAA2B7F,EAAAA,eAAgB,OAC7EwlE,EAAgBxmD,IAAIhf,EAAAA,gBAClB/L,MAAO2mB,EAAOrc,UACd5C,OAAQC,EAAAA,OAIL,GAAI2f,GAAAA,eAAeF,GAAgBjrB,KAAK+pB,UAAWqrD,IAOpDjX,EAAV98D,UAAAwzE,kBAAE,SAA0BH,GAC5B,GAAUryE,GAAQrC,KAAKo0E,YAAYzzD,QAAQ+zD,EAEnCryE,IAAS,IACXrC,KAAKo0E,YAAYnyD,OAAO5f,EAAO,GAI1BrC,KAAKo0E,YAAY5xE,SACpBxC,KAAKk0E,oBAAoB/xE,QAAQ,SAACkzE,EAAe/rE,GAC3C+rE,EACF/rE,EAAQquD,aAAa,cAAe0d,GAEpC/rE,EAAQ+tD,gBAAgB,iBAI5Br3D,KAAKk0E,oBAAoB3nD,QACzBvsB,KAAKq0E,gBAAgBvwE,UAQnBq6D,EAAV98D,UAAAuzE,6CAAE,WACF,GAAUU,GAAmBt1E,KAAK8zE,kBAAkByB,qBAGhD,IAAID,EAAiBE,cAGnB,IAAK,GAFCC,GAAWH,EAAiBE,cAActzE,SAEvCe,EAAIwyE,EAASjzE,OAAS,EAAGS,GAAK,EAAGA,IAAK,CACrD,GAAYyyE,GAAUD,EAASxyE,EAEnByyE,KAAYJ,GACO,WAArBI,EAAQ/wB,UACa,UAArB+wB,EAAQ/wB,UACP+wB,EAAQC,aAAa,eAEtB31E,KAAKk0E,oBAAoBtlD,IAAI8mD,EAASA,EAAQna,aAAa,gBAC3Dma,EAAQ/d,aAAa,cAAe,WAOpCwG,EAAV98D,UAAA0zE,cAAE,SAAsBa,GAGpB,IAFJ,GAAQ3yE,GAAI2yE,EAAQpzE,OAETS,KAKL2yE,EAAQ3yE,GAAG0gC,wBAnTjBpmC,KAAC8vB,EAAAA,iDA1DD9vB,KAAE+vB,EAAAA,UAYF/vB,KAAEiwB,EAAAA,WALFjwB,KAAQs4E,EAAAA,SAARj4E,aAAAL,KA8FOsS,EAAAA,aAjFPtS,KAAQ2zE,GAARtzE,aAAAL,KAkFOsS,EAAAA,WAlFPtS,KAkFmBuW,EAAAA,OAlFnBhW,MAkF0B21E,QAC1Bl2E,SAAAsW,GAAAjW,aAAAL,KAAOuW,EAAAA,OAAPhW,MAAc41E,QACdn2E,KAAqD4gE,EAArDvgE,aAAAL,KAAOsS,EAAAA,WAAPtS,KAAmBmwB,EAAAA,aAtGnBnwB,KAAEu4E,EAAAA,oBA+WF3X,KCtWI4X,GAAmB,EAKvBC,GAAA,WAkBE,QAAFA,GACuBtB,EACXhvE,EACA22D,GAFWr8D,KAAvB00E,UAAuBA,EACX10E,KAAZ0F,YAAYA,EACA1F,KAAZq8D,QAAYA,EAVWr8D,KAAvB4jB,UAA2C,eA8B3C,MAlBEoyD,GAAF30E,UAAAmiB,SAAE,WACOxjB,KAAK00E,YAMR10E,KAAK00E,UAAYuB,EAAiBj2E,KAAK0F,YAAa1F,KAAKq8D,QAAQ+X,eAIrE4B,EAAF30E,UAAAiiB,YAAE,SAAYnf,GACd,GAAU+xE,GAAgB/xE,EAAQgyE,iBAAmBhyE,EAAQiyE,qBAErDF,KACFl2E,KAAK8yE,aAAeoD,EAAch5B,8BAtCxC3/C,KAACiB,EAAAA,UAADV,OACEW,SAAU,mDACVO,SAAU,iBACVE,MACEiB,UAAW,gCACXkiD,oBAAqB,YACrB9kD,KAAQ,kDAdZA,KAAQi1E,GAAR50E,aAAAL,KA2BKsS,EAAAA,aA9BLtS,KAAEC,EAAAA,aAEFD,KAAQ4gE,wBAoBRv6C,YAAArmB,KAAGS,EAAAA,MAAHF,MAAS,gBAGTg1E,eAAAv1E,KAAGS,EAAAA,MAAHF,MAAS,sBAETq4E,kBAAA54E,KAAGS,EAAAA,MAAHF,MAAS,qBAyBTk4E,KAKAK,GAAA,WAWE,QAAFA,GACwB5Y,EACZ/3D,EACA22D,GAFYr8D,KAAxBy9D,WAAwBA,EACZz9D,KAAZ0F,YAAYA,EACA1F,KAAZq8D,QAAYA,EALDr8D,KAAXwuB,GAAgB,oBAAoBunD,KAsBpC,MAfEM,GAAFh1E,UAAAmiB,SAAE,WAAA,GAAF1jB,GAAAE,IACSA,MAAKy9D,aACRz9D,KAAKy9D,WAAawY,EAAiBj2E,KAAK0F,YAAa1F,KAAKq8D,QAAQ+X,cAGhEp0E,KAAKy9D,YACPvrD,QAAQC,UAAUC,KAAK,WAC7B,GAAcwZ,GAAY9rB,EAAK29D,WAAWgV,kBAE9B7mD,KAAcA,EAAUmmD,kBAC1BnmD,EAAUmmD,gBAAkBjyE,EAAK0uB,sBA1B3CjxB,KAACiB,EAAAA,UAADV,OACEW,SAAU,uCACVO,SAAU,iBACVE,MACEC,MAAS,mBACT45B,OAAQ,8CA3DZx7B,KAAQi1E,GAAR50E,aAAAL,KAkEKsS,EAAAA,aArELtS,KAAEC,EAAAA,aAEFD,KAAQ4gE,wBAgER3vC,KAAAjxB,KAAGS,EAAAA,SAsBHq4E,KAMAC,GAAA,WAAA,QAAAA,MAI+B,sBAJ/B/4E,KAACiB,EAAAA,UAADV,OACEW,SAAU,+DACVS,MAAOC,MAAS,0BAElBm3E,KAOAC,GAAA,WAAA,QAAAA,MAI+B,sBAJ/Bh5E,KAACiB,EAAAA,UAADV,OACEW,SAAU,+DACVS,MAAOC,MAAS,0BAElBo3E,KCrGArT,GAAA,WAAA,QAAAA,MA4B8B,sBA5B9B3lE,KAACkD,EAAAA,SAAD3C,OACE4C,SACEE,EAAAA,aACA4oB,EAAAA,cACApT,EAAAA,aACAvV,IAEFC,SACE6wE,GACAqE,GACAK,GACAC,GACAC,GACA11E,IAEFE,cACE4wE,GACAqE,GACAK,GACAE,GACAD,IAEF53E,WACEy/D,GACAwV,IAEFlqD,iBAAkBkoD,QAEpBzO,KCnCAsT,GAAA,SAAAl4E,GAAA,QAAAk4E,oDA4BA,MAhByCj4E,GAAzCi4E,EAAAl4E,GACEqF,OAAFC,eACM4yE,EADNn1E,UAAA,0BAAE,WACmC,MAAOrB,MAAKy2E,aAC/C,SAAuB5yE,GAAiB7D,KAAKy2E,QAAU5yE,mCAEvDF,OAAFC,eACM4yE,EADNn1E,UAAA,0BAAE,WACmC,MAAOrB,MAAK02E,aAC/C,SAAuB7yE,GAAiB7D,KAAK02E,QAAU7yE,mCAEvDF,OAAFC,eACM4yE,EADNn1E,UAAA,mBAAE,WAC6B,MAAOrB,MAAKukC,aACzC,SAAgB1gC,GAAkB7D,KAAKukC,QAAU1gC,mCAEjDF,OAAFC,eACM4yE,EADNn1E,UAAA,2BAAE,WACqC,MAAOrB,MAAKukC,aACjD,SAAwB1gC,GAAkB7D,KAAKukC,QAAU1gC,kDA3B3DtG,KAACiB,EAAAA,UAADV,OACEW,SAAU,wDACVO,SAAU,sBACV4I,QAAS,qBAAsB,sBAC/B1I,MACEC,MAAS,qCAGTw3E,KAAQ,IACR1U,UAAW,6CAIf2U,qBAAAr5E,KAAGS,EAAAA,QAIH64E,qBAAAt5E,KAAGS,EAAAA,QAIH84E,cAAAv5E,KAAGS,EAAAA,MAAHF,MAAS,kBAITi5E,sBAAAx5E,KAAGS,EAAAA,SAGHw4E,GAhByCQ,EAAAA,qBCX5BpV,GACT,GAAIzxD,GAAAA,eAA6B,4BCoB/B8mE,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGEphD,GAAe,gBAKjB,QAAFqhD,GAAqBpgC,EACAC,EACAC,EAEAC,GAJAj3C,KAArB82C,0BAAqBA,EACA92C,KAArB+2C,YAAqBA,EACA/2C,KAArBg3C,iBAAqBA,EAEAh3C,KAArBi3C,UAAqBA,EACrB,MAAAigC,MACaC,GACThgC,EAAgB+/B,IAGpBE,GAAA,SAAA94E,GA8JE,QAAF84E,GACc1xE,EACA+C,EAEiBwuC,EACfF,EACAC,EACZF,EACsDugC,EAC9CC,EACRriE,GAVF,GAAFnV,GAYIxB,EAZJgF,KAAAtD,KAYU82C,EAA2BC,EAAaC,EAAkBC,IAZpEj3C,IACcF,GAAd4F,YAAcA,EACA5F,EAAd2I,UAAcA,EAEiB3I,EAA/Bm3C,UAA+BA,EAKnBn3C,EAAZw3E,iBAAYA,EA3IAx3E,EAAZi4C,KAAmB,aAAaliB,KAO9B/1B,EAAFy3E,WAAc,EAGZz3E,EAAF03E,iBAAoB,EAMlB13E,EAAFgwE,SAAqB,EAMVhwE,EAAX05C,aAAyC,GAAI3wC,GAAAA,QAM3C/I,EAAF64C,YAAwB,YAMtB74C,EAAF23E,YAAe,EAuBH33E,EAAZ6gC,WAAwB,EAwBZ7gC,EAAZ82B,WAAwB,EAgBZ92B,EAAZ43E,MAAoB,OAsBV53E,EAAV63E,WAAsB,EAEV73E,EAAZ83E,uBACI,OACA,WACA,iBACA,QACA,OACA,QACAngE,OAAO,SAAAogE,GAAK,MAAAC,GAAAA,yBAAyBppD,IAAImpD,IAgB7C,IAAUvuE,GAAUxJ,EAAK4F,YAAYC,oBAIjC7F,GAAKi4E,oBAAsBV,GAAsB/tE,EAEjDxJ,EAAKk4E,qBAAuBl4E,EAAK+D,MAGjC/D,EAAK0uB,GAAK1uB,EAAK0uB,GAKX/lB,EAAU+7C,KACZvvC,EAAOtL,kBAAkB,WACvBjE,EAAYC,cAAc++C,iBAAiB,QAAS,SAACv/C,GAC7D,GAAc8yE,GAAK9yE,EAAY,MAChB8yE,GAAGp0E,OAAUo0E,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhCt4E,EAAKy3E,WAAaz3E,EAAK2I,UAAU2O,UACjCtX,EAAK03E,gBAAqD,WAAnCluE,EAAQq7C,SAASlkC,cAEpC3gB,EAAK03E,kBACP13E,EAAK64C,YAAc,EAA+BoB,SAAW,6BACA,uBAkJnE,MAvU8Bx7C,GAA9B64E,EAAA94E,GA0CEqF,OAAFC,eACMwzE,EADN/1E,UAAA,gBAAE,WAEE,MAAIrB,MAAKi3C,WAAyC,OAA5Bj3C,KAAKi3C,UAAUhqC,SAC5BjN,KAAKi3C,UAAUhqC,SAEjBjN,KAAK2gC,eAEd,SAAa98B,GACX7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,GAInC7D,KAAK8vE,UACP9vE,KAAK8vE,SAAU,EACf9vE,KAAKw5C,aAAa11C,yCAStBH,OAAFC,eACMwzE,EADN/1E,UAAA,UAAE,WACmB,MAAOrB,MAAK65C,SAC/B,SAAOh2C,GAAiB7D,KAAK65C,IAAMh2C,GAAS7D,KAAK+3C,sCAajDp0C,OAAFC,eACMwzE,EADN/1E,UAAA,gBAAE,WAC0B,MAAOrB,MAAK42B,eACtC,SAAa/yB,GAAkB7D,KAAK42B,UAAYtlB,EAAAA,sBAAsBzN,oCAItEF,OAAFC,eACMwzE,EADN/1E,UAAA,YAAE,WACqB,MAAOrB,MAAK03E,WACjC,SAAS7zE,GACP7D,KAAK03E,MAAQ7zE,GAAS,OACtB7D,KAAKq4E,iBAKAr4E,KAAKs4E,eAAiBR,EAAAA,yBAAyBppD,IAAI1uB,KAAK03E,SAC1D13E,KAAK0F,YAAyB,cAAsBnI,KAAOyC,KAAK03E,wCAYrE/zE,OAAFC,eACMwzE,EADN/1E,UAAA,aAAE,WACsB,MAAOrB,MAAK+3E,oBAAoBl0E,WACtD,SAAUA,GACJA,IAAU7D,KAAK6D,QACjB7D,KAAK+3E,oBAAoBl0E,MAAQA,EACjC7D,KAAKw5C,aAAa11C,yCAKtBH,OAAFC,eACMwzE,EADN/1E,UAAA,gBAAE,WAC0B,MAAOrB,MAAK23E,eACtC,SAAa9zE,GAAkB7D,KAAK23E,UAAYrmE,EAAAA,sBAAsBzN,oCAiEtEuzE,EAAF/1E,UAAAmiB,SAAE,WAAA,GAAF1jB,GAAAE,IACQA,MAAKyI,UAAU2O,WACjBpX,KAAKs3E,iBAAiB9hE,QAAQxV,KAAK0F,YAAYC,eAAe1D,UAAU,SAAAkD,GACtErF,EAAK23E,WAAatyE,EAAMozE,aACxBz4E,EAAK05C,aAAa11C,UAKxBszE,EAAF/1E,UAAAiiB,YAAE,WACEtjB,KAAKw5C,aAAa11C,QAGpBszE,EAAF/1E,UAAAiL,YAAE,WACEtM,KAAKw5C,aAAax0C,WAEdhF,KAAKyI,UAAU2O,WACjBpX,KAAKs3E,iBAAiBzhE,eAAe7V,KAAK0F,YAAYC,gBAI1DyxE,EAAF/1E,UAAA6kC,UAAE,WACMlmC,KAAKi3C,WAIPj3C,KAAKy6C,mBAMPz6C,KAAKw4E,0BAIPpB,EAAF/1E,UAAAkG,MAAE,WACEvH,KAAK0F,YAAYC,cAAc4B,SAIjC6vE,EAAF/1E,UAAAuR,cAAE,SAAc6lE,GACRA,IAAcz4E,KAAK8vE,SAAa9vE,KAAK04E,UAAaD,IACpDz4E,KAAK8vE,QAAU2I,EACfz4E,KAAKw5C,aAAa11C,SAItBszE,EAAF/1E,UAAAkgE,SAAE,aAWU6V,EAAZ/1E,UAAAm3E,uBAAE,WACF,GAAU13C,GAAW9gC,KAAK0F,YAAYC,cAAc9B,KAE5C7D,MAAKg4E,uBAAyBl3C,IAChC9gC,KAAKg4E,qBAAuBl3C,EAC5B9gC,KAAKw5C,aAAa11C,SAKZszE,EAAZ/1E,UAAAg3E,cAAE,WACE,GAAIpB,GAAwBt2D,QAAQ3gB,KAAK03E,QAAU,EACjD,KAAMiB,IAAgC34E,KAAK03E,QAKrCN,EAAZ/1E,UAAAu3E,cAAE,WACE,MAAO54E,MAAK43E,sBAAsBj3D,QAAQ3gB,KAAK03E,QAAU,GAIjDN,EAAZ/1E,UAAAw3E,YAAE,WAEF,GAAQC,GAAY94E,KAAK0F,YAAyB,cAAsBozE,QACpE,OAAOA,IAAYA,EAASC,UAIpB3B,EAAZ/1E,UAAAi3E,YAAE,WACE,MAAiE,aAA1Dt4E,KAAK0F,YAAYC,cAAcg/C,SAASlkC,eAOjD9c,OAAFC,eAAMwzE,EAAN/1E,UAAA,aAAE,WACE,QAAQrB,KAAK44E,iBAAoB54E,KAAK0F,YAAYC,cAAc9B,OAAU7D,KAAK64E,eAC1E74E,KAAKy3E,6CAOZ9zE,OAAFC,eAAMwzE,EAAN/1E,UAAA,wBAAE,WACE,GAAIrB,KAAKw3E,gBAAiB,CAI9B,GAAYwB,GAAgBh5E,KAAK0F,YAAyB,cAC9CuzE,EAA6CD,EAAclgC,QAAQ,EAIzE,OAAO94C,MAAK8vE,SAAWkJ,EAAcj/B,WAAa/5C,KAAKi7C,UAC7C+9B,EAAchqE,eAAiB,GAAKiqE,GAAeA,EAAYtmD,OAEzE,MAAO3yB,MAAK8vE,UAAY9vE,KAAKi7C,uCAQjCm8B,EAAF/1E,UAAA2gD,kBAAE,SAAkBC,GAChBjiD,KAAKkiD,iBAAmBD,EAAI5G,KAAK,MAOnC+7B,EAAF/1E,UAAA8gD,iBAAE,WAIOniD,KAAK8vE,SACR9vE,KAAKuH,wBA9VXhK,KAACiB,EAAAA,UAADV,OACEW,SAAU,4HAEVO,SAAU,WACVE,MAIEC,MAAS,oDACT+5E,2BAA4B,YAG5B92B,YAAa,KACbsuB,qBAAsB,cACtB1O,aAAc,WACdmX,aAAc,WACdC,kBAAmB,uCACnBz2B,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxBhkB,SAAU,uBACVnF,UAAW,sBACX6oC,UAAW,cAEbvjE,YAAavB,QAAS8lD,GAAqB5lD,YAAa+5E,4CA3E1D75E,KAAEC,EAAAA,aALFD,KAAgCwS,EAAAA,WAehCxS,KAA4B+lD,EAAAA,UAA5B1lD,aAAAL,KA2MKsS,EAAAA,WA3MLtS,KA2MiBs4C,EAAAA,SA3MjBt4C,KAAuC4lD,EAAAA,OAAvCvlD,aAAAL,KA4MKsS,EAAAA,aA5MLtS,KAAQ6lD,EAAAA,mBAARxlD,aAAAL,KA6MKsS,EAAAA,aAzMLtS,KAAEqd,KA2MFrd,SAAAsW,GAAAjW,aAAAL,KAAKsS,EAAAA,WAALtS,KAAiBs4C,EAAAA,OAAjBt4C,KAAyBuW,EAAAA,OAAzBhW,MAAgC8jE,QA7NhCrkE,KAAQ87E,EAAAA,kBAOR97E,KAAEuS,EAAAA,4BAoHF7C,WAAA1P,KAAGS,EAAAA,QAuBHwwB,KAAAjxB,KAAGS,EAAAA,QASHkiD,cAAA3iD,KAAGS,EAAAA,QAMHq7B,WAAA97B,KAAGS,EAAAA,QAMHT,OAAAA,KAAGS,EAAAA,QAgBH6lD,oBAAAtmD,KAAGS,EAAAA,QAMH6F,QAAAtG,KAAGS,EAAAA,QAUH06E,WAAAn7E,KAAGS,EAAAA,SAiNHo5E,GAvU8BD,IC1E9BmC,GAAA,WAAA,QAAAA,MAiB6B,sBAjB7B/7E,KAACkD,EAAAA,SAAD3C,OACEiD,cAAeq2E,GAAUZ,IACzB91E,SACEE,EAAAA,aACA24E,EAAAA,gBACAx1B,IAEFjjD,SACEy4E,EAAAA,gBAGAx1B,GACAqzB,GACAZ,IAEF93E,WAAYkc,QAEd0+D,KCrBA7V,GAAA,WAAA,QAAAA,KAMWzjE,KAAXmE,QAAoC,GAAI0E,GAAAA,QAGtC7I,KAAFw5E,cAA0B,WAGxBx5E,KAAFy5E,kBAA8B,gBAG5Bz5E,KAAF0tE,eAA2B,iBAGzB1tE,KAAF8tE,eAA2B,aAGzB9tE,KAAF2tE,cAA0B,gBAGxB3tE,KAAF+tE,cAA0B,YAGxB/tE,KAAF6tE,mBAA+B,oBAG7B7tE,KAAFguE,mBAA+B,gBAG7BhuE,KAAFytE,uBAAmC,cAGjCztE,KAAFwtE,2BAAuC,wBAjDvC,sBAaAjwE,KAAC8vB,EAAAA,WAADvvB,OAAaykB,WAAY,8GAbzBkhD,mBpBgCE,QAAFwH,GAAqBpnE,EACA61E,EACA91D,EACA2gB,EACAo1C,GAJA35E,KAArB6D,MAAqBA,EACA7D,KAArB05E,aAAqBA,EACA15E,KAArB4jB,UAAqBA,EACA5jB,KAArBukC,QAAqBA,EACAvkC,KAArB25E,WAAqBA,EACrB,MAAA1O,MAOA7H,GAAA,WAsDE,QAAFA,GAAsB19D,EAA8C8C,GAA9CxI,KAAtB0F,YAAsBA,EAA8C1F,KAApEwI,QAAoEA,EAvBzDxI,KAAXknE,QAAqB,EAGVlnE,KAAXmnE,WAAwB,EAMbnnE,KAAXonE,gBAA6B,EAGRpnE,KAArBqnE,oBAAiE,GAAIj+D,GAAAA,aAArE,MAaEg6D,GAAF/hE,UAAAu4E,aAAE,SAAa/O,GACPA,EAAKtmC,SACPvkC,KAAKqnE,oBAAoB7hE,KAAKqlE,EAAKhnE,QAIvCu/D,EAAF/hE,UAAAiiB,YAAE,SAAYnf,GACd,GAAU01E,GAAgB11E,EAAQ+iE,QACxB93D,EAAVpP,KAAW22E,EAAXvnE,EAAAunE,KAAiBzP,EAAjB93D,EAAA83D,SAEQ/iE,EAAQwyE,MAAQkD,KAClB75E,KAAK85E,gBAAkBnD,GAAQA,EAAKn0E,QAAUm0E,EAAK,GAAGn0E,OAAS0kE,EAAUyP,EAAK,GAAGn0E,OAAS,IAGxF2B,EAAQijE,iBAAmByS,IAAkB75E,KAAK+5E,gBACpD/5E,KAAK+5E,aAAkB,GAAK/5E,KAAKonE,gBAAkBF,EAAzD,MAGQ2S,GAAkB75E,KAAKg6E,aACzBh6E,KAAKg6E,WAAgB,IAAM9S,EAAjC,MAIE9D,EAAF/hE,UAAA44E,cAAE,SAAchsB,EAAkBwC,GAClC,GAAQypB,GAAajsB,EAAWjuD,KAAKknE,QAAUzW,CAO3C,OAJIxC,KACFisB,GAAcl6E,KAAK85E,iBAGdI,GAAcl6E,KAAKmnE,YAI5B/D,EAAF/hE,UAAA0oE,iBAAE,WAAA,GAAFjqE,GAAAE,IACIA,MAAKwI,QAAQmB,kBAAkB,WAC7B7J,EAAK0I,QAAQywC,SAAS/xB,eAAenlB,KAAKC,EAAAA,KAAK,IAAIC,UAAU,WACnE,GAAcklE,GACFrnE,EAAK4F,YAAYC,cAAco3C,cAAc,4BAE7CoqB,IACFA,EAAW5/D,4BAlGrBhK,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,sBACEQ,SAAU,wyCACVI,QAAF;8zBACEH,MACFC,MAAA,oBACMC,KAAN,OACI0nE,gBAAJ,QAEA9nE,SAAA,kBACAM,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFAtCAyjE,EAAAxjE,6DA4CAmnE,aAAAxpE,KAAQS,EAAAA,QAGRgpE,gBAAAzpE,KAAAS,EAAAA,QAGAipE,wBAAQ1pE,KAARS,EAAAA,QAGAkpE,UAAA3pE,KAAAS,EAAAA,QAGAmpE,aAAA5pE,KAAAS,EAAAA,QAGAopE,kBAAA7pE,KAAAS,EAAAA,QAGAqpE,sBAAA9pE,KAAAoJ,EAAAA,UASAy8D,KCzCAC,GAAA,WAyFE,QAAFA,GAAsB/6D,EACsC22D,EAC3B3C,EACCx2D,GAC9B,GAJkB9F,KAAtBsI,mBAAsBA,EACsCtI,KAA5Di/D,aAA4DA,EAC3Bj/D,KAAjCs8D,aAAiCA,EACCt8D,KAAlC8F,KAAkCA,EAnCb9F,KAArBsnE,eAA8D,GAAIl+D,GAAAA,aAG7CpJ,KAArBunE,eAA0D,GAAIn+D,GAAAA,aAGzCpJ,KAArBwnE,iBAAyD,GAAIp+D,GAAAA,cA8BpDpJ,KAAKs8D,aACR,KAAMC,IAA2B,cAEnC,KAAKv8D,KAAKi/D,aACR,KAAM1C,IAA2B,mBAGvC,IAAUkL,GAAiBznE,KAAKs8D,aAAaoL,oBACnCC,EAAiB3nE,KAAKs8D,aAAasL,kBAAkB,UACrDC,EAAe7nE,KAAKs8D,aAAasL,kBAAkB,QAGrDE,EAAWD,EAAarjE,IAAI,SAACujE,EAAM9kE,GACrC,OAAQ8kE,KAAdA,EAAoBC,OAAQL,EAAe1kE,KAEvCjD,MAAKioE,UAAYH,EAASvlE,MAAMklE,GAAgBS,OAAOJ,EAASvlE,MAAM,EAAGklE,IAEzEznE,KAAKmoE,YAAcnoE,KAAKs8D,aAAa8L,QA5CzC,MAtDEzkE,QAAFC,eACMy/D,EADNhiE,UAAA,kBAAE,WACsB,MAAOrB,MAAKmoE,iBAClC,SAAetkE,GACjB,GAAUwkE,GAAgBroE,KAAKmoE,YACrBG,EACFtoE,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,KAAW7D,KAAKs8D,aAAa8L,OACxFpoE,MAAKmoE,YAAcnoE,KAAKs8D,aAAaiM,UAAUD,EAAWtoE,KAAKwoE,QAASxoE,KAAKyoE,SACxEzoE,KAAK0oE,qBAAqBL,EAAeroE,KAAKmoE,cACjDnoE,KAAK2oE,yCAMThlE,OAAFC,eACMy/D,EADNhiE,UAAA,gBAAE,WAC2B,MAAOrB,MAAKwgC,eACvC,SAAa38B,GACX7D,KAAKwgC,UAAYxgC,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,IACxE7D,KAAK4oE,cAAgB5oE,KAAK6oE,uBAAuB7oE,KAAKwgC,4CAKxD78B,OAAFC,eACMy/D,EADNhiE,UAAA,eAAE,WAC0B,MAAOrB,MAAK8oE,cACtC,SAAYjlE,GACV7D,KAAK8oE,SAAW9oE,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,qCAKzEF,OAAFC,eACMy/D,EADNhiE,UAAA,eAAE,WAC0B,MAAOrB,MAAK+oE,cACtC,SAAYllE,GACV7D,KAAK+oE,SAAW/oE,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,qCAmEzEw/D,EAAFhiE,UAAAgK,mBAAE,WACErL,KAAK2oE,SAIPtF,EAAFhiE,UAAA2nE,cAAE,SAAc9L,GACZ,GAAIl9D,KAAK4oE,eAAiB1L,EAAM,CACpC,GAAY+L,GAAejpE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmpE,YAC9CC,EAAgBppE,KAAKs8D,aAAa+M,SAASrpE,KAAKmpE,YAChDG,EAAetpE,KAAKs8D,aAAaiN,WAAWN,EAAcG,EAAelM,EAE/El9D,MAAKsnE,eAAe9hE,KAAK8jE,GAG3BtpE,KAAKunE,eAAe/hE,QAItB69D,EAAFhiE,UAAAmoE,2BAAE,SAA2BrkE,GAK7B,GAAUkjE,GAAgBroE,KAAKmoE,YACrBt7C,EAAQ7sB,KAAK+6C,QAEnB,QAAQ51C,EAAMwF,SACZ,IAAK0yB,GAAAA,WACHr9B,KAAKmpE,WAAanpE,KAAKs8D,aAAamN,gBAAgBzpE,KAAKmoE,YAAat7C,EAAQ,GAAK,EACnF,MACF,KAAK0Q,GAAAA,YACHv9B,KAAKmpE,WAAanpE,KAAKs8D,aAAamN,gBAAgBzpE,KAAKmoE,YAAat7C,GAAS,EAAI,EACnF,MACF,KAAKyQ,GAAAA,SACHt9B,KAAKmpE,WAAanpE,KAAKs8D,aAAamN,gBAAgBzpE,KAAKmoE,aAAc,EACvE,MACF,KAAK3qC,GAAAA,WACHx9B,KAAKmpE,WAAanpE,KAAKs8D,aAAamN,gBAAgBzpE,KAAKmoE,YAAa,EACtE,MACF,KAAKv9D,GAAAA,KACH5K,KAAKmpE,WAAanpE,KAAKs8D,aAAamN,gBAAgBzpE,KAAKmoE,YACrD,EAAInoE,KAAKs8D,aAAaoN,QAAQ1pE,KAAKmoE,aACvC,MACF,KAAKp9D,GAAAA,IACH/K,KAAKmpE,WAAanpE,KAAKs8D,aAAamN,gBAAgBzpE,KAAKmoE,YACpDnoE,KAAKs8D,aAAaqN,kBAAkB3pE,KAAKmoE,aACxCnoE,KAAKs8D,aAAaoN,QAAQ1pE,KAAKmoE,aACrC,MACF,KAAKjrC,GAAAA,QACHl9B,KAAKmpE,WAAahkE,EAAMw2C,OACpB37C,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,aAAc,GACtDnoE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKmoE,aAAc,EAC3D,MACF,KAAK/qC,GAAAA,UACHp9B,KAAKmpE,WAAahkE,EAAMw2C,OACpB37C,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,YAAa,GACrDnoE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKmoE,YAAa,EAC1D,MACF,KAAKl9D,GAAAA,MACL,IAAKC,GAAAA,MAOH,YANKlL,KAAK8pE,aAAc9pE,KAAK8pE,WAAW9pE,KAAKmoE,eAC3CnoE,KAAKgpE,cAAchpE,KAAKs8D,aAAaoN,QAAQ1pE,KAAKmoE,cAClDnoE,KAAKunE,eAAe/hE,OAEpBL,EAAM2F,kBAGV,SAEE,OAGA9K,KAAKs8D,aAAa2D,YAAYoI,EAAeroE,KAAKmpE,aACpDnpE,KAAKwnE,iBAAiBhiE,KAAKxF,KAAKmpE,YAGlCnpE,KAAK+pE,mBAEL5kE,EAAM2F,kBAIRu4D,EAAFhiE,UAAAsnE,MAAE,WACE3oE,KAAK4oE,cAAgB5oE,KAAK6oE,uBAAuB7oE,KAAKmZ,UACtDnZ,KAAKgqE,WAAahqE,KAAK6oE,uBAAuB7oE,KAAKs8D,aAAa8L,SAChEpoE,KAAKiqE,YACDjqE,KAAKs8D,aAAa4N,cAAc,SAASlqE,KAAKs8D,aAAa+M,SAASrpE,KAAKmpE,aACpEgB,mBAEb,IAAQC,GAAepqE,KAAKs8D,aAAaiN,WAAWvpE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmpE,YAC3EnpE,KAAKs8D,aAAa+M,SAASrpE,KAAKmpE,YAAa,EACjDnpE,MAAKqqE,kBAnNa,EAoNGrqE,KAAKs8D,aAAagO,aAAaF,GAC/CpqE,KAAKs8D,aAAaoL,qBArNL,EAuNlB1nE,KAAKuqE,mBACLvqE,KAAKsI,mBAAmB6B,gBAI1Bk5D,EAAFhiE,UAAA0oE,iBAAE,WACE/pE,KAAKwqE,iBAAiBT,oBAIhB1G,EAAVhiE,UAAAkpE,iBAAE,WACF,GAAUE,GAAczqE,KAAKs8D,aAAaqN,kBAAkB3pE,KAAKmpE,YACvDuB,EAAY1qE,KAAKs8D,aAAaqO,cACpC3qE,MAAK4qE,WACL,KAAK,GAAI3nE,GAAI,EAAG4nE,EAAO7qE,KAAKqqE,iBAAkBpnE,EAAIwnE,EAAaxnE,IAAK4nE,IAAQ,CArO1D,GAsOZA,IACF7qE,KAAK4qE,OAAOlpE,SACZmpE,EAAO,EAEf,IAAY3N,GAAOl9D,KAAKs8D,aAAaiN,WACzBvpE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmpE,YAC/BnpE,KAAKs8D,aAAa+M,SAASrpE,KAAKmpE,YAAalmE,EAAI,GACjDshC,EAAUvkC,KAAK8qE,kBAAkB5N,GACjCt5C,EAAY5jB,KAAKs8D,aAAamF,OAAOvE,EAAMl9D,KAAKi/D,aAAayC,QAAQqJ,eACrEC,EAAchrE,KAAK0+D,UAAY1+D,KAAK0+D,UAAUxB,OAAQrpD,EAE5D7T,MAAK4qE,OAAO5qE,KAAK4qE,OAAOpoE,OAAS,GAC5Bd,KAAK,GAAIupE,IAAgBhoE,EAAI,EAAGynE,EAAUznE,GAAI2gB,EAAW2gB,EAASymC,MAKnE3H,EAAVhiE,UAAAypE,kBAAE,SAA0B5N,GACxB,QAASA,KACHl9D,KAAK8pE,YAAc9pE,KAAK8pE,WAAW5M,OACnCl9D,KAAKwoE,SAAWxoE,KAAKs8D,aAAa2D,YAAY/C,EAAMl9D,KAAKwoE,UAAY,MACrExoE,KAAKyoE,SAAWzoE,KAAKs8D,aAAa2D,YAAY/C,EAAMl9D,KAAKyoE,UAAY,IAOrEpF,EAAVhiE,UAAAwnE,uBAAE,SAA+B3L,GAC7B,MAAOA,IAAQl9D,KAAK0oE,qBAAqBxL,EAAMl9D,KAAKmpE,YAChDnpE,KAAKs8D,aAAaoN,QAAQxM,GAAQ,MAIhCmG,EAAVhiE,UAAAqnE,qBAAE,SAA6BwC,EAAcC,GACzC,SAAUD,IAAMC,GAAMnrE,KAAKs8D,aAAa+M,SAAS6B,IAAOlrE,KAAKs8D,aAAa+M,SAAS8B,IACzEnrE,KAAKs8D,aAAa4M,QAAQgC,IAAOlrE,KAAKs8D,aAAa4M,QAAQiC,KAO/D9H,EAAVhiE,UAAA0+D,oBAAE,SAA4Bn+C,GAC1B,MAAQ5hB,MAAKs8D,aAAaqF,eAAe//C,IAAQ5hB,KAAKs8D,aAAayE,QAAQn/C,GAAQA,EAAM,MAInFyhD,EAAVhiE,UAAA05C,OAAE,WACE,MAAO/6C,MAAK8F,MAA4B,QAApB9F,KAAK8F,KAAKjC,sBAhRlCtG,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,iBACEQ,SAAU,kkBACVD,SAAU,eACVM,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJA3BApC,KAAE8gE,GAAFzgE,aAAAL,KAAAsS,EAAAA,aAiHAtS,KAAAqS,EAAAA,eAAAhS,aAAAL,KAAAsS,EAAAA,cAtGAwzD,EAAAzjE,sEAwBA4oE,UAAAjrE,KAAAS,EAAAA,QAcAyqE,UAAAlrE,KAAAS,EAAAA,QASA8rE,aAAAvsE,KAAAS,EAAAA,QAQA0gE,YAAAnhE,KAAAS,EAAAA,QAQAspE,iBAAA/pE,KAAAoJ,EAAAA,SAGA4gE,iBAAAhqE,KAAQoJ,EAAAA,SAGR6gE,mBAAAjqE,KAAAoJ,EAAAA,SAGA6jE,mBAAAjtE,KAAAuJ,EAAAA,UAAAhJ,MAAAslE,OAMAC,KClEAE,GAAA,WAyEE,QAAFA,GAAsBj7D,EACWg0D,EACCx2D,GAC9B,GAHkB9F,KAAtBsI,mBAAsBA,EACWtI,KAAjCs8D,aAAiCA,EACCt8D,KAAlC8F,KAAkCA,EAtBb9F,KAArBsnE,eAAuD,GAAIl+D,GAAAA,aAGtCpJ,KAArBw+D,aAAqD,GAAIp1D,GAAAA,aAGpCpJ,KAArBwnE,iBAAyD,GAAIp+D,GAAAA,cAiBpDpJ,KAAKs8D,aACR,KAAMC,IAA2B,cAGnCv8D,MAAKmoE,YAAcnoE,KAAKs8D,aAAa8L,QAlBzC,MApDEzkE,QAAFC,eACM2/D,EADNliE,UAAA,kBAAE,WACsB,MAAOrB,MAAKmoE,iBAClC,SAAetkE,GACjB,GAAQwkE,GAAgBroE,KAAKmoE,YACnBG,EACFtoE,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,KAAW7D,KAAKs8D,aAAa8L,OACxFpoE,MAAKmoE,YAAcnoE,KAAKs8D,aAAaiM,UAAUD,EAAWtoE,KAAKwoE,QAASxoE,KAAKyoE,SACzE56D,KAAK0/B,MAAMvtC,KAAKs8D,aAAa4M,QAAQb,GA1BjB,KA2BpBx6D,KAAK0/B,MAAMvtC,KAAKs8D,aAAa4M,QAAQlpE,KAAKmoE,aA3BtB,KA4BtBnoE,KAAK2oE,yCAMThlE,OAAFC,eACM2/D,EADNliE,UAAA,gBAAE,WAC2B,MAAOrB,MAAKwgC,eACvC,SAAa38B,GACX7D,KAAKwgC,UAAYxgC,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,IACxE7D,KAAKorE,cAAgBprE,KAAKwgC,WAAaxgC,KAAKs8D,aAAa4M,QAAQlpE,KAAKwgC,4CAKxE78B,OAAFC,eACM2/D,EADNliE,UAAA,eAAE,WAC0B,MAAOrB,MAAK8oE,cACtC,SAAYjlE,GACV7D,KAAK8oE,SAAW9oE,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,qCAKzEF,OAAFC,eACM2/D,EADNliE,UAAA,eAAE,WAC0B,MAAOrB,MAAK+oE,cACtC,SAAYllE,GACV7D,KAAK+oE,SAAW/oE,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,qCAsCzE0/D,EAAFliE,UAAAgK,mBAAE,WACErL,KAAK2oE,SAIPpF,EAAFliE,UAAAsnE,MAAE,WAAA,GAAF7oE,GAAAE,IACIA,MAAKqrE,WAAarrE,KAAKs8D,aAAa4M,QAAQlpE,KAAKs8D,aAAa8L,QAClE,IAAQkD,GAAatrE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmoE,aAC5CoD,EAAeD,EApGK,EAqGxBtrE,MAAKwrE,SACL,KAAK,GAAIvoE,GAAI,EAAGosD,KAAoBpsD,EAtGZ,GAsG8BA,IACpDosD,EAAI3tD,KAAK4pE,EAAaC,EAAetoE,GArGhB,GAsGjBosD,EAAI7sD,SACNxC,KAAKwrE,OAAO9pE,KAAK2tD,EAAI7qD,IAAI,SAAAinE,GAAQ,MAAA3rE,GAAK4rE,mBAAmBD,MACzDpc,KAGJrvD,MAAKsI,mBAAmB6B,gBAI1Bo5D,EAAFliE,UAAAsqE,cAAE,SAAcF,GACZzrE,KAAKw+D,aAAah5D,KAAKxF,KAAKs8D,aAAaiN,WAAWkC,EAAM,EAAG,GACjE,IAAQG,GAAQ5rE,KAAKs8D,aAAa+M,SAASrpE,KAAKmpE,YACxCsB,EACAzqE,KAAKs8D,aAAaqN,kBAAkB3pE,KAAKs8D,aAAaiN,WAAWkC,EAAMG,EAAO,GAClF5rE,MAAKsnE,eAAe9hE,KAAKxF,KAAKs8D,aAAaiN,WAAWkC,EAAMG,EACxD/9D,KAAK2B,IAAIxP,KAAKs8D,aAAaoN,QAAQ1pE,KAAKmpE,YAAasB,MAI3DlH,EAAFliE,UAAAmoE,2BAAE,SAA2BrkE,GAK7B,GAAUkjE,GAAgBroE,KAAKmoE,YACrBt7C,EAAQ7sB,KAAK+6C,QAEnB,QAAQ51C,EAAMwF,SACZ,IAAK0yB,GAAAA,WACHr9B,KAAKmpE,WAAanpE,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,YAAat7C,EAAQ,GAAK,EACpF,MACF,KAAK0Q,GAAAA,YACHv9B,KAAKmpE,WAAanpE,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,YAAat7C,GAAS,EAAI,EACpF,MACF,KAAKyQ,GAAAA,SACHt9B,KAAKmpE,WAAanpE,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,aAzIvC,EA0InB,MACF,KAAK3qC,GAAAA,WACHx9B,KAAKmpE,WAAanpE,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,YA5IvC,EA6InB,MACF,KAAKv9D,GAAAA,KACH5K,KAAKmpE,WAAanpE,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,aACrDnoE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmoE,aAlJhB,GAmJpB,MACF,KAAKp9D,GAAAA,IACH/K,KAAKmpE,WAAanpE,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,YArJtC,GAsJDnoE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmoE,aAtJ9B,GAsJ4D,EAChF,MACF,KAAKjrC,GAAAA,QACHl9B,KAAKmpE,WACDnpE,KAAKs8D,aAAasN,iBACd5pE,KAAKmoE,YAAahjE,EAAMw2C,QAAS,KA3JrB,GA4JpB,MACF,KAAKve,GAAAA,UACHp9B,KAAKmpE,WACDnpE,KAAKs8D,aAAasN,iBACd5pE,KAAKmoE,YAAahjE,EAAMw2C,OAASkwB,IAhKrB,GAiKpB,MACF,KAAK5gE,GAAAA,MACL,IAAKC,GAAAA,MACHlL,KAAK2rE,cAAc3rE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmoE,aAClD,MACF,SAEE,OAGAnoE,KAAKs8D,aAAa2D,YAAYoI,EAAeroE,KAAKmpE,aACpDnpE,KAAKwnE,iBAAiBhiE,KAAKxF,KAAKmpE,YAGlCnpE,KAAK+pE,mBAEL5kE,EAAM2F,kBAGRy4D,EAAFliE,UAAAyqE,eAAE,WACE,MAAO9rE,MAAKs8D,aAAa4M,QAAQlpE,KAAKmpE,YArLd,IAyL1B5F,EAAFliE,UAAA0oE,iBAAE,WACE/pE,KAAKwqE,iBAAiBT,oBAIhBxG,EAAVliE,UAAAqqE,mBAAE,SAA2BD,GAC7B,GAAQM,GAAW/rE,KAAKs8D,aAAa0P,YAAYhsE,KAAKs8D,aAAaiN,WAAWkC,EAAM,EAAG,GACnF,OAAO,IAAIR,IAAgBQ,EAAMM,EAAUA,EAAU/rE,KAAKisE,kBAAkBR,KAItElI,EAAVliE,UAAA4qE,kBAAE,SAA0BR,GAExB,OAAa53D,KAAT43D,GAA+B,OAATA,GACrBzrE,KAAKyoE,SAAWgD,EAAOzrE,KAAKs8D,aAAa4M,QAAQlpE,KAAKyoE,UACtDzoE,KAAKwoE,SAAWiD,EAAOzrE,KAAKs8D,aAAa4M,QAAQlpE,KAAKwoE,SACzD,OAAO,CAIT,KAAKxoE,KAAK8pE,WACR,OAAO,CAMT,KAAK,GAHCoC,GAAclsE,KAAKs8D,aAAaiN,WAAWkC,EAAM,EAAG,GAGjDvO,EAAOgP,EAAalsE,KAAKs8D,aAAa4M,QAAQhM,IAASuO,EAC9DvO,EAAOl9D,KAAKs8D,aAAamN,gBAAgBvM,EAAM,GAC/C,GAAIl9D,KAAK8pE,WAAW5M,GAClB,OAAO,CAIX,QAAO,GAODqG,EAAVliE,UAAA0+D,oBAAE,SAA4Bn+C,GAC1B,MAAQ5hB,MAAKs8D,aAAaqF,eAAe//C,IAAQ5hB,KAAKs8D,aAAayE,QAAQn/C,GAAQA,EAAM,MAInF2hD,EAAVliE,UAAA05C,OAAE,WACE,MAAO/6C,MAAK8F,MAA4B,QAApB9F,KAAK8F,KAAKjC,sBA/NlCtG,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,sBACEQ,SAAU,sbACVD,SAAU,mBACVM,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,mHA3BApC,KAAEqS,EAAAA,eAAFhS,aAAAL,KAAAsS,EAAAA,cAUA0zD,EAAA3jE,sEAuBA4oE,UAAAjrE,KAAAS,EAAAA,QAeAyqE,UAAAlrE,KAAAS,EAAAA,QASA8rE,aAAAvsE,KAAAS,EAAAA,QAQAspE,iBAAA/pE,KAAAoJ,EAAAA,SAQA63D,eAAAjhE,KAAAoJ,EAAAA,SAGA6gE,mBAAAjqE,KAAAoJ,EAAAA,SAGA6jE,mBAAAjtE,KAAAuJ,EAAAA,UAAAhJ,MAAAslE,OAMAG,KClEAD,GAAA,WA8EE,QAAFA,GAAsBh7D,EACsC22D,EAC3B3C,EACCx2D,GAC9B,GAJkB9F,KAAtBsI,mBAAsBA,EACsCtI,KAA5Di/D,aAA4DA,EAC3Bj/D,KAAjCs8D,aAAiCA,EACCt8D,KAAlC8F,KAAkCA,EA7Bb9F,KAArBsnE,eAAuD,GAAIl+D,GAAAA,aAGtCpJ,KAArBy+D,cAAsD,GAAIr1D,GAAAA,aAGrCpJ,KAArBwnE,iBAAyD,GAAIp+D,GAAAA,cAwBpDpJ,KAAKs8D,aACR,KAAMC,IAA2B,cAEnC,KAAKv8D,KAAKi/D,aACR,KAAM1C,IAA2B,mBAGnCv8D,MAAKmoE,YAAcnoE,KAAKs8D,aAAa8L,QA5BzC,MAnDEzkE,QAAFC,eACM0/D,EADNjiE,UAAA,kBAAE,WACsB,MAAOrB,MAAKmoE,iBAClC,SAAetkE,GACjB,GAAQwkE,GAAgBroE,KAAKmoE,YACnBG,EACFtoE,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,KAAW7D,KAAKs8D,aAAa8L,OACxFpoE,MAAKmoE,YAAcnoE,KAAKs8D,aAAaiM,UAAUD,EAAWtoE,KAAKwoE,QAASxoE,KAAKyoE,SACzEzoE,KAAKs8D,aAAa4M,QAAQb,KAAmBroE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmoE,cAC9EnoE,KAAK2oE,yCAMThlE,OAAFC,eACM0/D,EADNjiE,UAAA,gBAAE,WAC2B,MAAOrB,MAAKwgC,eACvC,SAAa38B,GACX7D,KAAKwgC,UAAYxgC,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,IACxE7D,KAAKmsE,eAAiBnsE,KAAKosE,uBAAuBpsE,KAAKwgC,4CAKzD78B,OAAFC,eACM0/D,EADNjiE,UAAA,eAAE,WAC0B,MAAOrB,MAAK8oE,cACtC,SAAYjlE,GACV7D,KAAK8oE,SAAW9oE,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,qCAKzEF,OAAFC,eACM0/D,EADNjiE,UAAA,eAAE,WAC0B,MAAOrB,MAAK+oE,cACtC,SAAYllE,GACV7D,KAAK+oE,SAAW/oE,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,qCAgDzEy/D,EAAFjiE,UAAAgK,mBAAE,WACErL,KAAK2oE,SAIPrF,EAAFjiE,UAAAgrE,eAAE,SAAeT,GACjB,GAAUU,GACAtsE,KAAKs8D,aAAaiN,WAAWvpE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmpE,YAAayC,EAAO,EAEtF5rE,MAAKy+D,cAAcj5D,KAAK8mE,EAE5B,IAAU7B,GAAczqE,KAAKs8D,aAAaqN,kBAAkB2C,EAExDtsE,MAAKsnE,eAAe9hE,KAAKxF,KAAKs8D,aAAaiN,WACvCvpE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmpE,YAAayC,EAC5C/9D,KAAK2B,IAAIxP,KAAKs8D,aAAaoN,QAAQ1pE,KAAKmpE,YAAasB,MAI3DnH,EAAFjiE,UAAAmoE,2BAAE,SAA2BrkE,GAK7B,GAAUkjE,GAAgBroE,KAAKmoE,YACrBt7C,EAAQ7sB,KAAK+6C,QAEnB,QAAQ51C,EAAMwF,SACZ,IAAK0yB,GAAAA,WACHr9B,KAAKmpE,WAAanpE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKmoE,YAAat7C,EAAQ,GAAK,EACrF,MACF,KAAK0Q,GAAAA,YACHv9B,KAAKmpE,WAAanpE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKmoE,YAAat7C,GAAS,EAAI,EACrF,MACF,KAAKyQ,GAAAA,SACHt9B,KAAKmpE,WAAanpE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKmoE,aAAc,EACzE,MACF,KAAK3qC,GAAAA,WACHx9B,KAAKmpE,WAAanpE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKmoE,YAAa,EACxE,MACF,KAAKv9D,GAAAA,KACH5K,KAAKmpE,WAAanpE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKmoE,aACtDnoE,KAAKs8D,aAAa+M,SAASrpE,KAAKmoE,aACrC,MACF,KAAKp9D,GAAAA,IACH/K,KAAKmpE,WAAanpE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKmoE,YACvD,GAAKnoE,KAAKs8D,aAAa+M,SAASrpE,KAAKmoE,aACzC,MACF,KAAKjrC,GAAAA,QACHl9B,KAAKmpE,WACDnpE,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,YAAahjE,EAAMw2C,QAAU,IAAM,EAC/E,MACF,KAAKve,GAAAA,UACHp9B,KAAKmpE,WACDnpE,KAAKs8D,aAAasN,iBAAiB5pE,KAAKmoE,YAAahjE,EAAMw2C,OAAS,GAAK,EAC7E,MACF,KAAK1wC,GAAAA,MACL,IAAKC,GAAAA,MACHlL,KAAKqsE,eAAersE,KAAKs8D,aAAa+M,SAASrpE,KAAKmoE,aACpD,MACF,SAEE,OAGAnoE,KAAKs8D,aAAa2D,YAAYoI,EAAeroE,KAAKmpE,aACpDnpE,KAAKwnE,iBAAiBhiE,KAAKxF,KAAKmpE,YAGlCnpE,KAAK+pE,mBAEL5kE,EAAM2F,kBAIRw4D,EAAFjiE,UAAAsnE,MAAE,WAAA,GAAF7oE,GAAAE,IACIA,MAAKmsE,eAAiBnsE,KAAKosE,uBAAuBpsE,KAAKmZ,UACvDnZ,KAAKusE,YAAcvsE,KAAKosE,uBAAuBpsE,KAAKs8D,aAAa8L,SACjEpoE,KAAKwsE,WAAaxsE,KAAKs8D,aAAa0P,YAAYhsE,KAAKmpE,WAEzD,IAAQsD,GAAazsE,KAAKs8D,aAAa4N,cAAc,QAEjDlqE,MAAK0sE,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKloE,IAAI,SAAA6qD,GAAO,MAAAA,GAAI7qD,IACvE,SAAAonE,GAAS,MAAA9rE,GAAK6sE,oBAAoBf,EAAOa,EAAWb,QACxD5rE,KAAKsI,mBAAmB6B,gBAI1Bm5D,EAAFjiE,UAAA0oE,iBAAE,WACE/pE,KAAKwqE,iBAAiBT,oBAOhBzG,EAAVjiE,UAAA+qE,uBAAE,SAA+BlP,GAC7B,MAAOA,IAAQl9D,KAAKs8D,aAAa4M,QAAQhM,IAASl9D,KAAKs8D,aAAa4M,QAAQlpE,KAAKmpE,YAC7EnpE,KAAKs8D,aAAa+M,SAASnM,GAAQ,MAIjCoG,EAAVjiE,UAAAsrE,oBAAE,SAA4Bf,EAAegB,GAC7C,GAAQhpD,GAAY5jB,KAAKs8D,aAAamF,OAC9BzhE,KAAKs8D,aAAaiN,WAAWvpE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmpE,YAAayC,EAAO,GAChF5rE,KAAKi/D,aAAayC,QAAQmL,mBAC9B,OAAO,IAAI5B,IACPW,EAAOgB,EAAUzC,oBAAqBvmD,EAAW5jB,KAAK8sE,mBAAmBlB,KAIvEtI,EAAVjiE,UAAAyrE,mBAAE,SAA2BlB,GAE7B,GAAUN,GAAatrE,KAAKs8D,aAAa4M,QAAQlpE,KAAKmpE,WAElD,QAAct1D,KAAV+3D,GAAiC,OAAVA,GACvB5rE,KAAK+sE,4BAA4BzB,EAAYM,IAC7C5rE,KAAKgtE,6BAA6B1B,EAAYM,GAChD,OAAO,CAGT,KAAK5rE,KAAK8pE,WACR,OAAO,CAMT,KAAK,GAHCM,GAAepqE,KAAKs8D,aAAaiN,WAAW+B,EAAYM,EAAO,GAG5D1O,EAAOkN,EAAcpqE,KAAKs8D,aAAa+M,SAASnM,IAAS0O,EAC7D1O,EAAOl9D,KAAKs8D,aAAamN,gBAAgBvM,EAAM,GAClD,GAAIl9D,KAAK8pE,WAAW5M,GAClB,OAAO,CAIX,QAAO,GAODoG,EAAVjiE,UAAA0rE,4BAAE,SAAoCtB,EAAcG,GAChD,GAAI5rE,KAAKyoE,QAAS,CACtB,GAAYwE,GAAUjtE,KAAKs8D,aAAa4M,QAAQlpE,KAAKyoE,SACzCyE,EAAWltE,KAAKs8D,aAAa+M,SAASrpE,KAAKyoE,QAEjD,OAAOgD,GAAOwB,GAAYxB,IAASwB,GAAWrB,EAAQsB,EAGxD,OAAO,GAOD5J,EAAVjiE,UAAA2rE,6BAAE,SAAqCvB,EAAcG,GACjD,GAAI5rE,KAAKwoE,QAAS,CACtB,GAAY2E,GAAUntE,KAAKs8D,aAAa4M,QAAQlpE,KAAKwoE,SACzC4E,EAAWptE,KAAKs8D,aAAa+M,SAASrpE,KAAKwoE,QAEjD,OAAOiD,GAAO0B,GAAY1B,IAAS0B,GAAWvB,EAAQwB,EAGxD,OAAO,GAOD9J,EAAVjiE,UAAA0+D,oBAAE,SAA4Bn+C,GAC1B,MAAQ5hB,MAAKs8D,aAAaqF,eAAe//C,IAAQ5hB,KAAKs8D,aAAayE,QAAQn/C,GAAQA,EAAM,MAInF0hD,EAAVjiE,UAAA05C,OAAE,WACE,MAAO/6C,MAAK8F,MAA4B,QAApB9F,KAAK8F,KAAKjC,sBA9QlCtG,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,gBACEQ,SAAU,4fACVD,SAAU,cACVM,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJAvBApC,KAAE8gE,GAAFzgE,aAAAL,KAAAsS,EAAAA,aAkGAtS,KAAAqS,EAAAA,eAAAhS,aAAAL,KAAAsS,EAAAA,cAvFAyzD,EAAQ1jE,sEAkBR4oE,UAAAjrE,KAAAS,EAAAA,QAcAyqE,UAAAlrE,KAAAS,EAAAA,QASA8rE,aAAAvsE,KAAAS,EAAAA,QAQAspE,iBAAA/pE,KAAAoJ,EAAAA,SAQA83D,gBAAAlhE,KAAAoJ,EAAAA,SAGA6gE,mBAAAjqE,KAAAoJ,EAAAA,SAGA6jE,mBAAAjtE,KAAAuJ,EAAAA,UAAAhJ,MAAAslE,OAMAE,KC5DAE,GAAA,WASE,QAAFA,GAAsB3yC,EACsCw8C,EAC1B/Q,EAC0B2C,EAC9CnjD,GAJQ9b,KAAtB6wB,MAAsBA,EACsC7wB,KAA5DqtE,SAA4DA,EAC1BrtE,KAAlCs8D,aAAkCA,EAC0Bt8D,KAA5Di/D,aAA4DA,EAGxDj/D,KAAKqtE,SAAS7zB,aAAav3C,UAAU,WAAM,MAAA6Z,GAAkB3R,iBA7CjE,MAiDExG,QAAFC,eAAM4/D,EAANniE,UAAA,wBAAE,WACE,GAAiC,SAA7BrB,KAAKqtE,SAASC,YAChB,MAAOttE,MAAKs8D,aACPmF,OAAOzhE,KAAKqtE,SAASlE,WAAYnpE,KAAKi/D,aAAayC,QAAQ6L,gBACvDpD,mBAEX,IAAiC,QAA7BnqE,KAAKqtE,SAASC,YAChB,MAAOttE,MAAKs8D,aAAa0P,YAAYhsE,KAAKqtE,SAASlE,WAEzD,IAAUmC,GAAatrE,KAAKs8D,aAAa4M,QAAQlpE,KAAKqtE,SAASlE,WAK3D,OAJwBnpE,MAAKs8D,aAAa0P,YACtChsE,KAAKs8D,aAAaiN,WAAW+B,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BtrE,KAAKs8D,aAAa0P,YACrChsE,KAAKs8D,aAAaiN,WAAW+B,EFtCT,GEsCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvF3nE,OAAFC,eAAM4/D,EAANniE,UAAA,yBAAE,WACE,MAAoC,SAA7BrB,KAAKqtE,SAASC,YACjBttE,KAAK6wB,MAAM28C,2BAA6BxtE,KAAK6wB,MAAM48C,wDAIzD9pE,OAAFC,eAAM4/D,EAANniE,UAAA,uBAAE,WACE,OACEuqE,MAAS5rE,KAAK6wB,MAAM68C,eACpBjC,KAAQzrE,KAAK6wB,MAAM88C,cACnBC,aAAc5tE,KAAK6wB,MAAMg9C,oBACzB7tE,KAAKqtE,SAASC,8CAIlB3pE,OAAFC,eAAM4/D,EAANniE,UAAA,uBAAE,WACE,OACEuqE,MAAS5rE,KAAK6wB,MAAMi9C,eACpBrC,KAAQzrE,KAAK6wB,MAAMk9C,cACnBH,aAAc5tE,KAAK6wB,MAAMm9C,oBACzBhuE,KAAKqtE,SAASC,8CAIlB9J,EAAFniE,UAAA4sE,qBAAE,WACEjuE,KAAKqtE,SAASC,YAA2C,SAA7BttE,KAAKqtE,SAASC,YAAyB,aAAe,SAIpF9J,EAAFniE,UAAA6sE,gBAAE,WACEluE,KAAKqtE,SAASlE,WAA0C,SAA7BnpE,KAAKqtE,SAASC,YACrCttE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKqtE,SAASlE,YAAa,GAC3DnpE,KAAKs8D,aAAasN,iBACd5pE,KAAKqtE,SAASlE,WAAyC,QAA7BnpE,KAAKqtE,SAASC,aAAyB,GF3ErD,KEgF1B9J,EAAFniE,UAAA8sE,YAAE,WACEnuE,KAAKqtE,SAASlE,WAA0C,SAA7BnpE,KAAKqtE,SAASC,YACrCttE,KAAKs8D,aAAauN,kBAAkB7pE,KAAKqtE,SAASlE,WAAY,GAC1DnpE,KAAKs8D,aAAasN,iBACd5pE,KAAKqtE,SAASlE,WACmB,QAA7BnpE,KAAKqtE,SAASC,YAAwB,EFrF9B,KE0F1B9J,EAAFniE,UAAA+sE,gBAAE,WACE,OAAKpuE,KAAKqtE,SAAS7E,WAGXxoE,KAAKqtE,SAAS7E,UACjBxoE,KAAKquE,YAAYruE,KAAKqtE,SAASlE,WAAYnpE,KAAKqtE,SAAS7E,WAIhEhF,EAAFniE,UAAAitE,YAAE,WACE,OAAQtuE,KAAKqtE,SAAS5E,UACjBzoE,KAAKquE,YAAYruE,KAAKqtE,SAASlE,WAAYnpE,KAAKqtE,SAAS5E,UAIxDjF,EAAVniE,UAAAgtE,YAAE,SAAoBE,EAAUC,GAC5B,MAAiC,SAA7BxuE,KAAKqtE,SAASC,YACTttE,KAAKs8D,aAAa4M,QAAQqF,IAAUvuE,KAAKs8D,aAAa4M,QAAQsF,IACjExuE,KAAKs8D,aAAa+M,SAASkF,IAAUvuE,KAAKs8D,aAAa+M,SAASmF,GAErC,QAA7BxuE,KAAKqtE,SAASC,YACTttE,KAAKs8D,aAAa4M,QAAQqF,IAAUvuE,KAAKs8D,aAAa4M,QAAQsF,GAGhE3gE,KAAK0/B,MAAMvtC,KAAKs8D,aAAa4M,QAAQqF,GFlHpB,KEmHpB1gE,KAAK0/B,MAAMvtC,KAAKs8D,aAAa4M,QAAQsF,GFnHjB,oBEM5BjxE,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,sBACEQ,SAAU,mxBACVD,SAAU,oBACVM,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAjBApC,KAAQ8gE,GAARzgE,aAAAL,KAAAsS,EAAAA,aAuBAtS,SAAsEsW,GAAWjW,aAAjFL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAiChW,MAAjCqkE,QA1BA5kE,KAAQkJ,EAAAA,qBAdR+8D,uCAmJA,GAAA1jE,GAAAE,QAwHAA,KAAAs8D,aAAAA,EAAEt8D,KAAFi/D,aAAAA,EACkCj/D,KAAlCsI,mBAAAA,kQAHA,KAAAi0D,IAAA,cAQA,KAAAv8D,KAAYi/D,aACZ,KAAA1C,IAAA,mBAGAv8D,MAAAusC,aAAA1b,EAAA1sB,QAAAlC,UAAA,WACAqG,EAAA6B,eAEQrK,EAAR05C,aAAA11C,SA7CA,MAgDAH,QAAOC,eAAPu/D,EAAA9hE,UAAA,WA3GAoU,+HAGAE,YAAA,EACEC,cAAF,kDAOAH,iIAGAE,YAAA,EACEC,cAAF,iDAIAH,+HAGAE,YAAA,EACEC,cAAF,iDAIAH,+HAGAE,YAAA,EACEC,cAAF,oMAyCA5V,KAAAw5C,aAAA11C,QAEA6R,YAAA,EACEC,cAAF,qDAIAH,6EACAzV,KAAAyuE,sBAAA,GAEA94D,YAAA,EACEC,cAAF,yHA2BA5V,KAAAmpE,WAAAnpE,KAAAu+D,SAAAv+D,KAAAs8D,aAAA8L,QAEIpoE,KAAK0uE,aAAT1uE,KAAA2uE,iFAMA3uE,KAAAyuE,sBAAA,EACQzuE,KAAK4uE,uFAMb5uE,KAAAw5C,aAAAx0C,gDAKA,GAAAuG,GAAoCpH,EAApCqkE,SAAArkE,EAAAskE,SAAAtkE,EAAA2lE,iCAGQ,GAAR+E,GAAmB7uE,KAAnB8uE,+BAIQ9uE,KAARsI,mBAAAygB,gBACQ8lD,EAARlG,SAGA3oE,KAAOw5C,aAAP11C,4IAWA,SAAA9D,KAAAstE,YAAAttE,KAAA+uE,qEACA1jE,yGAOArL,KAAAsnE,eAAA9hE,KAAA03D,8RAqBAl9D,KAAAstE,YAAAuB,0OAeA1L,EAAAvlE,aACAL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,uhCAlOAY,QAAA,67CACEH,MACFC,MAAA,gBAEEH,SAAF,cACEM,cAAFC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAwjE,EAAAnnD,eAAA,WAAA,QACAze,KAAAkmE,iJAhJAN,EAAQvjE,gBA+PRovE,kBAAAzxE,KAAAS,EAAAA,QA7QAugE,UAAAhhE,KAAAS,EAAAA,6DAiKAwqE,UAAAjrE,KAAAS,EAAAA,QAeAyqE,UAAAlrE,KAAGS,EAAAA,QAQH8rE,aAAAvsE,KAAAS,EAAAA,QAGA0gE,YAAAnhE,KAAAS,EAAAA,QAQAspE,iBAAA/pE,KAAAoJ,EAAAA,SAQA63D,eAAAjhE,KAAQoJ,EAAAA,SAQR83D,gBAAAlhE,KAAAoJ,EAAAA,SAGA4gE,iBAAAhqE,KAAQoJ,EAAAA,SAGRooE,YAAAxxE,KAAAuJ,EAAAA,UAAShJ,MAATulE,MAMA4L,WAAA1xE,KAAAuJ,EAAAA,UAAAhJ,MAAAwlE,MAMA4L,gBAAA3xE,KAAGuJ,EAAAA,UAAHhJ,MAAAylE,OAMAJ,KCpOajH,IAKX7lB,eAAgB98B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7L,EAAAA,OACZqa,QAAS,EACTpa,UAAW,mBAEb8L,EAAAA,WAAW,gBAAkBC,EAAAA,QAAQ,mCAAoChM,EAAAA,OACvEqa,QAAS,EACTpa,UAAW,kBAEb8L,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBhM,EAAAA,OAAOqa,QAAS,QAIlEm0C,eAAgB5iD,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7L,EAAAA,OAAOqa,QAAS,KAC9BxO,EAAAA,MAAM,QAAS7L,EAAAA,OAAOqa,QAAS,KAI/BtO,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDfWhCw1D,GAAgB,EAGP/Q,GACT,GAAIjuD,GAAAA,eAAqC,kCAQhCuzD,IACXvmE,QAASihE,GACT7tC,MAAOjD,EAAAA,SACPkD,WAAY4+C,kBAMZ,QAAFC,GAAqB3pE,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAA2pE,MACaC,GACTh/D,EAAW++D,IASfjT,GAAA,SAAA99D,GA+BE,QAAF89D,GAAc90D,GACd,MAAIhJ,GAAJgF,KAAAtD,KAAUsH,IAAVtH,KATA,MAJ6CzB,GAA7C69D,EAAA99D,GAgBE89D,EAAF/6D,UAAA6K,gBAAE,WACElM,KAAKuvE,UAAUX,kCApCnBrxE,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,yBACEQ,SAAU;omBACVI,QAAF,shBACEH,MACFC,MAAA,yBACM68D,oBAAN,UACIC,uCAAJ,sBAEA31D,YACA41D,GAAA7lB,eACA6lB,GAAAC,gBAEAn9D,SAAA,uBACAM,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEiI,QAAF,sEA9EAw0D,EAAAx8D,0DAsFAw8D,oDAsBAp8D,KAAAq8D,QAAAA,EAmJAr8D,KAAA6pB,SAAAA,EAAsB7pB,KAAtBwI,QAAsBA,EACAxI,KAAtBmjB,kBAAuCA,EACjBnjB,KAAtBs8D,aAAAA,EACsBt8D,KAAtB8F,KAAAA,EAEkC9F,KAAlCkX,UAA8CA,kbAP9C,KAAAqlD,IAA8C,cAW9Cv8D,MAAAmpC,gBAAAD,EAtEA,MAyEAvlC,QAAAC,eAAA44D,EAAAn7D,UAAA,WAhJAoU,eAEI,MAAJzV,MAAAy8D,WAAAz8D,KAAA08D,iBAAA18D,KAAA08D,iBAAA74D,MAAA,OAEA+qB,0FAGAjZ,YAAA,EACEC,cAAF,+CAOAH,oCAAAzV,KAAA08D,iBAAA18D,KAAA08D,iBAAAC,uBAAA9oD,KAGA+a,+BAGAjZ,YAAA,EACEC,cAAF,gJAUAD,YAAA,EACEC,cAAF,kDAIAH,qEAAAzV,KAAA08D,iBAAAzvD,WAAAjN,KAAA2gC,WAGA/R,gBAEA,GAAAkS,GAAAxvB,EAAAA,sBAAAzN,wBACU7D,KAAV2gC,UAAAG,EAEQ9gC,KAAR48D,gBAAA94D,KAAAg9B,KAGAnrB,YAAA,EACEC,cAAF,gDA6BAH,8FAEEG,cAAF,mDAOAH,gGACEG,cAAF,kDAIAH,wEACAE,YAAA,EACEC,cAAF,kDAGAH,wEACAE,YAAA,EACEC,cAAF,qDAAAH,gFAGAE,YAAA,EACEC,cAAF,oDA4CA5V,KAAA68D,mBAAApqD,cACIzS,KAAK48D,gBAAT53D,WACQhF,KAAR88D,YACQ98D,KAAR88D,UAAA/1C,UAEQ/mB,KAAK+8D,mBAAb,sCAOA,GAAA1gC,GAAAr8B,KAAAwgC,2BACAxgC,KAAAs8D,aAAAU,SAAA3gC,EAAAr8B,KAAAwgC,YACQxgC,KAARi9D,iBAAAn5D,KAAAo5D,qLAoBA,IAAAl9D,KAAA08D,iBAAA,KAAAtzC,OAAA,8DAEAppB,MAAA08D,iBAAAv3C,EACAnlB,KAAA68D,mBACQ78D,KAAR08D,iBAAAS,aAAAl7D,UAAA,SAAA4B,GAAA,MAAA/D,GAAA0gC,UAAA38B,mEAQA,IAAA7D,KAAA08D,iBACA,KAAAtzC,OAAA,+DAEMppB,MAANkX,YACAlX,KAAAo9D,0BAAAp9D,KAAAkX,UAAAktB,eAEApkC,KAAAq9D,QAAAr9D,KAAAs9D,gBAAAt9D,KAAAu9D,eACAv9D,KAAA6jC,SAAA,EAEI7jC,KAAKw9D,aAATh4D,gDAMA,IAAAxF,KAAA6jC,QAAA,CAEM7jC,KAAN88D,WAAA98D,KAAA88D,UAAAz4C,eACArkB,KAAA88D,UAAAv4C,SAEMvkB,KAAKy9D,aACXz9D,KAAAy9D,WAAA95B,QACQ3jC,KAAKy9D,WAAb,MAEMz9D,KAAK09D,iBAAX19D,KAAA09D,gBAAAvV,YACAnoD,KAAA09D,gBAAAn5C,QAGA,IAAAo5C,GAAA,WAGA79D,EAAA+jC,UACA/jC,EAAA+jC,SAAA,EACU/jC,EAAK89D,aAAfp4D,OACQ1F,EAAKs9D,0BAAb,MAGAp9D,MAAAo9D,2BACA,kBAAAp9D,MAAAo9D,0BAAA71D,OAOMvH,KAANo9D,0BAAA71D,QACMsf,WAAN82C,IAGAA,qDASA39D,MAAAy9D,YACAz9D,KAAAy9D,WAAA95B,QAEA3jC,KAAAy9D,WAAAz9D,KAAAq8D,QAAA1xC,KAAAyxC,IACAjuD,UAAAnO,KAAA8F,KAAA9F,KAAA8F,KAAAjC,MAAA,MAEQmgB,iBAAkBhkB,KAA1BmjB,kBACM+F,WAAN,0BAEAlpB,KAAAy9D,WAAkBI,cAAlB57D,UAAA,WAAA,MAAAnC,GAAA6jC,UACA3jC,KAAAy9D,WAAAK,kBAAAC,WAAA/9D,KAEIA,KAAKg+D,2DAMTh+D,MAAA09D,kBAAA19D,KAAA09D,gBAAA,GAAApyC,GAAAA,gBAAA8wC,GAAAp8D,KAAAmjB,oBAEAnjB,KAAA88D,WAEA98D,KAAAi+D,eAGAj+D,KAAA88D,UAAAz4C,gBACArkB,KAAA+8D,mBAAA/8D,KAAA88D,UAAAx4C,OAAAtkB,KAAA09D,iBAEQ19D,KAAK+8D,mBAAbvxC,SAAAuyC,WAAA/9D,KACMA,KAAKg+D,YAELh+D,KAAKwI,QAAXywC,SAAA/xB,eAAAnlB,KAAAC,EAAAA,KAAA,IAAAC,UAAA,WAEAnC,EAAAg9D,UAAAn2B,oEAQAla,EAAA,GAAAC,GAAAA,oEACU0lB,aAAa,EACjB6B,cAAN,mCACM9lC,UAAWnO,KAAjB8F,KACMojC,eAANlpC,KAAAmpC,kBACMjgB,WAAN,wBAEAlpB,MAAA88D,UAAA98D,KAAA6pB,SAAAuD,OAAwCX,GACxCzsB,KAAA88D,UAAAzwC,eAAAsrC,aAAA,OAAA,UAEIpzD,EAAAA,MAAJvE,KAAA88D,UAAyB33B,gBAAiBnlC,KAA1C88D,UAAyD3wC,cAAzDnsB,KAAA88D,UAAA/oB,gBAAAhyC,KAAA0V,EAAAA,OAAA,SAAAtS,GAGA,MACWA,GADXwF,UAAA84B,EAAAA,QAIA3jC,EAAA48D,kBAAAv3D,EAAAw2C,QAAAx2C,EAAAwF,UAAA2yB,EAAAA,aACAr7B,UAAA,WAAiC,MAAjCnC,GAAA6jC,+FAOA4E,oBAAAvoC,KAAA08D,iBAAAwB,6BACA11B,sBAAA,2BACOC,wBAAP,GACOC,mBAAP,GACOsL,qBACAxK,gBAEPK,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,2KAgBA,GAAA0S,GAAA78C,KAAA68C,gCACU78C,KAAK+8D,mBAAfvxC,SAAAqxB,MAAAA,GAEM78C,KAAKy9D,aACXz9D,KAAAy9D,WAAAK,kBAAAjhB,MAAAA,IAGA2f,EAAA5+D,aACAL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,6BAhYAO,SAAA,gBACES,gBAAiBC,EAAAA,wBAAnBC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAg9D,EAAAxgD,eAAiB,WAAjB,QACAze,KAAA4gE,gEA/FA5gE,SAAQsW,GAARjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAAsgE,QAjCA7gE,KAAE8gE,GAAFzgE,aAAAL,KAAAsS,EAAAA,aAkBAtS,KAAEqS,EAAAA,eAAFhS,aAAAL,KAAAsS,EAAAA,aAKAtS,SAAEsW,GAAFjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAoa,EAAAA,eAMAskD,EAAA58D,gBAjCA0+D,0BAAA/gE,KAAAS,EAAAA,QAuRAugE,UAAAhhE,KAAAS,EAAAA,0DA9IAq/D,UAAA9/D,KAAAS,EAAAA,QAGAiP,WAAA1P,KAAAS,EAAAA,QAYAwgE,eAAAjhE,KAAAoJ,EAAAA,SAGA83D,gBAAAlhE,KAAAoJ,EAAAA,SAcAuiB,aAAA3rB,KAAAS,EAAAA,QAQA0gE,YAAAnhE,KAAAS,EAAAA,QAmBAw/D,eAAAjgE,KAAGoJ,EAAAA,OAAH7I,MAAA,YAMA8/D,eAAArgE,KAAAoJ,EAAAA,OAAA7I,MAAA,YAGAs1B,SAAA71B,KAAAS,EAAAA,SAMAw+D,KCpLamC,IACXxhE,QAAS44B,EAAAA,kBACT14B,YAAaonB,EAAAA,WAAW,WAAM,MAAAm6C,MAC9B3oC,OAAO,GAII4oC,IACX1hE,QAAS2hE,EAAAA,cACTzhE,YAAaonB,EAAAA,WAAW,WAAM,MAAAm6C,MAC9B3oC,OAAO,iBAaP,QAAF8oC,GAEW3vB,EAEA4vB,GAFAh/D,KAAXovC,OAAWA,EAEApvC,KAAXg/D,cAAWA,EACPh/D,KAAK6D,MAAQ7D,KAAKovC,OAAOvrC,MAE7B,MAAAk7D,MAIAH,GAAA,WAwKE,QAAFA,GACcl5D,EACW42D,EAC2B2C,EAC1BC,GAJxB,GAAFp/D,GAAAE,IAKI,IAJUA,KAAd0F,YAAcA,EACW1F,KAAzBs8D,aAAyBA,EAC2Bt8D,KAApDi/D,aAAoDA,EAC1Bj/D,KAA1Bk/D,WAA0BA,EAhELl/D,KAArBm/D,WACM,GAAI/1D,GAAAA,aAGWpJ,KAArBo/D,UACM,GAAIh2D,GAAAA,aAGRpJ,KAAFm9D,aAAiB,GAAI/zD,GAAAA,aAGnBpJ,KAAF48D,gBAAoB,GAAIxzD,GAAAA,aAEtBpJ,KAAFm4C,WAAe,aAELn4C,KAAVq/D,aAA+C,aAErCr/D,KAAVs/D,mBAA+B,aAErBt/D,KAAVu/D,wBAAoC3uD,EAAAA,aAAaC,MAEvC7Q,KAAVw/D,oBAAgC5uD,EAAAA,aAAaC,MAGnC7Q,KAAVy/D,gBAAyC,WACrC,MAAO3/D,GAAK4/D,gBACR,MAAQC,oBAAuBC,KAAQ9/D,EAAK4F,YAAYC,cAAc9B,SAIpE7D,KAAV6/D,cAAuC,SAACvlD,GACxC,GAAUwlD,GAAehgE,EAAKigE,oBAAoBjgE,EAAKw8D,aAAa0D,YAAY1lD,EAAQzW,OACpF,QAAS/D,EAAK0P,MAAQswD,GAClBhgE,EAAKw8D,aAAa2D,YAAYngE,EAAK0P,IAAKswD,IAAiB,EACzD,MAAQI,kBAAqB1wD,IAAO1P,EAAK0P,IAAK2wD,OAAUL,KAItD9/D,KAAVogE,cAAuC,SAAC9lD,GACxC,GAAUwlD,GAAehgE,EAAKigE,oBAAoBjgE,EAAKw8D,aAAa0D,YAAY1lD,EAAQzW,OACpF,QAAS/D,EAAKyP,MAAQuwD,GAClBhgE,EAAKw8D,aAAa2D,YAAYngE,EAAKyP,IAAKuwD,IAAiB,EACzD,MAAQO,kBAAqB9wD,IAAOzP,EAAKyP,IAAK4wD,OAAUL,KAItD9/D,KAAVsgE,iBAA0C,SAAChmD,GAC3C,GAAUwlD,GAAehgE,EAAKigE,oBAAoBjgE,EAAKw8D,aAAa0D,YAAY1lD,EAAQzW,OACpF,OAAQ/D,GAAKygE,aAAgBT,IAAgBhgE,EAAKygE,YAAYT,IAClDU,qBAAuB,GAA/B,MAIExgE,KAAVygE,WACMC,EAAAA,WAAWC,SACN3gE,KAAKy/D,gBAAiBz/D,KAAK6/D,cAAe7/D,KAAKogE,cAAepgE,KAAKsgE,mBAGpEtgE,KAAV0/D,iBAA4B,GAOnB1/D,KAAKs8D,aACR,KAAMC,IAA2B,cAEnC,KAAKv8D,KAAKi/D,aACR,KAAM1C,IAA2B,mBAInCv8D,MAAKw/D,oBAAsBlD,EAAasE,cAAc3+D,UAAU,WAC9DnC,EAAK+D,MAAQ/D,EAAK+D,QAiHxB,MAjREF,QAAFC,eACMg7D,EADNv9D,UAAA,qBAAE,SACkBwC,GADlB,GAAF/D,GAAAE,IAES6D,KAIL7D,KAAK6gE,YAAch9D,EACnB7D,KAAK6gE,YAAYC,eAAe9gE,MAChCA,KAAKu/D,wBAAwB9sD,cAE7BzS,KAAKu/D,wBAA0Bv/D,KAAK6gE,YAAY5D,iBAAiBh7D,UAAU,SAACkX,GAC1ErZ,EAAK+D,MAAQsV,EACbrZ,EAAKu/D,aAAalmD,GAClBrZ,EAAKq4C,aACLr4C,EAAKs/D,UAAU55D,KAAK,GAAIu5D,IAAwBj/D,EAAMA,EAAK4F,YAAYC,gBACvE7F,EAAKq/D,WAAW35D,KAAK,GAAIu5D,IAAwBj/D,EAAMA,EAAK4F,YAAYC,oDAM5EhC,OAAFC,eACMg7D,EADNv9D,UAAA,2BAAE,SACwBwC,GACtB7D,KAAKugE,YAAc18D,EACnB7D,KAAKs/D,sDAKP37D,OAAFC,eACMg7D,EADNv9D,UAAA,aAAE,WACwB,MAAOrB,MAAKi6B,YACpC,SAAUp2B,GACRA,EAAQ7D,KAAKs8D,aAAa0D,YAAYn8D,GACtC7D,KAAK0/D,iBAAmB77D,GAAS7D,KAAKs8D,aAAayE,QAAQl9D,GAC3DA,EAAQ7D,KAAK+/D,oBAAoBl8D,EACrC,IAAUm9D,GAAUhhE,KAAK6D,KACrB7D,MAAKi6B,OAASp2B,EACd7D,KAAKihE,aAAap9D,GAEb7D,KAAKs8D,aAAaU,SAASgE,EAASn9D,IACvC7D,KAAKm9D,aAAa33D,KAAK3B,oCAM3BF,OAAFC,eACMg7D,EADNv9D,UAAA,WAAE,WACsB,MAAOrB,MAAK65B,UAClC,SAAQh2B,GACN7D,KAAK65B,KAAO75B,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,IACnE7D,KAAKs/D,sDAKP37D,OAAFC,eACMg7D,EADNv9D,UAAA,WAAE,WACsB,MAAOrB,MAAK45B,UAClC,SAAQ/1B,GACN7D,KAAK45B,KAAO55B,KAAK+/D,oBAAoB//D,KAAKs8D,aAAa0D,YAAYn8D,IACnE7D,KAAKs/D,sDAKP37D,OAAFC,eACMg7D,EADNv9D,UAAA,gBAAE,WAC0B,QAASrB,KAAK2gC,eACxC,SAAa98B,GACf,GAAUi9B,GAAWxvB,EAAAA,sBAAsBzN,GACjCyF,EAAUtJ,KAAK0F,YAAYC,aAE7B3F,MAAK2gC,YAAcG,IACrB9gC,KAAK2gC,UAAYG,EACjB9gC,KAAK48D,gBAAgBp3D,KAAKs7B,IAIxBA,GAAYx3B,EAAQ0xB,MAItB1xB,EAAQ0xB,wCAoFZ4jC,EAAFv9D,UAAAiL,YAAE,WACEtM,KAAKu/D,wBAAwB9sD,cAC7BzS,KAAKw/D,oBAAoB/sD,cACzBzS,KAAKm9D,aAAan4D,WAClBhF,KAAK48D,gBAAgB53D,YAIvB45D,EAAFv9D,UAAA6/D,0BAAE,SAA0BzpC,GACxBz3B,KAAKs/D,mBAAqB7nC,GAI5BmnC,EAAFv9D,UAAA8/D,SAAE,SAAStW,GACP,MAAO7qD,MAAKygE,WAAazgE,KAAKygE,WAAW5V,GAAK,MAOhD+T,EAAFv9D,UAAA+/D,6BAAE,WACE,MAAOphE,MAAKk+D,6BAOdU,EAAFv9D,UAAA68D,0BAAE,WACE,MAAOl+D,MAAKk/D,WAAal/D,KAAKk/D,WAAWhB,4BAA8Bl+D,KAAK0F,aAI9Ek5D,EAAFv9D,UAAAk2B,WAAE,SAAW1zB,GACT7D,KAAK6D,MAAQA,GAIf+6D,EAAFv9D,UAAAm2B,iBAAE,SAAiBC,GACfz3B,KAAKq/D,aAAe5nC,GAItBmnC,EAAFv9D,UAAAq2B,kBAAE,SAAkBD,GAChBz3B,KAAKm4C,WAAa1gB,GAIpBmnC,EAAFv9D,UAAAs2B,iBAAE,SAAiBC,GACf53B,KAAKiN,SAAW2qB,GAGlBgnC,EAAFv9D,UAAA47B,WAAE,SAAW93B,GACb,GAAUk8D,GAAiBl8D,EAAMw2C,QAAUx2C,EAAMwF,UAAY6yB,EAAAA,UAErDx9B,MAAK6gE,aAAeQ,IAAmBrhE,KAAK0F,YAAYC,cAAc27D,WACxEthE,KAAK6gE,YAAYl2C,OACjBxlB,EAAM2F,mBAIV8zD,EAAFv9D,UAAAkgE,SAAE,SAAS19D,GACX,GAAQq5D,GAAOl9D,KAAKs8D,aAAakF,MAAM39D,EAAO7D,KAAKi/D,aAAauC,MAAMpC,UAClEp/D,MAAK0/D,iBAAmBxC,GAAQl9D,KAAKs8D,aAAayE,QAAQ7D,GAC1DA,EAAOl9D,KAAK+/D,oBAAoB7C,GAE3Bl9D,KAAKs8D,aAAaU,SAASE,EAAMl9D,KAAKi6B,QAMzCj6B,KAAKs/D,sBALLt/D,KAAKi6B,OAASijC,EACdl9D,KAAKq/D,aAAanC,GAClBl9D,KAAKm9D,aAAa33D,KAAK03D,GACvBl9D,KAAKo/D,UAAU55D,KAAK,GAAIu5D,IAAwB/+D,KAAMA,KAAK0F,YAAYC,kBAM3Ei5D,EAAFv9D,UAAA62C,UAAE,WACEl4C,KAAKm/D,WAAW35D,KAAK,GAAIu5D,IAAwB/+D,KAAMA,KAAK0F,YAAYC,iBAI1Ei5D,EAAFv9D,UAAAs7D,iBAAE,WACE,MAAO38D,MAAKk/D,WAAal/D,KAAKk/D,WAAWriB,UAAQhpC,IAInD+qD,EAAFv9D,UAAA27B,QAAE,WAEMh9B,KAAK6D,OACP7D,KAAKihE,aAAajhE,KAAK6D,OAGzB7D,KAAKm4C,cAICymB,EAAVv9D,UAAA4/D,aAAE,SAAqBp9D,GACnB7D,KAAK0F,YAAYC,cAAc9B,MAC3BA,EAAQ7D,KAAKs8D,aAAamF,OAAO59D,EAAO7D,KAAKi/D,aAAayC,QAAQtC,WAAa,IAO7ER,EAAVv9D,UAAA0+D,oBAAE,SAA4Bn+C,GAC1B,MAAQ5hB,MAAKs8D,aAAaqF,eAAe//C,IAAQ5hB,KAAKs8D,aAAayE,QAAQn/C,GAAQA,EAAM,qBArS7FrkB,KAACiB,EAAAA,UAADV,OACEW,SAAU,uBACVC,WACEigE,GACAE,IACC1hE,QAASykE,GAA0BvkE,YAAauhE,IAEnD1/D,MACE2iE,uBAAwB,OACxBpf,mBAAoB,kDACpBqf,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZ3jC,SAAU,YACVE,YAAa,sBAEfz/B,SAAU,6DA/EZzB,KAAEC,EAAAA,aAmBFD,KAAQ8gE,GAARzgE,aAAAL,KAoNOsS,EAAAA,aACPtS,SAAAsW,GAAAjW,aAAAL,KAAOsS,EAAAA,WAAPtS,KAAmBuW,EAAAA,OAAnBhW,MAA0BqkE,QApN1B5kE,KAAQ8lD,GAARzlD,aAAAL,KAqNOsS,EAAAA,gCAtJPuyD,gBAAA7kE,KAAGS,EAAAA,QAqBHwiE,sBAAAjjE,KAAGS,EAAAA,QAQH6F,QAAAtG,KAAGS,EAAAA,QAiBHwR,MAAAjS,KAAGS,EAAAA,QASHuR,MAAAhS,KAAGS,EAAAA,QASHiP,WAAA1P,KAAGS,EAAAA,QAsBHmhE,aAAA5hE,KAAGoJ,EAAAA,SAIHy4D,YAAA7hE,KAAGoJ,EAAAA,UAuLHi4D,KCjVAyD,GAAA,WAAA,QAAAA,MAGsC,sBAHtC9kE,KAACiB,EAAAA,UAADV,OACEW,SAAU,gCAEZ4jE,KAGAC,GAAA,WA+CE,QAAFA,GACWzxC,EACCvoB,EACei6D,GAFhBviE,KAAX6wB,MAAWA,EACC7wB,KAAZsI,mBAAYA,EA7BFtI,KAAV6S,cAA0BjC,EAAAA,aAAaC,KAgCvC,IAAU2xD,GAAiB9pD,OAAO6pD,EAC9BviE,MAAKkN,SAAYs1D,GAAqC,IAAnBA,EAAwBA,EAAiB,KARhF,MAhBE7+D,QAAFC,eACM0+D,EADNjhE,UAAA,gBAAE,WAEE,WAA0BwS,KAAnB7T,KAAK2gC,UAA0B3gC,KAAK+9D,WAAW9wD,WAAajN,KAAK2gC,eAE1E,SAAa98B,GACX7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,oCAsBzCy+D,EAAFjhE,UAAAiiB,YAAE,SAAYnf,GACNA,EAAQ45D,YACV/9D,KAAKyiE,sBAITH,EAAFjhE,UAAAiL,YAAE,WACEtM,KAAK6S,cAAcJ,eAGrB6vD,EAAFjhE,UAAAgK,mBAAE,WACErL,KAAKyiE,sBAGPH,EAAFjhE,UAAAylB,MAAE,SAAM3hB,GACAnF,KAAK+9D,aAAe/9D,KAAKiN,WAC3BjN,KAAK+9D,WAAWpzC,OAChBxlB,EAAMgyB,oBAIFmrC,EAAVjhE,UAAAohE,mBAAE,WAAA,GAAF3iE,GAAAE,KACU0iE,EAAqB1iE,KAAK+9D,WAAa/9D,KAAK+9D,WAAWnB,gBAAkBpxD,EAAAA,KACzEm3D,EAAgB3iE,KAAK+9D,YAAc/9D,KAAK+9D,WAAWrB,iBACrD18D,KAAK+9D,WAAWrB,iBAAiBE,gBAAkBpxD,EAAAA,KACjDo3D,EAAoB5iE,KAAK+9D,WAC3Bx5D,EAAAA,MAAMvE,KAAK+9D,WAAWP,aAAcx9D,KAAK+9D,WAAWH,cACpDpyD,EAAAA,IAEJxL,MAAK6S,cAAcJ,cACnBzS,KAAK6S,cAAgBtO,EAAAA,MACnBvE,KAAK6wB,MAAM1sB,QACXu+D,EACAC,EACAC,GACA3gE,UAAU,WAAM,MAAAnC,GAAKwI,mBAAmB6B,iCA3F9C5M,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,wBACEQ,SAAU,+lBACVI,QAAF,quBACEH,MACFC,MAAA,wHAKI0jE,qBAAJ,8CACIC,mBAAJ,4CACI1pC,UAAJ,mBAEAp6B,SAAA,sBACAM,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFAzBApC,KAAQI,OAARC,aAAAL,KAAAM,EAAAA,UAAAC,MAAA,iBA4DAwkE,EAAA1iE,mFA3BAqN,WAAA1P,KAAAS,EAAAA,QAGAkkC,gBAAA3kC,KAAQS,EAAAA,QAGR+kE,cAAAxlE,KAAAo2B,EAAAA,aAAA71B,MAAAukE,MAUAW,UAAAzlE,KAAAuJ,EAAAA,UAAQhJ,MAAR,aAMAwkE,KCpDAW,GAAA,WAAA,QAAAA,MA4CkC,sBA5ClC1lE,KAACkD,EAAAA,SAAD3C,OACE4C,SACEE,EAAAA,aACA4b,GACA0mD,GACA15C,EAAAA,cACAjT,EAAAA,WACAH,EAAAA,cAEFtV,SACEqiE,GACAC,GACA5G,GACAJ,GACAwC,GACA0D,GACAD,GACAgB,GACAC,GACAC,GACAC,IAEFziE,cACEoiE,GACAC,GACA5G,GACAJ,GACAwC,GACA0D,GACAD,GACAgB,GACAC,GACAC,GACAC,IAEF9kE,WACE+kE,GACAC,IAEFj6C,iBACE2yC,GACAoH,QAGJP,KC/DAU,GAAA,WAAA,QAAAA,KAqBU3jE,KAAVk6B,WAA+B,EAMrBl6B,KAAV4jE,QAA4B,EAH5B,MANEjgE,QAAFC,eACM+/D,EADNtiE,UAAA,gBAAE,WAC0B,MAAOrB,MAAKk6B,eACtC,SAAar2B,GAAkB7D,KAAKk6B,UAAY5oB,EAAAA,sBAAsBzN,oCAItEF,OAAFC,eACM+/D,EADNtiE,UAAA,aAAE,WACuB,MAAOrB,MAAK4jE,YACnC,SAAU//D,GAAkB7D,KAAK4jE,OAAStyD,EAAAA,sBAAsBzN,mDA1BlEtG,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,cACES,MACFE,KAAA,YACM8/B,0BAAN,uCACI2kC,+BAAJ,WACIC,iCAAJ,YACIC,4BAAJ,QACI5kE,MAAJ,eAEAF,SAAA,GACAI,QAAA,+SACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGAgkE,EAAA/jE,kEASA+jE,KCrBAjc,GAAA,WAAA,QAAAA,MAK+B,sBAL/BnqD,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUG,GAAiBD,EAAAA,cAC3BE,SAAU6iE,GAAY9iE,IACtBE,cAAe4iE,QAEjBjc,KCkBasc,GAAgB,GAAI7zD,GAAAA,eAAiC,iB3FOrD8zD,IAMXC,gBAAiB3qD,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,kBAAmB7L,EAAAA,OAAOC,UAAW,kBAC3C4L,EAAAA,MAAM,WAAY7L,EAAAA,OAAOC,UAAW,oBACpC8L,EAAAA,WAAW,4CACTC,EAAAA,QAlC0C,wCAsC9CwqD,sBAAuB5qD,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,kBAAmB7L,EAAAA,OACvByF,OAAQ,yBAERgxD,QAASC,gBAAiB,UAE5B7qD,EAAAA,MAAM,WAAY7L,EAAAA,OAChByF,OAAQ,wBAERgxD,QAASE,eAAgB,UAE3B5qD,EAAAA,WAAW,4CAA6CknC,EAAAA,OACtD1wB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiB/W,UAAU,IACrDO,EAAAA,QAnD0C,0CAwD9C4qD,cAAehrD,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,kBAAmB7L,EAAAA,OAAOyF,OAAQ,MAAOqG,WAAY,YAC3DD,EAAAA,MAAM,WAAY7L,EAAAA,OAAOyF,OAAQ,IAAKqG,WAAY,aAClDC,EAAAA,WAAW,4CACTC,EAAAA,QA5D0C,yC4FNhDwzC,GAAA,WAIE,QAAFA,GAAqBxF,GAAA3nD,KAArB2nD,UAAqBA,EACrB,sBALApqD,KAACiB,EAAAA,UAADV,OACEW,SAAU,gFAPZlB,KAAmBwc,EAAAA,eAWnBozC,KC4BIqX,GAAW,EAqBFC,GACT,GAAIt0D,GAAAA,eAAgD,uCAQxD28C,GAAA,SAAAxuD,GAmEE,QAAFwuD,GAA6D4X,EAC/Cp8D,EACAq8D,EACQxhD,EAEUjM,EACgCsf,EAE9CouC,GARhB,GAAF9kE,GASIxB,EATJgF,KAAAtD,KASU0kE,EAAWp8D,EAAoBq8D,IATzC3kE,WAGsBF,GAAtBqjB,kBAAsBA,EAG0CrjB,EAAhE02B,eAAgEA,EAnCtD12B,EAAV+kE,aAAwB,EAGZ/kE,EAAZglE,YAA0B,GAAI17D,GAAAA,aAGlBtJ,EAAZilE,cAA4B,GAAI37D,GAAAA,aAGrBtJ,EAAXklE,cAA2B,GAAIn8D,GAAAA,QAe7B/I,EAAFmlE,UAAc,8BAA8BT,KAG1C1kE,EAAFolE,mBAAuB,GAAIr8D,GAAAA,QAYvB/I,EAAK4kE,UAAYA,EACjB5kE,EAAKoX,UAAYA,EAIjBpX,EAAKolE,mBAAmBnjE,KAAKqZ,EAAAA,qBAAqB,SAACC,EAAGC,GACpD,MAAOD,GAAEE,YAAcD,EAAEC,WAAaF,EAAE/V,UAAYgW,EAAEhW,WACpDrD,UAAU,SAAAkD,GACY,SAApBA,EAAMoW,YACc,aAAlBpW,EAAMG,QACRxF,EAAKglE,YAAYt/D,OACU,cAAlBL,EAAMG,SACfxF,EAAKilE,cAAcv/D,UAKrBo/D,IACF9kE,EAAKqlE,WAAaP,EAAeO,cAvCvC,MAjCuC5mE,GAAvCuuD,EAAAxuD,GAQEqF,OAAFC,eACMkpD,EADNzrD,UAAA,kBAAE,WAEE,MAAOrB,MAAK6kE,aAAgB7kE,KAAK0kE,WAAa1kE,KAAK0kE,UAAUS,gBAE/D,SAAethE,GACb7D,KAAK6kE,YAAcvzD,EAAAA,sBAAsBzN,oCAgE3CipD,EAAFzrD,UAAA+jE,YAAE,WACE,QAAIplE,KAAK0kE,WAI4E,aAA3E1kE,KAAKqlE,SAAWrlE,KAAK0kE,UAAUY,YAActlE,KAAKulE,sBAM9DzY,EAAFzrD,UAAAkkE,kBAAE,WACE,MAAOvlE,MAAKqlE,SAAW,WAAa,aAGtCvY,EAAFzrD,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,IACQA,MAAKwlE,cAEPxlE,KAAKozB,OAAOrxB,KACVqiB,EAAAA,UAAS,MACT3M,EAAAA,OAAO,WAAM,MAAA3X,GAAKulE,WAAavlE,EAAK+nC,UACpC7lC,EAAAA,KAAK,IACLC,UAAU,WACVnC,EAAK+nC,QAAU,GAAIpkB,GAAAA,eAAe3jB,EAAK0lE,aAAa7d,UAAW7nD,EAAKqjB,sBAK1E2pC,EAAFzrD,UAAAiiB,YAAE,SAAYnf,GACVnE,KAAKglE,cAAclhE,KAAKK,IAG1B2oD,EAAFzrD,UAAAiL,YAAE,WACEhO,EAAJ+C,UAAUiL,YAAVhJ,KAAAtD,MACIA,KAAKklE,mBAAmBlgE,WACxBhF,KAAKglE,cAAchgE,YAIrB8nD,EAAFzrD,UAAAokE,eAAE,WACE,GAAIzlE,KAAK0lE,OAAS1lE,KAAKkX,UAAW,CACtC,GAAYyuD,GAAiB3lE,KAAKkX,UAAUktB,cAChCwhC,EAAc5lE,KAAK0lE,MAAM//D,aAC/B,OAAOggE,KAAmBC,GAAeA,EAAYluD,SAASiuD,GAGhE,OAAO,kBAlJXpoE,KAACwB,EAAAA,UAADjB,OAAAuB,QAAA,w+CACEZ,SAAU,sBACVO,SAAF,oBACEC,SAAU,4bACVK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEiI,QAAF,WAAA,YACEi+D,SAAF,SAAA,SAAA,kBACEv/D,YAAF29D,GAAAM,eACE7lE,YAGFvB,QAAA6mE,GAAA8B,aAEuCjyD,KAAvC3U,MACAC,MAAA,sBACM4mE,uBAAN,WACI5sC,kCAAJ,sCACI6sC,sCAAJ,6KAiDAzoE,KAAAglC,EAAAA,4BAhIAhlC,KAAE8a,EAAAA,mBALF9a,SAAQsW,GAARjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAAoa,EAAAA,cAmBA3a,KAAEI,OAAFC,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA8mB,EAAAA,2BAuHArnB,SAAAsW,GAAAjW,aAAAL,KAAeuW,EAAAA,OAAfhW,MAAsB2mE,MAAtBlnE,KAAAsS,EAAAA,cAEAi9C,EAAAltD,0EA3CAmlE,gBAAAxnE,KAAAoJ,EAAAA,SAUA6+D,eAAAjoE,KAAAo2B,EAAAA,aAAA71B,MAAAqvD,MAGAuY,QAAAnoE,KAAAuJ,EAAAA,UAAAhJ,MAAA,WAYAgvD,uBAiBcC,GAAd,yBAkFA,MALAA,GAAAnvD,aAMAL,KAAAiB,EAAAA,UAAAV,iCANAoB,MACAC,MAAA,sBAIA4tD,KClMAC,GAAA,WAkCE,QAAFA,GACqBtQ,EACPxX,EACA/vB,EACA7M,EAEJs8D,GANR,GAAF9kE,GAAAE,IACqBA,MAArB08C,MAAqBA,EACP18C,KAAdklC,SAAcA,EACAllC,KAAdmV,cAAcA,EACAnV,KAAdsI,mBAAcA,EANJtI,KAAVimE,0BAAsCr1D,EAAAA,aAAaC,KAUnD,IAAUq1D,GAA4BxpB,EAAMgoB,UACtChoB,EAAMgoB,UAAU7xD,cAAc9Q,KAAK0V,EAAAA,OAAO,SAAAtT,GAAW,QAAEA,EAAQghE,cAAet0D,EAAAA,KAIhF7Q,MAAKimE,0BAA4B1hE,EAAAA,MAC/Bm4C,EAAMtpB,OACNspB,EAAMr2B,OACN6/C,EACAxpB,EAAMsoB,cAAcjjE,KAAK0V,EAAAA,OAAO,SAAAtT,GAAW,SAAGA,EAAQghE,aAAchhE,EAAQ8I,cAE7EhL,UAAU,WAAM,MAAAnC,GAAKwI,mBAAmB6B,iBAGzCuyC,EAAMr2B,OACHtkB,KAAK0V,EAAAA,OAAO,WAAM,MAAAilC,GAAM+oB,oBACxBxjE,UAAU,WAAM,MAAAkT,GAAc0iB,SAASqN,EAAU,aAEpD/vB,EAAcK,QAAQ0vB,GAAUjjC,UAAU,SAAAoE,GACpCA,GAAUq2C,EAAMgoB,WAClBhoB,EAAMgoB,UAAUyB,mBAAmBrmE,KAInC8kE,IACF5kE,KAAKskE,eAAiBM,EAAeN,eACrCtkE,KAAKqkE,gBAAkBO,EAAeP,iBAQ5C,MAME1gE,QAAFC,eAAMopD,EAAN3rD,UAAA,gBAAE,WACE,MAAOrB,MAAK08C,MAAMzvC,0CAIpB+/C,EAAF3rD,UAAA+kE,QAAE,WACEpmE,KAAK08C,MAAM5kB,UAIbk1B,EAAF3rD,UAAAglE,YAAE,WACE,MAAOrmE,MAAK08C,MAAM2oB,UAIpBrY,EAAF3rD,UAAAkkE,kBAAE,WACE,MAAOvlE,MAAK08C,MAAM6oB,qBAIpBvY,EAAF3rD,UAAAilE,YAAE,WACE,MAAOtmE,MAAK08C,MAAMluB,IAIpBw+B,EAAF3rD,UAAAklE,YAAE,WACE,OAAQvmE,KAAK08C,MAAMyoB,aAAenlE,KAAK08C,MAAMzvC,UAI/C+/C,EAAF3rD,UAAAmlE,SAAE,SAASrhE,GACP,OAAQA,EAAMwF,SAEZ,IAAKO,GAAAA,MACL,IAAKD,GAAAA,MACEP,EAAAA,eAAevF,KAClBA,EAAM2F,iBACN9K,KAAKomE,UAGP,MACF,SAKE,YAJIpmE,KAAK08C,MAAMgoB,WACb1kE,KAAK08C,MAAMgoB,UAAU+B,qBAAqBthE,MAYlD6nD,EAAF3rD,UAAAkG,MAAE,SAAMlB,OAAR,KAAAA,IAAQA,EAAR,WACIrG,KAAKmV,cAAc0iB,SAAS73B,KAAKklC,SAAU7+B,IAG7C2mD,EAAF3rD,UAAAiL,YAAE,WACEtM,KAAKimE,0BAA0BxzD,cAC/BzS,KAAKmV,cAAcU,eAAe7V,KAAKklC,0BA/I3C3nC,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,6BACEY,QAAF,64BACEJ,SAAU,mRACVK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE2G,YACF29D,GAAAC,gBACAD,GAAAE,uBAEAjlE,MACAC,MAAA,6BACMC,KAAN,SACIgjD,YAAJ,kBACIppB,kBAAJ,oBACI0tC,uBAAJ,gBACI/tD,uBAAJ,gBACI7Q,uBAAwB,iBACxBi+D,uBAAwB,gBACxB5lE,UAAJ,YACIs+B,YAAJ,mBACIkoC,qBAAsB,uQA/B1BppE,KAAE2Y,EAAAA,eAZF3Y,KAAEkJ,EAAAA,oBAPFlJ,SAAQsW,GAARjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAA2mE,MAAAlnE,KAAAsS,EAAAA,cAqEAm9C,EAAAptD,kFAqCAotD,iCAiFA,MALAE,GAAAtvD,aAMAL,KAAAiB,EAAAA,UAAAV,wCANAoB,MACAC,MAAA,8CAIA+tD,iCAaA,MALAD,GAAArvD,aAMAL,KAAAiB,EAAAA,UAAAV,kCANAoB,MACAC,MAAA,wCAIA8tD,KpB7LAP,GAAA,SAAApuD,GAAA,QAAAouD,KAAA,GAAA5sD,GAAA,OAAAxB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,WAsBUF,GAAV+kE,aAAiC,EAUtB/kE,EAAXwlE,YAAkD,YAyBlD,MA7CkC/mE,GAAlCmuD,EAAApuD,GAOEqF,OAAFC,eACM8oD,EADNrrD,UAAA,kBAAE,WAC4B,MAAOrB,MAAK6kE,iBACxC,SAAejwD,GAAiB5U,KAAK6kE,YAAcvzD,EAAAA,sBAAsBsD,oCAazE83C,EAAFrrD,UAAAgK,mBAAE,WACErL,KAAK6J,YAAc,GAAI8B,GAAAA,gBAAgB3L,KAAK4mE,UAAU/6D,YAIxD6gD,EAAFrrD,UAAAolE,qBAAE,SAAqBthE,GACZ,GAAAwF,GAAXxF,EAAAwF,QACU+wC,EAAU17C,KAAK6J,WAEjBc,KAAYC,EAAAA,MACd8wC,EAAQ7wC,qBACR1F,EAAM2F,kBACGH,IAAYI,EAAAA,KACrB2wC,EAAQ1wC,oBACR7F,EAAM2F,kBAEN9K,KAAK6J,YAAYuB,UAAUjG,IAI/BunD,EAAFrrD,UAAA8kE,mBAAE,SAAmBU,GACjB7mE,KAAK6J,YAAYiC,iBAAiB+6D,mBAvDtCtpE,KAACiB,EAAAA,UAADV,OACEW,SAAU,gBACVO,SAAU,eACV4I,QAAS,SACTlJ,YACEvB,QAAS6mE,GACT3mE,YAAaqvD,IAEfxtD,MACEC,MAAO,uCAMXynE,WAAArpE,KAAGW,EAAAA,gBAAHJ,MAAmBkvD,IAA0BzrB,aAAa,MAI1D4jC,aAAA5nE,KAAGS,EAAAA,QAaHsnE;cAAA/nE,KAAGS,EAAAA,SAyBH0uD,GA7CkCC,EAAAA,cCTlCC,GAAA,WAAA,QAAAA,MAqBiC,sBArBjCrvD,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUE,EAAAA,aAAcisD,EAAAA,mBAAoBz2C,EAAAA,cAC5CtV,SACE4rD,GACAI,GACAC,GACAC,GACAC,GACAC,GACAC,IAEFpsD,cACE2rD,GACAI,GACAC,GACAC,GACAC,GACAC,GACAC,QAGJP,KC7BaQ,GAAgB,GAAIj9C,GAAAA,eAAgC,iBCWjEk9C,GAAA,WAgBE,QAAFA,GACYnoB,EACkCooB,GADlCttD,KAAZklC,SAAYA,EACkCllC,KAA9CstD,UAA8CA,EAL5CttD,KAAFutD,SAAqB,EACnBvtD,KAAFwtD,SAAqB,EAYrB,MALE7pD,QAAFC,eACMypD,EADNhsD,UAAA,eAAE,WACwB,MAAOrB,MAAKutD,cACpC,SAAY1pD,GAAiB7D,KAAKutD,SAAW1/C,KAAKC,MAAMlE,EAAAA,qBAAqB/F,qCAG7EF,OAAFC,eACMypD,EADNhsD,UAAA,eAAE,WACwB,MAAOrB,MAAKwtD,cACpC,SAAY3pD,GAAiB7D,KAAKwtD,SAAW3/C,KAAKC,MAAMlE,EAAAA,qBAAqB/F,qCAM7EwpD,EAAFhsD,UAAAosD,UAAE,SAAUC,EAAkB7pD,GACzB7D,KAAKklC,SAASv/B,cAAmB,MAAS+nD,GAAY7pD,kBAnC3DtG,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,gBACEO,SAAU,cACVE,MACFC,MAAA,iBAEAF,SAAA,gEACAI,QAAA,gvCACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAUA0tD,EAAAztD,mEAQAytD,KARIM,GAAJ,yBAqBA3tD,KAAAklC,SAAAA,iFAaAyoB,EAAA/vD,aACAL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,qPAdAgB,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAmuD,EAAE3xC,eAAF,WAAA,QACAze,KAAAC,EAAAA,8GAgBA,sBADAD,KAAAiB,EAAAA,UAAAV,OAAAW,SAAA,qCAIAS,MAAAC,MAAA,uBAHAyuD,iCAUA,sBADArwD,KAAAiB,EAAAA,UAAAV,OAAAW,SAAA,uBAIAS,MAAAC,MAAA,4BAHA0uD,iCAUA,sBADAtwD,KAAAiB,EAAAA,UAAAV,OAAAW,SAAA,uBAIAS,MAAAC,MAAA,4BAHA2uD,mBC/EA,QAAAC,KAKE/tD,KAAFguD,YAAwB,EAGtBhuD,KAAFiuD,SAAqB,EA6HrB,MA1HEtqD,QAAFC,eAAMmqD,EAAN1sD,UAAA,gBAAE,WAAyB,MAAOrB,MAAKiuD,SAAW,mCAMhDtqD,OAAFC,eAAMmqD,EAAN1sD,UAAA,eAAE,WACF,GAAU6sD,GAAargD,KAAK0B,IAA5BxP,MAAuB8N,KAAY7N,KAAKmuD,QAGpC,OAAOD,GAAa,EAAIluD,KAAKouD,SAAWF,EAAa,EAAIluD,KAAKouD,0CAUhEL,EAAF1sD,UAAAgtD,OAAE,SAAOC,EAAoBC,GAA3B,GAAFzuD,GAAAE,IACIA,MAAKguD,YAAc,EACnBhuD,KAAKiuD,SAAW,EAEhBjuD,KAAKmuD,QAAU,GAAIvsD,OAAM0sD,GACzBtuD,KAAKmuD,QAAQK,KAAK,EAAG,EAAGxuD,KAAKmuD,QAAQ3rD,QACrCxC,KAAK4iB,UAAY2rC,EAAM/pD,IAAI,SAAAiqD,GAAQ,MAAA3uD,GAAK4uD,WAAWD,MAI7CV,EAAV1sD,UAAAqtD,WAAE,SAAmBD,GAErB,GAAUE,GAAgB3uD,KAAK4uD,iBAAiBH,EAAKI,QASjD,OANA7uD,MAAK8uD,kBAAkBH,EAAeF,GAItCzuD,KAAKguD,YAAcW,EAAgBF,EAAKI,QAEjC,GAAIE,IAAa/uD,KAAKiuD,SAAUU,IAIjCZ,EAAV1sD,UAAAutD,iBAAE,SAAyBI,GACvB,GAAIA,EAAWhvD,KAAKmuD,QAAQ3rD,OAC1B,KAAM4mB,OAAM,oCAAoC4lC,EAAtD,kCACyChvD,KAAKmuD,QAAQ3rD,OAAtD,KAIA,IAAQmsD,IAAiB,EACjBM,GAAe,CAGnB,IAEMjvD,KAAKguD,YAAcgB,EAAWhvD,KAAKmuD,QAAQ3rD,QAC7CxC,KAAKkvD,WACLP,EAAgB3uD,KAAKmuD,QAAQxtC,QAAQ,EAAG3gB,KAAKguD,aAC7CiB,EAAcjvD,KAAKmvD,iBAAiBR,KAItCA,EAAgB3uD,KAAKmuD,QAAQxtC,QAAQ,EAAG3gB,KAAKguD,cAGvB,GAAlBW,GAOJM,EAAcjvD,KAAKmvD,iBAAiBR,GAIpC3uD,KAAKguD,YAAcW,EAAgB,IAVjC3uD,KAAKkvD,WACLP,EAAgB3uD,KAAKmuD,QAAQxtC,QAAQ,EAAG3gB,KAAKguD,aAC7CiB,EAAcjvD,KAAKmvD,iBAAiBR,WAY9BM,EAAcN,EAAgBK,GAA6B,GAAfC,EAItD,OAAOphD,MAAK0B,IAAIo/C,EAAe,IAIzBZ,EAAV1sD,UAAA6tD,SAAE,WACElvD,KAAKguD,YAAc,EACnBhuD,KAAKiuD,UAGL,KAAK,GAAIhrD,GAAI,EAAGA,EAAIjD,KAAKmuD,QAAQ3rD,OAAQS,IACvCjD,KAAKmuD,QAAQlrD,GAAK4K,KAAK0B,IAAI,EAAGvP,KAAKmuD,QAAQlrD,GAAK,IAQ5C8qD,EAAV1sD,UAAA8tD,iBAAE,SAAyBR,GACvB,IAAK,GAAI1rD,GAAI0rD,EAAgB,EAAG1rD,EAAIjD,KAAKmuD,QAAQ3rD,OAAQS,IACvD,GAAuB,GAAnBjD,KAAKmuD,QAAQlrD,GACf,MAAOA,EAKX,OAAOjD,MAAKmuD,QAAQ3rD,QAIdurD,EAAV1sD,UAAAytD,kBAAE,SAA0B7gC,EAAewgC,GACvC,IAAK,GAAIxrD,GAAI,EAAGA,EAAIwrD,EAAKI,QAAS5rD,IAChCjD,KAAKmuD,QAAQlgC,EAAQhrB,GAAKwrD,EAAKW,SAGrCrB,mBAOE,QAAFgB,GAAqBM,EAAoBC,GAApBtvD,KAArBqvD,IAAqBA,EAAoBrvD,KAAzCsvD,IAAyCA,EACzC,MAAAP,MCxJMQ,GAAsB,8CAO5B,QAAAC,KAEExvD,KAAFyvD,MAAkB,EAChBzvD,KAAFutD,SAAqB,EAiIrB,MApHEiC,GAAFnuD,UAAAquD,KAAE,SAAKC,EAAoBxB,EAA0ByB,EAAczhD,GAC/DnO,KAAK6vD,YAAcC,GAAeH,GAClC3vD,KAAKyvD,MAAQtB,EAAQC,SACrBpuD,KAAKutD,SAAWY,EAAQiB,QACxBpvD,KAAK+vD,MAAQH,EACb5vD,KAAKkuB,WAAa/f,GAUpBqhD,EAAFnuD,UAAA2uD,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkCjwD,KAAK6vD,YAAvC,MAAwDK,EAAxD,MAUEV,EAAFnuD,UAAA8uD,gBAAE,SAAgBC,EAAkBxyB,GAGhC,MAAkB,KAAXA,EAAe,IAAMyyB,GAAK,IAAID,EAAzC,MAAuDpwD,KAAK6vD,YAA5D,OAA8EjyB,IAU5E4xB,EAAFnuD,UAAAivD,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuDvwD,KAAK6vD,YAA5D,KAUEL,EAAFnuD,UAAAmvD,SAAE,SAAS/B,EAAmBR,EAAkBwC,GAEhD,GAAQC,GAAsB,IAAM1wD,KAAK+vD,MAIjCY,GAA8B3wD,KAAK+vD,MAAQ,GAAK/vD,KAAK+vD,KAEzD/vD,MAAK4wD,aAAanC,EAAMgC,EAAUC,EAAqBC,GACvD3wD,KAAK6wD,aAAapC,EAAMR,EAAUyC,EAAqBC,IAIzDnB,EAAFnuD,UAAAuvD,aAAE,SAAanC,EAAmBgC,EAAkBK,EACrCC,GAEf,GAAQC,GAAgBhxD,KAAKgwD,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApBjxD,KAAKkuB,WAAuB,QAAU,MACjDugC,GAAKhB,UAAUwD,EAAMjxD,KAAKmwD,gBAAgBa,EAAeP,IACzDhC,EAAKhB,UAAU,QAAS4C,GAAKrwD,KAAKswD,YAAYU,EAAevC,EAAKI,YAMpEW,EAAFnuD,UAAA6vD,cAAE,WACE,MAAUlxD,MAAK6vD,YAAnB,OAAqC7vD,KAAKutD,SAA1C,SAOEiC,EAAFnuD,UAAA8vD,YAAE,SAAYC,GACV,MAAUpxD,MAAKutD,SAAnB,MAAiCvtD,KAAKswD,YAAYc,EAAY,IAgB5D5B,EAAFnuD,UAAAgwD,kBAAE,WAA+C,MAAO,OAQxD7B,oBAUE,QAAF8B,GAAqBC,GAAnB,GAAFzxD,GAA+CxB,EAA/CgF,KAAAtD,OAAAA,WAAqBF,GAArByxD,eAAqBA,IAgCrB,MAlCqChzD,GAArC+yD,EAAAhzD,GAIEgzD,EAAFjwD,UAAAquD,KAAE,SAAKC,EAAoBxB,EAA0ByB,EAAczhD,GAI/D,GAHA7P,EAAJ+C,UAAUquD,KAAVpsD,KAAAtD,KAAe2vD,EAAYxB,EAASyB,EAAMzhD,GACtCnO,KAAKuxD,eAAiBzB,GAAe9vD,KAAKuxD,iBAErChC,GAAoB/9C,KAAKxR,KAAKuxD,gBACjC,KAAMnoC,OAAM,kBAAkBppB,KAAKuxD,eAAzC,wBAIED,EAAFjwD,UAAAwvD,aAAE,SAAapC,EAAmBR,GAC9BQ,EAAKhB,UAAU,MAAOztD,KAAKmwD,gBAAgBnwD,KAAKuxD,eAAgBtD,IAChEQ,EAAKhB,UAAU,SAAU4C,GAAKrwD,KAAKswD,YAAYtwD,KAAKuxD,eAAgB9C,EAAKW,YAG3EkC,EAAFjwD,UAAAgwD,kBAAE,WACE,OACE,SAAUhB,GAAQrwD,KAAKmxD,YAAYnxD,KAAKuxD,gBAA9C,MAAmEvxD,KAAKkxD,mBAItEI,EAAFjwD,UAAAmwD,MAAE,SAAMjG,GACJA,EAAKkG,eAAe,SAAU,OAE1BlG,EAAKmG,QACPnG,EAAKmG,OAAOvvD,QAAQ,SAAAssD,GAClBA,EAAKhB,UAAU,MAAO,MACtBgB,EAAKhB,UAAU,SAAU,SAIjC6D,GAlCqC9B,mBAgDnC,QAAFmC,GAAc9tD,GAAZ,GAAF/D,GACIxB,EADJgF,KAAAtD,OAAAA,WAEIF,GAAK8xD,YAAY/tD,KAuCrB,MA/CqCtF,GAArCozD,EAAArzD,GAWEqzD,EAAFtwD,UAAAwvD,aAAE,SAAapC,EAAmBR,EAAkB6C,EACrCC,GACf,GAAQc,GAAuBf,EAAe9wD,KAAK8xD,cAC/C9xD,MAAK+xD,eAAiB/xD,KAAKgwD,gBAAgB6B,EAAsBd,GAKjEtC,EAAKhB,UAAU,YAAaztD,KAAKmwD,gBAAgBnwD,KAAK+xD,eAAgB9D,IACtEQ,EAAKhB,UAAU,aAAc4C,GAAKrwD,KAAKswD,YAAYtwD,KAAK+xD,eAAgBtD,EAAKW,YAG/EuC,EAAFtwD,UAAAgwD,kBAAE,WACE,OACE,gBAAiBhB,GAAQrwD,KAAKmxD,YAAYnxD,KAAK+xD,gBAArD,MAA0E/xD,KAAKkxD,mBAI7ES,EAAFtwD,UAAAmwD,MAAE,SAAMjG,GACJA,EAAKkG,eAAe,gBAAiB,OAErClG,EAAKmG,OAAOvvD,QAAQ,SAAAssD,GAClBA,EAAKhB,UAAU,YAAa,MAC5BgB,EAAKhB,UAAU,aAAc,SAIzBkE,EAAVtwD,UAAAuwD,YAAE,SAAoB/tD,GACtB,GAAUmuD,GAAanuD,EAAM82B,MAAM,IAE/B,IAA0B,IAAtBq3B,EAAWxvD,OACb,KAAM4mB,OAAM,uDAAuDvlB,EAAzE,IAGI7D,MAAK8xD,eAAiBj3B,WAAWm3B,EAAW,IAAMn3B,WAAWm3B,EAAW,KAE5EL,GA/CqCnC,mBAwDrC,QAAAyC,oDAuBA,MAvBmC1zD,GAAnC0zD,EAAA3zD,GACE2zD,EAAF5wD,UAAAwvD,aAAE,SAAapC,EAAmBR,GAElC,GAAQ4D,GAAuB,IAAM7xD,KAAKutD,SAGlC2E,GAAuBlyD,KAAKyvD,MAAQ,GAAKzvD,KAAKyvD,MAG9CsC,EAAiB/xD,KAAKgwD,gBAAgB6B,EAAsBK,EAEhEzD,GAAKhB,UAAU,MAAOztD,KAAKmwD,gBAAgB4B,EAAgB9D,IAC3DQ,EAAKhB,UAAU,SAAU4C,GAAKrwD,KAAKswD,YAAYyB,EAAgBtD,EAAKW,YAGtE6C,EAAF5wD,UAAAmwD,MAAE,SAAMjG,GACAA,EAAKmG,QACPnG,EAAKmG,OAAOvvD,QAAQ,SAAAssD,GAClBA,EAAKhB,UAAU,MAAO,MACtBgB,EAAKhB,UAAU,SAAU,SAIjCwE,GAvBmCzC,ICnOnC2C,GAAA,WAwCE,QAAFA,GAAsBjtB,EACYp/B,GADZ9F,KAAtBklC,SAAsBA,EACYllC,KAAlC8F,KAAkCA,EATxB9F,KAAVoyD,QAA4B,MAwB5B,MAZEzuD,QAAFC,eACMuuD,EADN9wD,UAAA,YAAE,WACqB,MAAOrB,MAAK+vD,WACjC,SAASlsD,GACP7D,KAAK+vD,MAAQliD,KAAK0B,IAAI,EAAG1B,KAAKC,MAAMlE,EAAAA,qBAAqB/F,sCAI3DF,OAAFC,eACMuuD,EADN9wD,UAAA,kBAAE,WAC2B,MAAOrB,MAAKoyD,aACvC,SAAevuD,GAAiB7D,KAAKoyD,QAAU,IAAY,MAATvuD,EAAgB,GAAKA,oCAGvEF,OAAFC,eACMuuD,EADN9wD,UAAA,iBAAE,WACmC,MAAOrB,MAAKqyD,gBAC/C,SAAcxuD,GAChB,GAAUi9B,GAAW,IAAY,MAATj9B,EAAgB,GAAKA,EAErCi9B,KAAa9gC,KAAKqyD,aACpBryD,KAAKqyD,WAAavxB,EAClB9gC,KAAKsyD,eAAetyD,KAAKqyD,8CAI7BF,EAAF9wD,UAAAmiB,SAAE,WACExjB,KAAKuyD,aACLvyD,KAAKwyD,mBAOPL,EAAF9wD,UAAA0I,sBAAE,WACE/J,KAAKyyD,gBAICN,EAAV9wD,UAAAkxD,WAAE,WACE,IAAKvyD,KAAK4vD,KACR,KAAMxmC,OAAM,qFAMR+oC,EAAV9wD,UAAAmxD,gBAAE,WACOxyD,KAAKqyD,YACRryD,KAAKsyD,eAAe,QAKhBH,EAAV9wD,UAAAixD,eAAE,SAAuBI,GACjB1yD,KAAK2yD,aACP3yD,KAAK2yD,YAAYnB,MAAMxxD,MApGR,QAuGb0yD,EACF1yD,KAAK2yD,YAAc,GAAIV,IACdS,GAAaA,EAAU/xC,QAAQ,MAAQ,EAChD3gB,KAAK2yD,YAAc,GAAIhB,IAAgBe,GAEvC1yD,KAAK2yD,YAAc,GAAIrB,IAAgBoB,IAKnCP,EAAV9wD,UAAAoxD,aAAE,WAAA,GAAF3yD,GAAAE,IACSA,MAAK4yD,mBACR5yD,KAAK4yD,iBAAmB,GAAI7E,IAIlC,IAAUI,GAAUnuD,KAAK4yD,iBACfrE,EAAQvuD,KAAK0xD,OAAOj6C,OAAO,SAAAg3C,GAAQ,OAACA,EAAKnB,WAAamB,EAAKnB,YAAcxtD,IACzEqO,EAAYnO,KAAK8F,KAAO9F,KAAK8F,KAAKjC,MAAQ,KAEhD7D,MAAK4yD,iBAAiBvE,OAAOruD,KAAK4vD,KAAMrB,GACxCvuD,KAAK2yD,YAAYjD,KAAK1vD,KAAK2vD,WAAYxB,EAASnuD,KAAK4vD,KAAMzhD,GAE3DogD,EAAMpsD,QAAQ,SAACssD,EAAMpsD,GACzB,GAAYs7B,GAAMwwB,EAAQvrC,UAAUvgB,EAC9BvC,GAAK6yD,YAAYnC,SAAS/B,EAAM9wB,EAAI0xB,IAAK1xB,EAAI2xB,OAG/CtvD,KAAKyxD,cAAczxD,KAAK2yD,YAAYtB,sBAItCc,EAAF9wD,UAAAowD,cAAE,SAAc9jD,GACRA,IACD3N,KAAKklC,SAASv/B,cAAmB,MAASgI,EAAM,IAAMA,EAAM,oBAvInEpQ,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,gBACEO,SAAU,cACVC,SAAU,uCACVI,QAAF,gvCACEH,MACFC,MAAA,iBAEAT,YACAvB,QAAAiwD,GACA/vD,YAAA80D,IAEA1yD,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,yHAvBA2yD,EAAQvyD,mGAiDR+vD,aAAApyD,KAAAS,EAAAA,QAMA00D,YAAAn1D,KAAQS,EAAAA,SAYRm0D,KCzEAU,GAAA,WAAA,QAAAA,MAqBgC,sBArBhCt1D,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUwmD,GAAermD,IACzBC,SACEqxD,GACA9E,GACAM,GACAzG,GACArmD,GACAgtD,GACAC,GACAF,IAEF7sD,cACEoxD,GACA9E,GACAM,GACAE,GACAC,GACAF,QAGJiF,mBCuCE,QAAFC,GAAc/uD,GAGJ,EAAc4gD,SAClB3kD,KAAK+yD,WAAU,EAEf/yD,KAAKgzD,IAAG,EAGd,MAAAF,MASAG,GAAA,WA+BE,QAAFA,GACwBC,EACZC,EACsBl8C,GAFVjX,KAAxBkzD,YAAwBA,EACZlzD,KAAZmzD,WAAYA,EA1BFnzD,KAAVozD,gBAA4B,GAAIplC,KAMtBhuB,KAAVqzD,gBAA4B,GAAIrlC,KAGtBhuB,KAAVszD,kBAA8B,GAAItlC,KAGxBhuB,KAAVuzD,sBAAkC,GAAIvlC,KAG5BhuB,KAAVwzD,uBAAmC,GAAIxlC,KAO7BhuB,KAAVyzD,qBAAiC,iBAM3BzzD,KAAKkX,UAAYD,EAlIvB,MA0IEg8C,GAAF5xD,UAAAqyD,WAAE,SAAWC,EAAkBX,GAC3B,MAAO,MAAKY,sBAAsB,GAAID,EAAUX,IAQlDC,EAAF5xD,UAAAwyD,kBAAE,SAAkBF,EAAkBG,GAClC,MAAO,MAAKC,6BAA6B,GAAIJ,EAAUG,IASzDb,EAAF5xD,UAAAuyD,sBAAE,SAAsBI,EAAmBL,EAAkBX,GACzD,MAAO,MAAKiB,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcE,KASvEC,EAAF5xD,UAAA0yD,6BAAE,SAA6BC,EAAmBL,EAAkBG,GACpE,GAAUI,GAAmB,KAAKf,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAGnD,IAAUf,GAAa,KAAKwB,+BAA+BL,EACvD,OAAO,MAAKD,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcC,KAOvEE,EAAF5xD,UAAAmzD,cAAE,SAAcxB,GACZ,MAAO,MAAKyB,yBAAyB,GAAIzB,IAO3CC,EAAF5xD,UAAAqzD,qBAAE,SAAqBZ,GACnB,MAAO,MAAKa,gCAAgC,GAAIb,IAQlDb,EAAF5xD,UAAAozD,yBAAE,SAAyBT,EAAmBhB,GAC1C,MAAO,MAAK4B,qBAAqBZ,EAAW,GAAIlB,IAAcE,KAQhEC,EAAF5xD,UAAAszD,gCAAE,SAAgCX,EAAmBF,GACrD,GAAUI,GAAmB,KAAKf,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAGnD,IAAUf,GAAa,KAAK8B,sBAAsBX,EAC9C,OAAO,MAAKU,qBAAqBZ,EAAW,GAAIlB,IAAcC,KAWhEE,EAAF5xD,UAAAyzD,uBAAE,SAAuBC,EAAevK,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxCuK,GACI,KAAKvB,uBAAuB5kC,IAAImmC,EAAOvK,GACvC,MAOFyI,EAAF5xD,UAAA2zD,sBAAE,SAAsBD,GACpB,MAAO/0D,MAAKwzD,uBAAuB/9C,IAAIs/C,IAAUA,GASnD9B,EAAF5xD,UAAA4zD,uBAAE,SAAuBzK,GAErB,MADA,MAAKiJ,qBAAuBjJ,EAC5B,MAOFyI,EAAF5xD,UAAA6zD,uBAAE,WACE,MAAOl1D,MAAKyzD,sBAWdR,EAAF5xD,UAAA8zD,kBAAE,SAAkBC,GAAlB,GAAFt1D,GAAAE,KACUgzD,EAAMhzD,KAAKmzD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAG/C,IAAUG,GAAav1D,KAAKszD,kBAAkB79C,IAAIu9C,EAE9C,OAAIuC,GACK/pD,EAAAA,GAAagqD,GAASD,IAGxBv1D,KAAKy1D,uBAAuB,GAAI3C,IAAcsC,IAAUrzD,KAC7D2zD,EAAAA,IAAI,SAAAC,GAAO,MAAA71D,GAAKwzD,kBAAkB1kC,IAAG,EAAO+mC,KAC5CnxD,EAAAA,IAAI,SAAAmxD,GAAO,MAAAH,IAASG,OAYxB1C,EAAF5xD,UAAAu0D,gBAAE,SAAgB57C,EAAcg6C,OAAhC,KAAAA,IAAgCA,EAAhC,GAEA,IAAUxzC,GAAMq1C,GAAQ7B,EAAWh6C,GACzBwQ,EAASxqB,KAAKozD,gBAAgB39C,IAAI+K,EAExC,IAAIgK,EACF,MAAOxqB,MAAK81D,kBAAkBtrC,EAIpC,IAAUurC,GAAiB/1D,KAAKqzD,gBAAgB59C,IAAIu+C,EAEhD,OAAI+B,GACK/1D,KAAKg2D,0BAA0Bh8C,EAAM+7C,GAGvCE,EAAAA,WAAgBC,GAA4B11C,KAGrDyyC,EAAF5xD,UAAAiL,YAAE,WACCtM,KAAKozD,gBAAgB7mC,QACrBvsB,KAAKqzD,gBAAgB9mC,QACrBvsB,KAAKszD,kBAAkB/mC,SAMhB0mC,EAAV5xD,UAAAy0D,kBAAE,SAA0BtrC,GACxB,MAAIA,GAAOuoC,WAEFvnD,EAAAA,GAAagqD,GAAShrC,EAAOuoC,aAG7B/yD,KAAKy1D,uBAAuBjrC,GAAQzoB,KACzC2zD,EAAAA,IAAI,SAAAC,GAAO,MAAAnrC,GAAOuoC,WAAa4C,IAC/BnxD,EAAAA,IAAI,SAAAmxD,GAAO,MAAAH,IAASG,OAalB1C,EAAV5xD,UAAA20D,0BAAE,SAAkCh8C,EAAc+7C,GAAhD,GAAFj2D,GAAAE,KAIUm2D,EAAYn2D,KAAKo2D,+BAA+Bp8C,EAAM+7C,EAE5D,IAAII,EAIF,MAAO3qD,GAAAA,GAAa2qD,EAK1B,IAAUE,GAAwDN,EAC3Dt+C,OAAO,SAAA6+C,GAAiB,OAACA,EAAcvD,aACvCvuD,IAAI,SAAA8xD,GACH,MAAOx2D,GAAKy2D,0BAA0BD,GAAev0D,KACnDy0D,EAAAA,WAAW,SAACC,GACtB,GAAkBzD,GAAMlzD,EAAKqzD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAciB,EAActD,IAKjF,OADAzV,SAAQD,MAAM,yBAAyB0V,EAAnD,YAAkEyD,EAAI7rC,SACnDpf,EAAAA,GAAa,UAO5B,OAAOkrD,GAAAA,SAASL,GAAsBt0D,KAAKyC,EAAAA,IAAI,WACnD,GAAYmyD,GAAY72D,EAAKs2D,+BAA+Bp8C,EAAM+7C,EAE5D,KAAKY,EACH,KAAMT,IAA4Bl8C,EAGpC,OAAO28C,OASH1D,EAAV5xD,UAAA+0D,+BAAE,SAAuCzC,EAAkBoC,GAGvD,IAAK,GAAI9yD,GAAI8yD,EAAevzD,OAAS,EAAGS,GAAK,EAAGA,IAAK,CACzD,GAAYunB,GAASurC,EAAe9yD,EAC9B,IAAIunB,EAAOuoC,WAAY,CAC7B,GAAc4D,GAAY32D,KAAK42D,uBAAuBpsC,EAAOuoC,WAAYY,EACjE,IAAIgD,EACF,MAAOA,IAIb,MAAO,OAOD1D,EAAV5xD,UAAAo0D,uBAAE,SAA+BjrC,GAA/B,GAAF1qB,GAAAE,IACI,OAAOA,MAAK62D,UAAUrsC,EAAOwoC,KACxBjxD,KAAKyC,EAAAA,IAAI,SAAAsyD,GAAW,MAAAh3D,GAAKy0D,+BAA+BuC,OAOvD7D,EAAV5xD,UAAAk1D,0BAAE,SAAkC/rC,GAAlC,GAAF1qB,GAAAE,IAEI,OAAIwqB,GAAOuoC,WACFvnD,EAAAA,GAAagf,EAAOuoC,YAGtB/yD,KAAK62D,UAAUrsC,EAAOwoC,KAAKjxD,KAAKyC,EAAAA,IAAI,SAAAsyD,GAOzC,MAJKtsC,GAAOuoC,aACVvoC,EAAOuoC,WAAajzD,EAAK+0D,sBAAsBiC,IAG1CtsC,EAAOuoC,eAOVE,EAAV5xD,UAAAkzD,+BAAE,SAAuCwC,GACzC,GAAUpB,GAAM31D,KAAK60D,sBAAsBkC,EAEvC,OADA/2D,MAAKg3D,kBAAkBrB,GAChBA,GAQD1C,EAAV5xD,UAAAu1D,uBAAE,SAA+BK,EAAqBtD,GACtD,GAAUuD,GAAaD,EAAQla,cAAc,IAAM4W,EAE/C,KAAKuD,EACH,MAAO,KAKb,IAAUC,GAAcD,EAAWE,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAYxS,SAASlkC,cACvB,MAAOzgB,MAAKg3D,kBAAiB,EAM/B,IAA2C,WAAvCG,EAAYxS,SAASlkC,cACvB,MAAOzgB,MAAKg3D,kBAAkBh3D,KAAKs3D,cAAcH,GAQvD,IAAUxB,GAAM31D,KAAK60D,sBAAsB,cAIvC,OAFAc,GAAI5kB,YAAYomB,GAETn3D,KAAKg3D,kBAAkBrB,IAMxB1C,EAAV5xD,UAAAwzD,sBAAE,SAA8B0C,GAChC,GAAUC,GAAMx3D,KAAKkX,UAAU25B,cAAc,MACzC2mB,GAAIC,UAAYF,CACpB,IAAU5B,GAAM6B,EAAIza,cAAc,MAE9B,KAAK4Y,EACH,KAAMvsC,OAAM,sBAGd,OAAOusC,IAMD1C,EAAV5xD,UAAAi2D,cAAE,SAAsBhuD,GAGpB,IAAK,GAFDqsD,GAAM31D,KAAK60D,sBAAsB,eAE5B5xD,EAAI,EAAGA,EAAIqG,EAAQkO,WAAWhV,OAAQS,IACzCqG,EAAQkO,WAAWvU,GAAG0U,WAAa3X,KAAKkX,UAAUwgD,cACpD/B,EAAI5kB,YAAYznC,EAAQkO,WAAWvU,GAAGm0D,WAAU,GAIpD,OAAOzB,IAMD1C,EAAV5xD,UAAA21D,kBAAE,SAA0BrB,GAMxB,MALAA,GAAIgC,aAAa,MAAO,IACxBhC,EAAIgC,aAAa,SAAU,QAC3BhC,EAAIgC,aAAa,QAAS,QAC1BhC,EAAIgC,aAAa,sBAAuB,iBACxChC,EAAIgC,aAAa,YAAa,SACvBhC,GAOD1C,EAAV5xD,UAAAw1D,UAAE,SAAkBzB,GAAlB,GAAFt1D,GAAAE,IACI,KAAKA,KAAKkzD,YACR,KAAM0E,KAGR,IAAe,MAAXxC,EACF,KAAMhsC,OAAM,+BAA+BgsC,EAAjD,KAGA,IAAUpC,GAAMhzD,KAAKmzD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAM/C,IAAUyC,GAAkB73D,KAAKuzD,sBAAsB99C,IAAIu9C,EAEvD,IAAI6E,EACF,MAAOA,EAKb,IAAUC,GAAM93D,KAAKkzD,YAAYz9C,IAAIu9C,GAAM+E,aAAc,SAASh2D,KAC5Di2D,EAAAA,SAAS,WAAM,MAAAl4D,GAAKyzD,sBAAsBzkC,OAAOkkC,KACjDiF,EAAAA,QAIF,OADAj4D,MAAKuzD,sBAAsB3kC,IAAIokC,EAAK8E,GAC7BA,GASD7E,EAAV5xD,UAAA4yD,kBAAE,SAA0BD,EAAmBL,EAAkBnpC,GAE7D,MADA,MAAK4oC,gBAAgBxkC,IAAIinC,GAAQ7B,EAAWL,GAAWnpC,GACvD,MAQMyoC,EAAV5xD,UAAAuzD,qBAAE,SAA6BZ,EAAmBxpC,GAClD,GAAU0tC,GAAkB,KAAK7E,gBAAgB59C,IAAIu+C,EAQjD,OANIkE,GACFA,EAAgBx2D,KAAK8oB,GAErB,KAAK6oC,gBAAgBzkC,IAAIolC,GAAYxpC,IAGvC,qBAlfJjtB,KAAC8vB,EAAAA,WAADvvB,OAAaykB,WAAY,+CAtFzBhlB,KAAQ46D,EAAAA,WAARv6D,aAAAL,KAsHKsS,EAAAA,aA5GLtS,KAAQ66D,EAAAA,eA8GR76D,SAAAsW,GAAAjW,aAAAL,KAAKsS,EAAAA,WAALtS,KAAiBuW,EAAAA,OAAjBhW,MAAwBoa,EAAAA,4LAjIxB+6C,KA+lBaoF,IAEXl7D,QAAS81D,GACT1iC,OACG,GAAI1gB,GAAAA,SAAY,GAAI6d,GAAAA,SAAYulC,KAChC,GAAIpjD,GAAAA,SAAYsoD,EAAAA,YACjBC,EAAAA,cACC,GAAIvoD,GAAAA,SAAYqI,EAAQ,WAE3BsY,WAAY8nC,kBCrkBZ,QAAFC,GAAqB7yD,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAA6yD,MACaC,GACTloD,EAAWioD,IAOFE,GAAoB,GAAItoD,GAAAA,eAAgC,qBACnEoS,WAAY,OACZC,QAASk2C,KAyBLC,IACJ,YACA,gBACA,MACA,SACA,OACA,SACA,SACA,eACA,aACA,aACA,OACA,UAIFC,GAAuD,SAAAC,GAAQ,MAAA,IAAIA,EAAnE,KAAMC,GAA2BH,GAAkBn0D,IAAnDo0D,IAA4Evd,KAAK,MAG3E0d,GAAiB,4BA6BvBC,GAAA,SAAA16D,GA4DE,QAAF06D,GACM1xD,EACQ2xD,EACkBC,EAKqBC,GARnD,GAAFr5D,GASIxB,EATJgF,KAAAtD,KASUsH,IATVtH,WAEcF,GAAdm5D,cAAcA,EAMuCn5D,EAArDq5D,UAAqDA,EAtC3Cr5D,EAAVs5D,SAA6B,EA2CpBF,GACH5xD,EAAW3B,cAAcgyD,aAAa,cAAe,UA9B3D,MA5B6Bp5D,GAA7By6D,EAAA16D,GAOEqF,OAAFC,eACMo1D,EADN33D,UAAA,cAAE,WAEE,MAAOrB,MAAKo5D,aAEd,SAAWC,GACTr5D,KAAKo5D,QAAU9nD,EAAAA,sBAAsB+nD,oCAQvC11D,OAAFC,eACMo1D,EADN33D,UAAA,eAAE,WACwB,MAAOrB,MAAKs5D,cACpC,SAAYz1D,GACV7D,KAAKs5D,SAAWt5D,KAAKu5D,kBAAkB11D,oCAKzCF,OAAFC,eACMo1D,EADN33D,UAAA,gBAAE,WACyB,MAAOrB,MAAKw5D,eACrC,SAAa31D,GACX7D,KAAKw5D,UAAYx5D,KAAKu5D,kBAAkB11D,oCA4ClCm1D,EAAV33D,UAAAo4D,eAAE,SAAuB9F,GACrB,IAAKA,EACH,OAAQ,GAAI,GAElB,IAAU+F,GAAQ/F,EAASh5B,MAAM,IAC7B,QAAQ++B,EAAMl3D,QACZ,IAAK,GAAG,OAAQ,GAAIk3D,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAMtwC,OAAM,uBAAuBuqC,EAAlD,OAIEqF,EAAF33D,UAAAiiB,YAAE,SAAYnf,GAAZ,GAAFrE,GAAAE,IAEI,IAAImE,EAAQw1D,QACV,GAAI35D,KAAK25D,QAAS,CACV,GAAAvqD,GAAdpP,KAAAy5D,eAAAz5D,KAAA25D,SAAe3F,EAAf5kD,EAAA,GAA0BukD,EAA1BvkD,EAAA,EAEQpP,MAAKi5D,cAAcrD,gBAAgBjC,EAAUK,GAAWjyD,KAAKC,EAAAA,KAAK,IAAIC,UACpE,SAAA0zD,GAAO,MAAA71D,GAAK85D,eAAejE,IAC3B,SAACc,GAAe,MAAAlZ,SAAQsc,IAAI,0BAA0BpD,EAAI7rC,eAG5D5qB,MAAK85D,kBAIL95D,MAAK+5D,kBACP/5D,KAAKg6D,0BAIThB,EAAF33D,UAAAmiB,SAAE,WAGMxjB,KAAK+5D,kBACP/5D,KAAKg6D,0BAIThB,EAAF33D,UAAA44D,mBAAE,WACF,GAAUC,GAAiBl6D,KAAKm6D,+BAE5B,IAAID,GAAkBl6D,KAAKm5D,WAAae,EAAer8B,KAAM,CACjE,GAAYu8B,GAAUp6D,KAAKm5D,UAAUvqB,aAQ3BwrB,KAAYp6D,KAAKq6D,gBACnBr6D,KAAKq6D,cAAgBD,EACrBp6D,KAAKs6D,yBAAyBF,MAKpCpB,EAAF33D,UAAAiL,YAAE,WACMtM,KAAKm6D,iCACPn6D,KAAKm6D,gCAAgC5tC,SAIjCysC,EAAV33D,UAAA04D,eAAE,WACE,OAAQ/5D,KAAK25D,SAGPX,EAAV33D,UAAAu4D,eAAE,SAAuBjE,GACrB31D,KAAK85D,kBAOL,KAAK,GAFCS,GAAY5E,EAAI6E,iBAAiB,SAE9Bv3D,EAAI,EAAGA,EAAIs3D,EAAU/3D,OAAQS,IACpCs3D,EAAUt3D,GAAGuJ,aAAe,GAK9B,IAAIxM,KAAKm5D,UAAW,CACxB,GAAYxqB,GAAO3uC,KAAKm5D,UAAUvqB,aAC5B5uC,MAAKq6D,cAAgB1rB,EACrB3uC,KAAKy6D,qCAAqC9E,GAC1C31D,KAAKs6D,yBAAyB3rB,GAGhC3uC,KAAK0F,YAAYC,cAAcorC,YAAY4kB,IAGrCqD,EAAV33D,UAAAy4D,iBAAE,WACF,GAAUY,GAA6B16D,KAAK0F,YAAYC,cAChDg1D,EAAaD,EAAcljD,WAAWhV,MAQ1C,KANIxC,KAAKm6D,iCACPn6D,KAAKm6D,gCAAgC5tC,QAKhCouC,KAAc,CACzB,GAAYv4D,GAAQs4D,EAAcljD,WAAWmjD,EAIhB,KAAnBv4D,EAAMuV,UAAmD,QAAjCvV,EAAMuiD,SAASlkC,eACzCi6C,EAAcE,YAAYx4D,KAKxB42D,EAAV33D,UAAA24D,uBAAE,WACE,GAAKh6D,KAAK+5D,iBAAV,CAIJ,GAAUc,GAAoB76D,KAAK0F,YAAYC,cACrCm1D,EAAe96D,KAAK+6D,QACtB/6D,KAAKi5D,cAAcjE,sBAAsBh1D,KAAK+6D,SAC9C/6D,KAAKi5D,cAAc/D,wBAEnB4F,IAAgB96D,KAAKg7D,wBACnBh7D,KAAKg7D,uBACPH,EAAKnpD,UAAUC,OAAO3R,KAAKg7D,uBAEzBF,GACFD,EAAKnpD,UAAUG,IAAIipD,GAErB96D,KAAKg7D,sBAAwBF,GAG3B96D,KAAKi7D,UAAYj7D,KAAKk7D,yBACpBl7D,KAAKk7D,wBACPL,EAAKnpD,UAAUC,OAAO3R,KAAKk7D,wBAEzBl7D,KAAKi7D,UACPJ,EAAKnpD,UAAUG,IAAI7R,KAAKi7D,UAE1Bj7D,KAAKk7D,uBAAyBl7D,KAAKi7D,YAS/BjC,EAAV33D,UAAAk4D,kBAAE,SAA0B11D,GACxB,MAAwB,gBAAVA,GAAqBA,EAAMiU,OAAO6iB,MAAM,KAAK,GAAK92B,GAQ1Dm1D,EAAV33D,UAAAi5D,yBAAE,SAAiC3rB,GACnC,GAAUwsB,GAAWn7D,KAAKm6D,+BAElBgB,IACFA,EAASh5D,QAAQ,SAACi5D,EAAO9xD,GACvB8xD,EAAMj5D,QAAQ,SAAA02D,GACZvvD,EAAQquD,aAAakB,EAAK7+C,KAAM,QAAQ20B,EAAlD,IAA0DkqB,EAAKh1D,MAA/D,WAUUm1D,EAAV33D,UAAAo5D,qCAAE,SAA6CnxD,GAK3C,IAAK,GAJC+xD,GAAsB/xD,EAAQkxD,iBAAiB1B,IAC/CqC,EAAWn7D,KAAKm6D,gCAClBn6D,KAAKm6D,iCAAmC,GAAInsC,KAEvC/qB,EAAI,EAAGA,EAAIo4D,EAAoB74D,OAAQS,KAApD,SAAaA,GACP01D,GAAkBx2D,QAAQ,SAAA02D,GAChC,GAAcyC,GAAuBD,EAAoBp4D,GAC3CY,EAAQy3D,EAAqBC,aAAa1C,GAC1C2C,EAAQ33D,EAAQA,EAAM23D,MAAMzC,IAAkB,IAEpD,IAAIyC,EAAO,CACnB,GAAcC,GAAaN,EAAS1lD,IAAI6lD,EAEzBG,KACHA,KACAN,EAASvsC,IAAI0sC,EAAsBG,IAGrC,EAAY/5D,MAAMsY,KAAM6+C,EAAMh1D,MAAO23D,EAAM,SAdxCv4D,mBA/Qb1F,KAACwB,EAAAA,UAADjB,OAAAmB,SAAA,4BACER,SAAU,WACVO,SAAU,UACVK,QAAF,spBACEuI,QAAF,SACE1I,MACFE,KAAA,MACMD,MAAN,uBACIu8D,0BAAJ,SACIC,4BAAJ,iEAEAr8D,cAAAC,EAAAA,kBAAiCC,KACjCC,gBAAAC,EAAAA,wBAAAC,6EAvHApC,KAAEI,OAAFC,aAAAL,KAAAM,EAAAA,UAAAC,MAAA,mBAgBAP,SAAQsW,GAARjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA26D,SA+JAO,EAAAp5D,iEA7CAm7D,UAAAx9D,KAAAS,EAAAA,QAUAi9D,WAAA19D,KAAAS,EAAAA,SAWAg7D,OCvJAt8C,GAAA,WAAA,QAAAA,MAK4B,sBAL5Bnf,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUG,IACVC,SAAUk4D,GAASn4D,IACnBE,cAAei4D,QAEjBt8C,mBXiBA,QAAAk/C,MAA0B,MAA1BA,MACaC,GACTzzD,EAAmBwzD,kBAIvB,QAAAE,MAA8B,MAA9BA,MACaC,GACT3zD,EAAmB0zD,IAEvBzU,GAAA,SAAA/oD,GAAA,QAAA+oD,KAAA,GAAAvnD,GAAA,OAAAxB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,WAiBEF,GAAF+S,cAAkB,GAAIhK,GAAAA,UAJtB,MACgCtK,GAAhC8oD,EAAA/oD,GAKE+oD,EAAFhmD,UAAAiiB,YAAE,WACEtjB,KAAK6S,cAAc/O,QAGrBujD,EAAFhmD,UAAAiL,YAAE,WACEtM,KAAK6S,cAAc7N,2BAxBvBzH,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,eACEO,SAAU,aACVE,MACFE,KAAA,aACMD,MAAN,8BAEAF,SAAA,4BACAI,QAAA;2nZACEuI,QAAF,iBACEtI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGA0nD,OAIED,GAAF,SAAsC9oD,iBA+BtC,GAAAwB,GAAAxB,EAAAgF,KAAAtD,OAAAA,WACAF,GAAA4F,YAAAA,oFAIA,GAAA4B,GAAAtH,KAAA0F,WACA,IAAU4B,EAAV,CAGQ,GAARq9C,GAAAr9C,EAAA3B,cAAAg/C,SAAAlkC,gCACY,MAAZ,MAGA,IAAqB,oBAAbkkC,EACR,MAAA,cAIA,MAAA,uIAWAyC,EAAQxpD,aACRL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,+CAlDAQ,SAAA,4BACEC,MACFC,MAAA,0BAEEE,QAAF,mnZACEuI,QAAF,iBACAtI,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAynD,EAAAprC,eAAA,WAAA,QACAze,KAAAC,EAAAA,iDA8CA,sBADAD,KAAAiB,EAAAA,UAAAV,OAAAW,SAAA,qCAIAS,MAAAC,MAAA,uBAHAooD,iCAUA,sBADAhqD,KAAAiB,EAAAA,UAAAV,OAAAW,SAAA,iCAIAS,MAAAC,MAAA,qBAHAqoD,iCAUA,sBADAjqD,KAAAiB,EAAAA,UAAAV,OAAAW,SAAA,kCAIAS,MAAAC,MAAA,qBAHAsoD,KAGAH,GAAA,SAAAhpD,oBAGAgK,GAeA,GAAAxI,GAAAxB,EAAAgF,KAAAtD,OAAAA,IAUAF,GAAAolC,SAAsBA,EAGtBplC,EAAAurD,oBAAA,EACAvrD,EAAA8I,WAAA,GAAAC,GAAAA,QAJE/I,EAAFurD,sBAAAC,GAAAC,GAAA,gBAAAA,EAAAC,gBAAsB1rD,EAAtB2rD,MAA8BH,GAAAC,CAO1B,IAAJjiD,GAAiBxJ,EAAjB+yB,iBAcA,oGARQ/yB,EAAR2rD,OAAAnjD,GAIAxI,EAAA2rD,MAAA54C,cAAA9Q,KAAA0H,EAAAA,UAAA3J,EAAA8I,aAAA3G,UAAA,WACAqG,EAAA6B,iBAGArK,gBAIEwnD,EAAFjmD,UAAAgK,8BAEAqgD,EAAA1rD,KAAAulD,OAAAvlD,KAAAklC,WAEEoiB,EAAFjmD,UAAAiL,uBAEAtM,KAAA4I,WAAA9E,iEAME,sIAMA,8DAAFvG,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,yDACgBO,SAAhB,cACAE,4BArEAysD,+BAAA,mBACAxG,oCAAA,oBAEEv9C,QAAF,iBACA3I,SAAA,8aAEAQ,gBAAAC,EAAAA,wBAAAC,WAIA2nD,EAAAtrC,eAAe,WAAf,QACAze,KAAAC,EAAAA,aACAD,KAAA8pD,GAAAzpD,aAAAL,KAAAsS,EAAAA,aACAtS,KAAA6pD,GAAAxpD,aAAAL,KAAAsS,EAAAA,2DA5JA01C,SAAAhoD,KAAAW,EAAAA,gBAAAJ,MAAA0nD,MAwKAoG,UAAAruD,KAA8Co2B,EAAAA,aAA9C71B,MAAAypD,MACAsE,QAAAtuD,KAAAo2B,EAAAA,aAAA71B,MAAA0pD,4BPnIA,QAAAsE,MAAmC,MAAnCA,MACa9E,GACT5+C,EAAmB0jD,kBAGvB,QAAAC,MAAgC,MAAhCA,MACaC,GACT5jD,EAAmB2jD,IAGVhF,IACX5pD,QAAS44B,EAAAA,kBACT14B,YAAaonB,EAAAA,WAAW,WAAM,MAAA4gC,MAC9BpvB,OAAO,iBAKP,QAAFg2B,GAEW91B,EAEA4iB,GAFA/4C,KAAXm2B,OAAWA,EAEAn2B,KAAX+4C,OAAWA,EACX,MAAAkT,MAOA3G,GAAA,SAAAhnD,GA0EE,QAAFgnD,GAAsBpgB,EACA5E,EAE2C4rB,GAH/D,GAAFpsD,GAIIxB,EAJJgF,KAAAtD,OAAAA,WAAsBF,GAAtBolC,SAAsBA,EACAplC,EAAtBwgC,gBAAsBA,EAE2CxgC,EAAjEosD,cAAiEA,EArDvDpsD,EAAV0gC,WAAsB,EACZ1gC,EAAV6gC,WAAsB,EACZ7gC,EAAVqsD,WAAsB,EAUXrsD,EAAX4lD,iBAAkD,UA2BlD,MA1CmCnnD,GAAnC+mD,EAAAhnD,GAkBEqF,OAAFC,eACM0hD,EADNjkD,UAAA,aAAE,WACmB,MAAOrB,MAAKi6B,YAC/B,SAAU6G,GACJ9gC,KAAKmZ,UAAY2nB,IAAa9gC,KAAK6D,QACrC7D,KAAKmZ,UAAW,GAGlBnZ,KAAKi6B,OAAS6G,mCAKhBn9B,OAAFC,eACM0hD,EADNjkD,UAAA,gBAAE,WACiB,MAAOrB,MAAK2gC,WAAc3gC,KAAKksD,eAAiBlsD,KAAKksD,cAAcj/C,cACpF,SAAapJ,GACf,GAAUi9B,GAAWxvB,EAAAA,sBAAsBzN,EAEnCi9B,KAAa9gC,KAAK2gC,YACpB3gC,KAAK2gC,UAAYG,EACjB9gC,KAAKsgC,gBAAgBn2B,iDAKzBxG,OAAFC,eACM0hD,EADNjkD,UAAA,gBAAE,WAC0B,MAAOrB,MAAKksD,cAAchR,gBAAgBkD,WAAWp+C,WAC/E,SAAa6D,GACf,GAAUu6C,GAAa9sC,EAAAA,sBAAsBzN,EAErCu6C,KAAep+C,KAAKwgC,YACtBxgC,KAAKymD,aAAarI,GAClBp+C,KAAKksD,cAAcrF,uDAWvBvB,EAAFjkD,UAAAmiB,SAAE,WAAA,GAAF1jB,GAAAE,KAMUm+C,EAAcn+C,KAAKwgC,SAEzBtuB,SAAQC,UAAUC,KAAK,YACjBtS,EAAK0gC,WAAa2d,KACpBr+C,EAAKqZ,UAAW,EAChBrZ,EAAKwgC,gBAAgBn2B,mBAK3Bm7C,EAAFjkD,UAAAgK,mBAAE,WACEqgD,EAAS1rD,KAAKulD,OAAQvlD,KAAKklC,WAG7BogB,EAAFjkD,UAAAiL,YAAE,WAAA,GAAFxM,GAAAE,IACQA,MAAKmZ,UAGPjH,QAAQC,UAAUC,KAAK,WAAM,MAAAtS,GAAKqZ,UAAW,GAGnD,IAAUizC,GAAWpsD,KAAKmsD,UAChBE,EAAgBrsD,KAAKksD,cAAcI,sBAAsBtsD,KAG3DosD,IAAYC,GACdA,EAAc9kD,SAKlB+9C,EAAFjkD,UAAAy2B,OAAE,WACE93B,KAAKmZ,UAAYnZ,KAAKmZ,UAIxBmsC,EAAFjkD,UAAAkG,MAAE,WACEvH,KAAKklC,SAASv/B,cAAc4B,SAO9B+9C,EAAFjkD,UAAA2nD,SAAE,WACE,MAAOhpD,MAAKylD,MAASzlD,KAAKylD,MAAM9/C,cAAc6G,aAAe,GAAM,IAIrE84C,EAAFjkD,UAAA4gC,kBAAE,WACE,MAAOjiC,MAAKiN,UAAYjN,KAAKkiC,eAAiBliC,KAAKksD,cAAchqB,eAGnEojB,EAAFjkD,UAAAkS,aAAE,WACOvT,KAAKiN,WACRjN,KAAK83B,SAGL93B,KAAKksD,cAAc70B,iBAAiBr3B,QAIxCslD,EAAFjkD,UAAAkrD,aAAE,WACEvsD,KAAKksD,cAAcM,kBAAkBxsD,MACrCA,KAAKmsD,WAAY,GAGnB7G,EAAFjkD,UAAAorD,YAAE,WACEzsD,KAAKksD,cAAc/T,aACnBn4C,KAAKmsD,WAAY,GAInB7G,EAAFjkD,UAAAwxB,gBAAE,WACE,MAAO7yB,MAAKklC,SAASv/B,eAIvB2/C,EAAFjkD,UAAAolD,aAAE,SAAattC,GACX,MAAIA,KAAanZ,KAAKwgC,YAItBxgC,KAAKwgC,UAAYrnB,EAEbA,EACFnZ,KAAKksD,cAAchR,gBAAgBb,OAAOr6C,MAE1CA,KAAKksD,cAAchR,gBAAgBX,SAASv6C,MAG9CA,KAAKsgC,gBAAgBn2B,gBACd,IAQTm7C,EAAFjkD,UAAA+/B,cAAE,WACEphC,KAAKsgC,gBAAgBn2B,+BA5LzB5M,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,kBACEO,SAAU,gBACV4I,QAAF,iBACE1I,MACFE,KAAA,SACMD,MAAN;sCACIi6B,UAAJ,iBACImF,SAAJ,gBACIp+B,UAAW,iBACX8kD,SAAJ,KACIC,iCAAJ,WACIC,oCAAJ,mBACIC,uBAAJ,sBACIt9C,uBAAJ,uBAEA7I,SAAA,6gBACAK,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAvEApC,KAAE8nD,GAAFznD,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAA2mB,EAAAA,WAAA,WAAA,MAAA4gC,YAmIAC,EAAA1lD,kGAjDA2lD,SAAAhoD,KAAAW,EAAAA,gBAAAJ,MAAA0nD,MACAC,QAAAloD,KAAGuJ,EAAAA,UAAHhJ,MAAA,UACA4nD,mBAAAnoD,KAAAS,EAAAA,QAGA6F,QAAAtG,KAAGS,EAAAA,QAGHiP,WAAA1P,KAAAS,EAAAA,QAGAmb,WAAA5b,KAAAS,EAAAA,SAwBAsnD,sBAqIA,QAAAD,GAAAngB,EAAAh4B,GAqBA,GAAApN,GAAAxB,EAAAgF,KAAAtD,OAAAA,IAoDE,OAEFF,GAAAolC,SAAAA,iOAFAplC,EAtCA,4DAUA2V,gGAOAzV,KAAA84C,SACA94C,KAAA84C,QAAA32C,QAAA,SAAA42C,GAAA,MAAAA,GAAA3X,mBAGAzrB,YAAA,EACEC,cAAF,mGAuBA/J,WACS6xC,gBAGTiI,cAAA,WAAA,OAAA,IACA/H,yBAAA,aACA59C,KAAA4lD,cACA5lD,KAAA6lD,sBAAA7lD,KAAA4lD,aAEQ5lD,KAAK4lD,YAAb,MAGA5lD,KAAA8lD,cAAA9lD,KAAAk7C,gBAAA52C,SAAArC,UAAA,SAAAkD,GAEA,GAAAA,EAAAi1C,MACA,IAAA,GAAA2L,GAAA,EAA6B32C,EAA7BjK,EAAAi1C,MAAA2L,EAAA32C,EAAuD5M,OAAvDujD,IAAA,CACA,GAAAC,GAAA52C,EAAA22C,EACAC,GAAA7sC,UAAA,EAEA,GAAAhU,EAAAm1C,QACA,IAAA,GAAA9F,GAAA,EAAAG,EAAAxvC,EAAAm1C,QAAA9F,EAAAG,EAAAnyC,OAAAgyC,IAAA,CAEA,GAAAwR,GAAyBrR,EAAzBH,EACAwR,GAAA7sC,UAAA,4aAmCA,GAAA8sC,GAAAjmD,KAAAg/C,gBAAAjG,EASA,qDANAkN,EAAA,EACAjmD,KAAA6J,YAAAC,sBAAAm8C,EAAA,GAEA,IAAaA,GAAbjmD,KAAA84C,QAA+Ct2C,OAA/C,GACAxC,KAAA6J,YAAAC,sBAAA+D,KAAA2B,IAAAy2C,EAAA,EAAAjmD,KAAA84C,QAAAt2C,OAAA,KAEAxC,KAAA6J,YAAAgyC,6CAOA,GAAAlxC,GAAAxF,EAAAwF,QACU+wC,EAAU17C,KAAK6J,YACfq8C,EAAVxK,EAAAS,gBACUgK,EAAVz7C,EAAAA,eAAuCvF,aAC7B,IAAV+F,GAAAA,MAEA,IAAAD,GAAAA,MACAk7C,IACAnmD,KAAAomD,uBAEUjhD,EAAV2F,iBAEA,MACA,KAASF,GAAAA,KACT,IAAAG,GAAAA,IACeo7C,IACDx7C,IAAdC,EAAAA,KAAA8wC,EAAA7wC,qBAAA6wC,EAAA1wC,oBACY7F,EAAZ2F,iBAEA,MACA,KAASgxC,GAAAA,EACTpxC,EAAAA,eAAAvF,EAAA,aACAnF,KAAA84C,QAAArkC,KAAA,SAAAskC,GAAA,OAAAA,EAAA5/B,WAAAnZ,KAAAqmD,YAAArmD,KAAAsmD,cACYnhD,EAAZ2F,iBAEA,MACA,SACQ4wC,EAARtwC,UAAAjG,GAEAwF,IAAA2yB,EAAAA,UAAA3yB,IAAA6yB,EAAAA,aAAAr4B,EAAAi3C,UACAV,EAAAS,kBAAA+J,GAEQlmD,KAARomD,gFAOApmD,KAAAk4C,UAAAl4C,KAAAumD,iKAYAvmD,KAAA6lD,sBAAAW,OAGAxmD,KAAA4lD,YAAAY,6OAqBAxmD,MAAA84C,QAAA32C,QAAA,SAAA42C,GAAA,MAAAA,GAAA0N,cAAA,KAAED,EAAFrkD,QAAA,SAAA0B,GAGA,GAAAw5C,GAAwBv9C,EAAxBg5C,QAAArkC,KAAA,SAAAskC,GAEQ,OAARA,EAAA5/B,WAGArZ,EAAA8jD,YAAA9jD,EAAA8jD,YAAA7K,EAAAl1C,MAAAA,GAAAk1C,EAAAl1C,QAAAA,IAGQw5C,IACRA,EAAAoJ,cAAA,+LAcA,GAAAC,GAAA1mD,KAAA6J,YAAAsyC,mDAGQ,GAARwK,GAA4B3mD,KAA5B84C,QAAA9rC,UAAmD05C,oBACzCC,EAAV7uB,SAKQ93B,KAARq3B,iBAAAsvB,+FAcA5N,EAAA0N,aAAArI,KAEAwI,GAAyB,KAGzBA,GACA5mD,KAAA6mD,kLAkBAxB,EAAAznD,aACAL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,iDA/SAmJ,QAAA,iBACE1I,MACFE,KAAA,UACA0/B,aAAA,WACA3/B,MAAA,mCACMi6B,UAAN,UACImF,SAAJ,eACIE,YAAJ,mBACIqoB,uBAAJ,OACIh/C,uBAAJ,uBAEA7I,SAAA,4BACAI,QAAA,mnZACAC,cAAAC,EAAAA,kBAAAC,KACAd,WAAAqoD,IACEtnD,gBAAFC,EAAAA,wBAAAC,WAIA0lD,EAAArpC,eAAA,WAAA,QACAze,KAAAC,EAAAA,gGA9QAs7C,UAAAv7C,KAAYW,EAAAA,gBAAZJ,MAAAwnD,IAAA/jB,aAAA,MAqUA6X,kBAAA77C,KAAAoJ,EAAAA,gEA/CAsG,WAAA1P,KAAAS,EAAAA,SAOAqnD,GAOA2B,ICrSAC,GAAA,WAAA,QAAAA,MA2B4B,sBA3B5B1pD,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUwmD,GAAe7wC,GAAiBxV,GAAiBsmD,GAAyBvmD,EAAAA,cACpFE,SACEsmD,GACAC,GACAC,GACAC,GACAL,GACArmD,GACA2mD,GACAC,GACAN,GACA9B,GACAC,GACAoC,IAEF3mD,cACEqmD,GACAC,GACAC,GACAC,GACAC,GACAC,GACApC,GACAC,QAGJ2B,KC9BA/Q,GAAA,WAUE,QAAFA,GACYyR,EACAC,EACAC,EACA99B,EACA5G,EACkBjM,GALlBlX,KAAZ2nD,UAAYA,EACA3nD,KAAZ4nD,0BAAYA,EACA5nD,KAAZ6nD,QAAYA,EACA7nD,KAAZ+pB,UAAYA,EACA/pB,KAAZmjB,kBAAYA,EACkBnjB,KAA9BkX,UAA8BA,EAR5BlX,KAAFgzC,UAAc,GAAInqC,GAAAA,QAmDlB,MArCEqtC,GAAF70C,UAAAijB,OAAE,SAAOwjC,OAAT,KAAAA,IAASA,MACA9nD,KAAK6nC,UACR7nC,KAAK6nC,QAAU,GAAIpkB,GAAAA,eAAezjB,KAAK2nD,UAAW3nD,KAAKmjB,oBAGzDnjB,KAAKukB,SAEAvkB,KAAK+nD,UACR/nD,KAAK+nD,QAAU,GAAIC,GAAAA,gBAAgBhoD,KAAKkX,UAAU25B,cAAc,OAC5D7wC,KAAK4nD,0BAA2B5nD,KAAK6nD,QAAS7nD,KAAK+pB,WAG7D,IAAUzgB,GAAuBtJ,KAAK2nD,UAAUrgD,WAAW3B,aAKvD2D,GAAkB,WAAE2+C,aAAajoD,KAAK+nD,QAAQG,cAAe5+C,GAC7DtJ,KAAK6nC,QAAQvjB,OAAOtkB,KAAK+nD,QAASD,GAClC9nD,KAAKgzC,UAAUlvC,QAOjBoyC,EAAF70C,UAAAkjB,OAAE,WACMvkB,KAAK6nC,QAAQsgB,YACfnoD,KAAK6nC,QAAQtjB,UAIjB2xB,EAAF70C,UAAAiL,YAAE,WACMtM,KAAK+nD,SACP/nD,KAAK+nD,QAAQhhC,0BAxDnBxpB,KAACiB,EAAAA,UAADV,OACEW,SAAU,sEAhBZlB,KAAEwc,EAAAA,cACFxc,KAAEinB,EAAAA,2BACFjnB,KAAE6qD,EAAAA,iBACF7qD,KAAEiwB,EAAAA,WACFjwB,KAAE8a,EAAAA,mBA2BF9a,SAAAsW,GAAAjW,aAAAL,KAAKuW,EAAAA,OAALhW,MAAYoa,EAAAA,eA2CZg+B,KC3DamS,IAYXC,cAAe/uC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQ7L,EAAAA,OACZqa,QAAS,EACTpa,UAAW,gBAEb8L,EAAAA,WAAW,gBAAiBknC,EAAAA,OAC1B1wB,EAAAA,MAAM,oBAAqBvW,EAAAA,QAAQ,eAAgBhM,EAAAA,OAAOqa,QAAS,MACnErO,EAAAA,QAAQ,mCAAoChM,EAAAA,OAAOC,UAAW,iBAEhE8L,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBhM,EAAAA,OAAOqa,QAAS,QAQvEugC,YAAahvC,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAW7L,EAAAA,OAAOqa,QAAS,KACjCtO,EAAAA,WAAW,aACT/L,EAAAA,OAAOqa,QAAS,IAChBrO,EAAAA,QAAQ,qDAUD4uC,GAAcF,GAAkBE,YAOhCD,GAAgBD,GAAkBC,cC3DlCE,GAAiB,GAAIr4C,GAAAA,eAA6B,gCCa/D,QAAAs4C,MAA8B,MAA9BA,MACaC,GACTtgD,EAAmBhB,EAAcqhD,KAMrC7S,GAAA,SAAAt3C,GAqCE,QAAFs3C,GACYlwC,EACUuR,EACV9B,EACoCm8B,GAJ9C,GAAFxxC,GAOIxB,EAAJgF,KAAAtD,OAAAA,WANYF,GAAZ4F,YAAYA,EAEA5F,EAAZqV,cAAYA,EACoCrV,EAAhDwxC,YAAgDA,EAjBrCxxC,EAAXV,KAAqE,WAK1DU,EAAXu1C,SAA4C,GAAIxsC,GAAAA,QAG9C/I,EAAF6zC,cAA0B,EAGxB7zC,EAAF6oD,kBAA8B,EAWtBxzC,GAIFA,EAAcK,QAAQ1V,EAAK4F,aAAa,GAGtC4rC,GAAeA,EAAYsX,SAC7BtX,EAAYsX,QAAQ9oD,GAGtBA,EAAKoX,UAAYD,IAjCrB,MAJiC1Y,GAAjCq3C,EAAAt3C,GAyCEs3C,EAAFv0C,UAAAkG,MAAE,SAAMlB,OAAR,KAAAA,IAAQA,EAAR,WACQrG,KAAKmV,cACPnV,KAAKmV,cAAc0iB,SAAS73B,KAAK6yB,kBAAmBxsB,GAEpDrG,KAAK6yB,kBAAkBtrB,SAI3BquC,EAAFv0C,UAAAiL,YAAE,WACMtM,KAAKmV,eACPnV,KAAKmV,cAAcU,eAAe7V,KAAK0F,aAGrC1F,KAAKsxC,aAAetxC,KAAKsxC,YAAYuX,YACvC7oD,KAAKsxC,YAAYuX,WAAW7oD,MAG9BA,KAAKq1C,SAASrwC,YAIhB4wC,EAAFv0C,UAAAoS,aAAE,WACE,MAAOzT,MAAKiN,SAAW,KAAO,KAIhC2oC,EAAFv0C,UAAAwxB,gBAAE,WACE,MAAO7yB,MAAK0F,YAAYC,eAI1BiwC,EAAFv0C,UAAAynD,eAAE,SAAe3jD,GACTnF,KAAKiN,WACP9H,EAAM2F,iBACN3F,EAAMgyB,oBAKVye,EAAFv0C,UAAA0nD,kBAAE,WACE/oD,KAAKq1C,SAASvxC,KAAK9D,OAIrB41C,EAAFv0C,UAAA2nD,SAAE,WACF,GAAU1/C,GAAuBtJ,KAAK0F,YAAYC,cACxCsjD,EAAejpD,KAAKkX,UAAYlX,KAAKkX,UAAUgyC,UAAY,EAC7DC,EAAS,EAEb,IAAI7/C,EAAQkO,WAMV,IAAK,GALC4xC,GAAS9/C,EAAQkO,WAAWhV,OAKzBS,EAAI,EAAGA,EAAImmD,EAAQnmD,IACtBqG,EAAQkO,WAAWvU,GAAG0U,WAAasxC,IACrCE,GAAU7/C,EAAQkO,WAAWvU,GAAGuJ,YAKtC,OAAO28C,GAAOrxC,uBA3HlBva,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,kBACEO,SAAU,cACV4I,QAAF,WAAA,iBACE1I,MACF2Z,cAAqB,OACf1Z,MAAN,gBACIkqD,oCAAJ,eACIC,wCAAJ,mBACItwB,kBAAJ,iBACIlxB,uBAAJ,sBACIyhD,kBAAmB,mBACnBppD,UAAJ,yBACI4xB,eAAJ,uBAEAtyB,gBAAAC,EAAAA,wBAAyCC,OACzCL,cAAAC,EAAAA,kBAAAC,KACEP,SAAF,yRA3CA1B,KAAE2Y,EAAAA,eAkEF3Y,SAAAsW,GAAAjW,aAAAL,KAAKuW,EAAAA,OAALhW,MAAY0qD,MAAZjrD,KAAAsS,EAAAA,cAEA+lC,EAAAh2C,uCAjBAg2C,OCDa4T,GACT,GAAIr5C,GAAAA,eAAsC,4BACxCoS,WAAY,OACZC,QAASinC,KAmBf9W,GAAA,WA4JE,QAAFA,GACYjtC,EACA8C,EACkC4/B,GAFlCpoC,KAAZ0F,YAAYA,EACA1F,KAAZwI,QAAYA,EACkCxI,KAA9CooC,gBAA8CA,EA7IpCpoC,KAAV0pD,WAAsC1pD,KAAKooC,gBAAgBkM,UACjDt0C,KAAV2pD,WAAsC3pD,KAAKooC,gBAAgBqM,UAIjDz0C,KAAV4pD,UAGU5pD,KAAV6pD,aAAyB,GAAIhhD,GAAAA,QAGnB7I,KAAV8pD,iBAA6Bl5C,EAAAA,aAAaC,MAGxC7Q,KAAF+pD,cAGE/pD,KAAFgqD,qBAA2C,OAGzChqD,KAAFmb,eAAmB,GAAItS,GAAAA,QAYZ7I,KAAXi0C,cAAmCj0C,KAAKooC,gBAAgB6L,cA8C9Cj0C,KAAViqD,gBAAqCjqD,KAAKooC,gBAAgB4M,eAQhDh1C,KAAVkqD,aAA8ClqD,KAAKooC,gBAAgBgK,YA0C9CpyC,KAArBqmB,OACM,GAAIjd,GAAAA,aAOEpJ,KAAZ2jC,MAAoB3jC,KAAKqmB,OAAzB,MArGE1iB,QAAFC,eACM+uC,EADNtxC,UAAA,iBAAE,WACiC,MAAOrB,MAAK0pD,gBAC7C,SAAc7lD,GACE,WAAVA,GAAgC,UAAVA,GACxBsmD,KAEFnqD,KAAK0pD,WAAa7lD,EAClB7D,KAAKk0C,sDAIPvwC,OAAFC,eACM+uC,EADNtxC,UAAA,iBAAE,WACiC,MAAOrB,MAAK2pD,gBAC7C,SAAc9lD,GACE,UAAVA,GAA+B,UAAVA,GACvBumD,KAEFpqD,KAAK2pD,WAAa9lD,EAClB7D,KAAKk0C,sDAoBPvwC,OAAFC,eACM+uC,EADNtxC,UAAA,sBAAE,WACgC,MAAOrB,MAAKiqD,qBAC5C,SAAmBpmD,GACjB7D,KAAKiqD,gBAAkB34C,EAAAA,sBAAsBzN,oCAK/CF,OAAFC,eACM+uC,EADNtxC,UAAA,mBAAE,WACyC,MAAOrB,MAAKkqD,kBACrD,SAAgBrmD,GACd7D,KAAKkqD,aAAe54C,EAAAA,sBAAsBzN,oCAU5CF,OAAFC,eACM+uC,EADNtxC,UAAA,kBAAE,SACegpD,GADf,GAAFvqD,GAAAE,KAEUsqD,EAAqBtqD,KAAKuqD,mBAE5BD,IAAsBA,EAAmB9nD,QAC3C8nD,EAAmB3vB,MAAM,KAAKx4B,QAAQ,SAACqoD,GACrC1qD,EAAKiqD,WAAWS,IAAa,IAIjCxqD,KAAKuqD,oBAAsBF,EAEvBA,GAAWA,EAAQ7nD,SACrB6nD,EAAQ1vB,MAAM,KAAKx4B,QAAQ,SAACqoD,GAC1B1qD,EAAKiqD,WAAWS,IAAa,IAG/BxqD,KAAK0F,YAAYC,cAAc6kD,UAAY,qCAY/C7mD,OAAFC,eACM+uC,EADNtxC,UAAA,iBAAE,WAC0B,MAAOrB,MAAKkpB,gBACtC,SAAcmhC,GAAmBrqD,KAAKkpB,WAAamhC,mCAkBnD1X,EAAFtxC,UAAAmiB,SAAE,WACExjB,KAAKk0C,sBAGPvB,EAAFtxC,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,IACIA,MAAK6J,YAAc,GAAI8B,GAAAA,gBAA6B3L,KAAK4pD,QAAQ/9C,WAAW6xC,gBAC5E19C,KAAK8pD,iBAAmB9pD,KAAK6J,YAAYg0C,OAAO57C,UAAU,WAAM,MAAAnC,GAAKumB,OAAO7gB,KAAK,UAGnFmtC,EAAFtxC,UAAAiL,YAAE,WACEtM,KAAK8pD,iBAAiBr3C,cACtBzS,KAAKqmB,OAAOrhB,YAId2tC,EAAFtxC,UAAAg0C,SAAE,WACE,MAAOr1C,MAAK6pD,aAAa9nD,KACvBqiB,EAAAA,UAAUpkB,KAAK4pD,QACf1Q,EAAAA,UAAU,SAAAkG,GAAS,MAAA76C,GAAAA,MAFzBxE,UAAA,GAEkCq/C,EAAM56C,IAAI,SAAAwhD,GAAQ,MAAAA,GAAK3Q,gBAKvD1C,EAAFtxC,UAAAoJ,eAAE,SAAetF,GACjB,GAAUwF,GAAUxF,EAAMwF,OAEtB,QAAQA,GACN,IAAK84B,GAAAA,OACHzjC,KAAKqmB,OAAO7gB,KAAK,UACnB,MACA,KAAK63B,GAAAA,WACCr9B,KAAKkzC,YAAiC,QAAnBlzC,KAAKmO,WAC1BnO,KAAKqmB,OAAO7gB,KAAK,UAErB,MACA,KAAK+3B,GAAAA,YACCv9B,KAAKkzC,YAAiC,QAAnBlzC,KAAKmO,WAC1BnO,KAAKqmB,OAAO7gB,KAAK,UAErB,MACA,SACMmF,IAAY2yB,EAAAA,UAAY3yB,IAAY6yB,EAAAA,YACtCx9B,KAAK6J,YAAY4gD,eAAe,YAGlCzqD,KAAK6J,YAAYuB,UAAUjG,KAQjCwtC,EAAFtxC,UAAAgyC,eAAE,SAAehtC,GAAf,GAAFvG,GAAAE,SAAA,KAAAqG,IAAiBA,EAAjB,WAEQrG,KAAKuyC,YACPvyC,KAAKwI,QAAQywC,SAAS/xB,eACnBnlB,KAAKC,EAAAA,KAAK,IACVC,UAAU,WAAM,MAAAnC,GAAK+J,YAAY4gD,eAAepkD,GAAQwE,uBAE3D7K,KAAK6J,YAAY4gD,eAAepkD,GAAQwE,sBAQ5C8nC,EAAFtxC,UAAAqpD,gBAAE,WACE1qD,KAAK6J,YAAYiD,eAAe,IAOlC6lC,EAAFtxC,UAAAkyC,aAAE,SAAaC,GAEf,GAAUmX,GAAe,mBAlPO,EAkPqCnX,GAC3DoX,EAAkBjnD,OAAO0c,KAAKrgB,KAAK+pD,YAAYt1C,KAAK,SAAAo2C,GAAK,MAAAA,GAAEC,WAAW,oBAEvEF,IAAmBA,IAAoB5qD,KAAK+qD,qBAC3C/qD,KAAK+qD,qBACP/qD,KAAK+pD,WAAW/pD,KAAK+qD,qBAAsB,GAG7C/qD,KAAK+pD,WAAWY,IAAgB,EAChC3qD,KAAK+qD,mBAAqBJ,IAQ9BhY,EAAFtxC,UAAAunD,QAAE,SAAQ5C,IAM6B,IAA/BhmD,KAAK4pD,OAAOjpC,QAAQqlC,KACtBhmD,KAAK4pD,OAAOloD,KAAKskD,GACjBhmD,KAAK6pD,aAAa/lD,KAAK9D,KAAK4pD,UAQhCjX,EAAFtxC,UAAAwnD,WAAE,SAAW7C,GACb,GAAU3jD,GAAQrC,KAAK4pD,OAAOjpC,QAAQqlC,EAE9BhmD,MAAK4pD,OAAOjpC,QAAQqlC,IAAS,IAC/BhmD,KAAK4pD,OAAO3nC,OAAO5f,EAAO,GAC1BrC,KAAK6pD,aAAa/lD,KAAK9D,KAAK4pD,UAWhCjX,EAAFtxC,UAAA6yC,mBAAE,SAAmBC,EAAsCE,OAA3D,KAAAF,IAAqBA,EAAsBn0C,KAAKs0C,eAAhD,KAAAD,IAA2DA,EAAsBr0C,KAAKy0C,UACtF,IAAU4V,GAAUrqD,KAAK+pD,UACrBM,GAAQ,mBAA8B,WAATlW,EAC7BkW,EAAQ,kBAA6B,UAATlW,EAC5BkW,EAAQ,kBAA6B,UAAThW,EAC5BgW,EAAQ,kBAA6B,UAAThW,GAI9B1B,EAAFtxC,UAAAuxC,gBAAE,WAEE5yC,KAAKgqD,qBAAuB,SAI9BrX,EAAFtxC,UAAA0xC,gBAAE,WAEE/yC,KAAKgqD,qBAAuB,QAI9BrX,EAAFtxC,UAAA2pD,iBAAE,SAAiB7lD,GACfnF,KAAKmb,eAAerX,KAAKqB,GACzBnF,KAAKy1C,cAAe,GAGtB9C,EAAFtxC,UAAA4pD,kBAAE,SAAkB9lD,GAChBnF,KAAKy1C,cAAe,EAQE,UAAlBtwC,EAAMG,SAA4D,IAArCtF,KAAK6J,YAAYsyC,kBAChDh3C,EAAMmE,QAAQqzC,UAAY,mBApUhCp/C,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,WACEQ,SAAU,8XACVI,QAAF,8vDACEI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACER,SAAF,UACEsH,YACF+hD,GAAAC,cACAD,GAAAE,aAEA7pD,YACAvB,QAAAqrD,GAAAnrD,YAAAs1C,gFA7EAp1C,SAAEsW,GAAFjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAA0rD,SAiOA7W,EAAA/yC,0EA7GA60C,YAAAl3C,KAAAS,EAAAA,QAGA8b,cAAAvc,KAAAuJ,EAAAA,UAAAhJ,MAAAic,EAAAA,eAWAqlC,QAAA7hD,KAAAW,EAAAA,gBAAAJ,MAAA83C,MAWArD,cAAAh1C,KAAGo2B,EAAAA,aAAH71B,MAAAo4C,MAOAlB,iBAAAz3C,KAAAS,EAAAA,QAMAo0C,cAAA70C,KAAGS,EAAAA,QAGHkrB,aAAA3rB,KAAAS,EAAAA,MAAAF,MAAA,WAQA4T,YAAAnU,KAAAS,EAAAA,QAaAqoB,SAAA9oB,KAAAoJ,EAAAA,SA6BAg9B,QAAApmC,KAAAoJ,EAAAA,UAaAgsC,KXjMagD,GACT,GAAIxlC,GAAAA,eAAqC,4BAQhCgmC,IACXh5C,QAASw4C,GACTplB,MAAOjD,EAAAA,SACPkD,WAAY06B,IAORnjD,GAA8BC,EAAAA,iCAAiCC,SAAS,IAQ9EspC,GAAA,WAyFE,QAAFA,GAAsB1nB,EACAqb,EACA/hB,EAC0B+lB,EACdoI,EACQS,EACRjsC,EAGZqP,GATpB,GAAFrV,GAAAE,IAAsBA,MAAtB6pB,SAAsBA,EACA7pB,KAAtBklC,SAAsBA,EACAllC,KAAtBmjB,kBAAsBA,EAEYnjB,KAAlCsxC,YAAkCA,EACQtxC,KAA1C+xC,kBAA0CA,EACR/xC,KAAlC8F,KAAkCA,EAGZ9F,KAAtBmV,cAAsBA,EArFZnV,KAAV4lB,YAA2C,KACjC5lB,KAAV6xC,WAA+B,EACrB7xC,KAAV4xC,4BAAwChhC,EAAAA,aAAaC,MAC3C7Q,KAAVi1C,mBAA+BrkC,EAAAA,aAAaC,MAClC7Q,KAAVmrD,uBAAmCv6C,EAAAA,aAAaC,MAOtC7Q,KAAV0xC,kBAA8B,WAAM,MAAA5xC,GAAKwzC,UAAY,SAInDtzC,KAAFszC,UAAwC,KAwCnBtzC,KAArByzC,WAAsD,GAAIrqC,GAAAA,aAQrCpJ,KAArB+1C,WAAsD/1C,KAAKyzC,WAGtCzzC,KAArB0zC,WAAsD,GAAItqC,GAAAA,aAQrCpJ,KAArBg2C,YAAuDh2C,KAAK0zC,WAaxDxO,EAASv/B,cAAc++C,iBAAiB,aAAc1kD,KAAK0xC,kBACvD3pC,IAEAgqC,IACFA,EAAkB4W,iBAAmB3oD,KAAK8xC,mBAG5C9xC,KAAKmpC,gBAAkBD,EAyY3B,MAldEvlC,QAAFC,eACM2tC,EADNlwC,UAAA,oCAAE,WACmD,MAAOrB,MAAKqyC,UAC/D,SAAiChkB,GAC/BruB,KAAKqyC,KAAOhkB,mCAId1qB,OAAFC,eACM2tC,EADNlwC,UAAA,YAAE,WACa,MAAOrB,MAAKorD,WACzB,SAAS/Y,GAAT,GAAFvyC,GAAAE,IACQqyC,KAASryC,KAAKorD,QAIlBprD,KAAKorD,MAAQ/Y,EACbryC,KAAKmrD,uBAAuB14C,cAExB4/B,IACFryC,KAAKmrD,uBAAyB9Y,EAAK1O,MAAMzc,eAAejlB,UAAU,SAAAovC,GAChEvxC,EAAK+yC;iBAGW,UAAXxB,GAAiC,QAAXA,IAAqBvxC,EAAKwxC,aACnDxxC,EAAKwxC,YAAYjrB,OAAO7gB,KAAK6rC,wCAqDrCE,EAAFlwC,UAAAgK,mBAAE,WACErL,KAAKwxC,aACLxxC,KAAKyxC,gBAGPF,EAAFlwC,UAAAiL,YAAE,WACMtM,KAAK4lB,cACP5lB,KAAK4lB,YAAYmB,UACjB/mB,KAAK4lB,YAAc,MAGrB5lB,KAAKklC,SAASv/B,cAAc4hC,oBAAoB,aAAcvnC,KAAK0xC,kBAC/D3pC,IAEJ/H,KAAK2xC,wBACL3xC,KAAK4xC,4BAA4Bn/B,eAInC9O,OAAFC,eAAM2tC,EAANlwC,UAAA,gBAAE,WACE,MAAOrB,MAAK6xC,2CAIdluC,OAAFC,eAAM2tC,EAANlwC,UAAA,WAAE,WACE,MAAOrB,MAAK8F,MAA4B,QAApB9F,KAAK8F,KAAKjC,MAAkB,MAAQ,uCAI1D0tC,EAAFlwC,UAAAywC,gBAAE,WACE,SAAU9xC,KAAK+xC,oBAAqB/xC,KAAKsxC,cAI3CC,EAAFlwC,UAAA2wC,WAAE,WACE,MAAOhyC,MAAK6xC,UAAY7xC,KAAKiyC,YAAcjyC,KAAKkyC,YAIlDX,EAAFlwC,UAAA6wC,SAAE,WAAA,GAAFpyC,GAAAE,IACI,KAAIA,KAAK6xC,UAAT,CAIA7xC,KAAKwxC,YAET,IAAUxmB,GAAahrB,KAAK2rB,iBAClBc,EAAgBzB,EAAWoe,WAEjCppC,MAAKmyC,aAAa1lB,EAA8B,kBAChDA,EAAc2lB,YAAuC,MAAzBpyC,KAAKqyC,KAAKD,aAAuBpyC,KAAK8xC,kBAC9D9xC,KAAKqyC,KAAKD,YACdpnB,EAAW1G,OAAOtkB,KAAKsyC,cAEnBtyC,KAAKqyC,KAAKE,aACZvyC,KAAKqyC,KAAKE,YAAYjuB,OAAOtkB,KAAKwyC,UAGpCxyC,KAAK4xC,4BAA8B5xC,KAAKyyC,sBAAsBxwC,UAAU,WAAM,MAAAnC,GAAKmyC,cACnFjyC,KAAK0yC,YAED1yC,KAAKqyC,eAAgBM,KACvB3yC,KAAKqyC,KAAKO,oBAKdrB,EAAFlwC,UAAA4wC,UAAE,WACEjyC,KAAKqyC,KAAK1O,MAAMn+B,QAOlB+rC,EAAFlwC,UAAAkG,MAAE,SAAMlB,OAAR,KAAAA,IAAQA,EAAR,WACQrG,KAAKmV,cACPnV,KAAKmV,cAAc0iB,SAAS73B,KAAKklC,SAAU7+B,GAE3CrG,KAAKklC,SAASv/B,cAAc4B,SAKxBgqC,EAAVlwC,UAAAwxC,aAAE,WAAA,GAAF/yC,GAAAE,IACI,IAAKA,KAAK4lB,aAAgB5lB,KAAK8yC,SAA/B,CAIJ,GAAUT,GAAOryC,KAAKqyC,IAElBryC,MAAK4xC,4BAA4Bn/B,cACjCzS,KAAK4lB,YAAYrB,SAEb8tB,YAAgBM,KAClBN,EAAKU,kBAEDV,EAAKE,YAEPF,EAAKl3B,eACFpZ,KACC0V,EAAAA,OAAO,SAAAtS,GAAS,MAAkB,SAAlBA,EAAMG,UACtBtD,EAAAA,KAAK,GAELyH,EAAAA,UAAU4oC,EAAKE,YAAYS,YAE5B/wC,UAAU,WAAM,MAAAowC,GAAgB,YAAE9tB,cAAU1Q,GAAW,WAEtD/T,EAAKmzC,eAGTjzC,KAAKizC,eAGPjzC,KAAKizC,aAEDZ,EAAKE,aACPF,EAAKE,YAAYhuB,YASfgtB,EAAVlwC,UAAAqxC,UAAE,WACE1yC,KAAKqyC,KAAKa,WAAalzC,KAAK8xC,kBAAoB9xC,KAAKsxC,gBAAcz9B,GACnE7T,KAAKqyC,KAAKlkC,UAAYnO,KAAKiG,IAC3BjG,KAAKmzC,oBACLnzC,KAAKozC,gBAAe,GACpBpzC,KAAKqyC,KAAKgB,eAAerzC,KAAKszC,WAAa,YAIrC/B,EAAVlwC,UAAA8xC,kBAAE,WACE,GAAInzC,KAAKqyC,KAAKkB,aAAc,CAI1B,IAHN,GAAUC,GAAQ,EACRN,EAAalzC,KAAKqyC,KAAKa,WAEpBA,GACLM,IACAN,EAAaA,EAAWA,UAG1BlzC,MAAKqyC,KAAKkB,aAAaC,KAQnBjC,EAAVlwC,UAAA4xC,WAAE,WACEjzC,KAAKozC,gBAAe,GAKfpzC,KAAKszC,UAIEtzC,KAAK8xC,mBACf9xC,KAAKuH,MAAMvH,KAAKszC,WAFhBtzC,KAAKuH,QAKPvH,KAAKszC,UAAY,MAIX/B,EAAVlwC,UAAA+xC,eAAE,SAAuBzO,GACrB3kC,KAAK6xC,UAAYlN,EACjB3kC,KAAK6xC,UAAY7xC,KAAKyzC,WAAWjuC,OAASxF,KAAK0zC,WAAWluC,OAEtDxF,KAAK8xC,oBACP9xC,KAAK+xC,kBAAkB4B,aAAehP,IAQlC4M,EAAVlwC,UAAAmwC,WAAE,WACOxxC,KAAKqyC,MACRuB,MAQIrC,EAAVlwC,UAAAsqB,eAAE,WACE,IAAK3rB,KAAK4lB,YAAa,CAC3B,GAAY4E,GAASxqB,KAAK6zC,mBACpB7zC,MAAK8zC,sBAAsBtpB,EAAuB,kBAClDxqB,KAAK4lB,YAAc5lB,KAAK6pB,SAASuD,OAAO5C,GAKxCxqB,KAAK4lB,YAAYmuB,gBAAgB9xC,YAGnC,MAAOjC,MAAK4lB,aAON2rB,EAAVlwC,UAAAwyC,kBAAE,WACE,MAAO,IAAInnB,GAAAA,eACTC,iBAAkB3sB,KAAK6pB,SAAS9jB,WAC3BwiC,oBAAoBvoC,KAAKklC,UACzB8O,qBACAxL,sBAAsB,mBAC3ByL,cAAej0C,KAAKqyC,KAAK4B,eAAiB,mCAC1C/K,eAAgBlpC,KAAKmpC,kBACrBh7B,UAAWnO,KAAK8F,QASZyrC,EAAVlwC,UAAAyyC,sBAAE,SAA8B/tC,GAA9B,GAAFjG,GAAAE,IACQA,MAAKqyC,KAAK6B,oBACZnuC,EAASgjC,gBAAgB9mC,UAAU,SAAAsJ,GACzC,GAAc4oC,GAAyD,UAAnC5oC,EAAO6oC,eAAelK,SAAuB,QAAU,SAC7EmK,EAAyD,QAAnC9oC,EAAO6oC,eAAejK,SAAqB,QAAU,OAEjFrqC,GAAKuyC,KAAuB,mBAAE8B,EAAME,MAUlC9C,EAAVlwC,UAAA8wC,aAAE,SAAqBxlB,GACf,GAAAvd,GAAR,WAAApP,KAAAqyC,KAAAiC,WAAA,MAAA,UAAA,QAAA,OAASzK,EAATz6B,EAAA,GAAkBmlC,EAAlBnlC,EAAA,GAGQolC,EAAR,UAAAx0C,KAAAqyC,KAAAoC,WAAA,SAAA,QAAA,MAAA,UAAStK,EAATqK,EAAA,GAAmBE,EAAnBF,EAAA,GAGQG,GAARxK,EAAAuK,GAAS5K,EAAT6K,EAAA,GAAkBC,EAAlBD,EAAA,GACQE,GAARhL,EAAA0K,GAASrK,EAAT2K,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAEV/0C,MAAK8xC,mBAGPgD,EAAmBjL,EAAkC,WAAxB7pC,KAAKqyC,KAAKiC,UAAyB,QAAU,MAC1EC,EAAkBrK,EAAuB,QAAZL,EAAoB,QAAU,MAC3DkL,EAAuB,WAAb5K,EA/XsB,GAAA,GAgYtBnqC,KAAKqyC,KAAK2C,iBACpBlL,EAAuB,QAAbK,EAAqB,SAAW,MAC1CyK,EAAuC,QAArBF,EAA6B,SAAW,OAG5D/nB,EAAiB6c,gBACdK,QAAPA,EAAgBC,QAAhBA,EAAyBI,SAAzBA,EAAmCC,SAAnCA,EAA6C4K,QAA7CA,IACOlL,QAAS0K,EAAiBzK,QAAjCA,EAA0CI,SAAU4K,EAAkB3K,SAAtEA,EAAgF4K,QAAhFA,IAEQlL,QAARA,EACQC,QAAS8K,EACT1K,SAARA,EACQC,SAAUuK,EACVK,SAAUA,IAGVlL,QAAS0K,EACTzK,QAAS8K,EACT1K,SAAU4K,EACV3K,SAAUuK,EACVK,SAAUA,MAMRxD,EAAVlwC,UAAAswC,sBAAE,WACE3xC,KAAK4xC,4BAA4Bn/B,cACjCzS,KAAKi1C,mBAAmBxiC,eAIlB8+B,EAAVlwC,UAAAoxC,oBAAE,WAAA,GAAF3yC,GAAAE,KACUk1C,EAAWl1C,KAAgB,YAAEmlC,gBAC7BhZ,EAAcnsB,KAAgB,YAAEmsB,cAChCgpB,EAAcn1C,KAAKsxC,YAActxC,KAAKsxC,YAAYjrB,OAAS7a,EAAAA,KAC3D4pC,EAAQp1C,KAAKsxC,YAActxC,KAAKsxC,YAAY+D,WAAWtzC,KAC3D0V,EAAAA,OAAO,SAAA/C,GAAU,MAAAA,KAAW5U,EAAKiyC,oBACjCt6B,EAAAA,OAAO,WAAM,MAAA3X,GAAK+xC,aAChBrmC,EAAAA,IAEJ,OAAOjH,GAAAA,MAAM2wC,EAAUC,EAAaC,EAAOjpB,IAI7ColB,EAAFlwC,UAAAi0C,iBAAE,SAAiBnwC,GACVowC,EAAAA,gCAAgCpwC,KAGnCnF,KAAKszC,UAA6B,IAAjBnuC,EAAMi3B,OAAe,QAAU,KAK5Cp8B,KAAK8xC,mBACP3sC,EAAM2F,mBAMZymC,EAAFlwC,UAAAoJ,eAAE,SAAetF,GACjB,GAAUwF,GAAUxF,EAAMwF,OAElB3K,MAAK8xC,oBACAnnC,IAAY4yB,EAAAA,aAA4B,QAAbv9B,KAAKiG,KAChC0E,IAAY0yB,EAAAA,YAA2B,QAAbr9B,KAAKiG,MACtCjG,KAAKkyC,YAKTX,EAAFlwC,UAAAkS,aAAE,SAAapO,GACPnF,KAAK8xC,mBAEP3sC,EAAMgyB,kBACNn3B,KAAKkyC,YAELlyC,KAAKgyC,cAKDT,EAAVlwC,UAAAowC,aAAE,WAAA,GAAF3xC,GAAAE,IAESA,MAAK8xC,oBAIV9xC,KAAKi1C,mBAAqBj1C,KAAKsxC,YAAY+D,WAIxCtzC,KACC0V,EAAAA,OAAO,SAAA/C,GAAU,MAAAA,KAAW5U,EAAKiyC,oBAAsBr9B,EAAOzH,WAC9Du6B,EAAAA,MAAM,EAAGgO,EAAAA,gBAEVvzC,UAAU,WACTnC,EAAKwzC,UAAY,QAKbxzC,EAAKuyC,eAAgBM,KAAW7yC,EAAKuyC,KAAKoD,aAG5C31C,EAAKuyC,KAAKl3B,eACPpZ,KAAKC,EAAAA,KAAK,GAAIwlC,EAAAA,MAAM,EAAGgO,EAAAA,eAAgB/rC,EAAAA,UAAU3J,EAAKwxC,YAAY+D,aAClEpzC,UAAU,WAAM,MAAAnC,GAAKoyC,aAExBpyC,EAAKoyC,eAMLX,EAAVlwC,UAAAixC,WAAE,WAQE,MAJKtyC,MAAK6nC,SAAW7nC,KAAK6nC,QAAQ/tB,cAAgB9Z,KAAKqyC,KAAKv4B,cAC1D9Z,KAAK6nC,QAAU,GAAIpkB,GAAAA,eAAezjB,KAAKqyC,KAAKv4B,YAAa9Z,KAAKmjB,oBAGzDnjB,KAAK6nC,wBAjfhBtqC,KAACiB,EAAAA,UAADV,OACEW,SAAU,8CACVS,MACEw2C,gBAAiB,OACjB/8B,uBAAwB,mBACxB6lB,cAAe,2BACfC,YAAa,yBACbt+B,UAAW,wBAEbnB,SAAU,yDAnEZzB,KAAE+vB,EAAAA,UAUF/vB,KAAEC,EAAAA,aASFD,KAAE8a,EAAAA,mBAmIF9a,SAAAsW,GAAAjW,aAAAL,KAAeuW,EAAAA,OAAfhW,MAAsB63C,QA9HtBp4C,KAAQo1C,GAAR/0C,aAAAL,KA+HesS,EAAAA,aA7HftS,KAAQq4C,GAARh4C,aAAAL,KA8HesS,EAAAA,WA9HftS,KA8H2Bs4C,EAAAA,SA7J3Bt4C,KAAmBqS,EAAAA,eAAnBhS,aAAAL,KA8JesS,EAAAA,aA/JftS,KAAQ2Y,EAAAA,kCAkGR4/B,+BAAAv4C,KAAGS,EAAAA,MAAHF,MAAS,0BAOTu0C,OAAA90C,KAAGS,EAAAA,MAAHF,MAAS,uBAwBT00C,WAAAj1C,KAAGS,EAAAA,MAAHF,MAAS,wBAGT21C,aAAAl2C,KAAGoJ,EAAAA,SAQHovC,aAAAx4C,KAAGoJ,EAAAA,SAGH+sC,aAAAn2C,KAAGoJ,EAAAA,SAQHqvC,cAAAz4C,KAAGoJ,EAAAA,UA6ZH4qC,KCviBA0E,GAAA,WAAA,QAAAA,MAW4B,sBAX5B14C,KAACkD,EAAAA,SAAD3C,OACE4C,SACEE,EAAAA,aACAC,GACAwV,GACAmT,EAAAA,eAEF1oB,SAAU6xC,GAASiD,GAAarE,GAAgB2E,GAAgBr1C,IAChEE,cAAe4xC,GAASiD,GAAarE,GAAgB2E,IACrDx3C,WAAYy3C,QAEdF,KCRaG,IAaXC,eAAgB98B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7L,EAAAA,OACZC,UAAW,cACX0oC,SAAU,OACVtuB,QAAS,KAEXxO,EAAAA,MAAM,UAAW7L,EAAAA,OACfqa,QAAS,EACTsuB,SAAU,oBACV1oC,UAAW,eAEb4L,EAAAA,MAAM,mBAAoB7L,EAAAA,OACxBqa,QAAS,EACTsuB,SAAU,oBACV1oC,UAAW,eAEb8L,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,qCAChCD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBhM,EAAAA,OAAOqa,QAAS,QAUvEuuB,cAAeh9B,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAW7L,EAAAA,OAAOqa,QAAS,KACjCtO,EAAAA,WAAW,mBACT/L,EAAAA,OAAOqa,QAAS,IAChBrO,EAAAA,QAAQ,qDAWD08B,GAAiBD,GAAoBC,eAOrCE,GAAgBH,GAAoBG,c9DS7C1gB,GAAe,CA8BnB/0B,GAAA01C,gCAA6C,CAM7C,IAGaC,IACT,GAAItmC,GAAAA,eAAqC,8BAShCumC,IACXv5C,QAASs5C,GACTlmB,MAAOjD,EAAAA,SACPkD,WAAYmmB,kBAKZ,QAAFC,GAEWzgB,EAEAtyB,GAFA7D,KAAXm2B,OAAWA,EAEAn2B,KAAX6D,MAAWA,EACX,MAAA+yC,oBAKE,QAAFC,GAAqBnxC,EACAoxC,EACAC,EACAC,EACAC,GAJAj3C,KAArB0F,YAAqBA,EACA1F,KAArB82C,0BAAqBA,EACA92C,KAArB+2C,YAAqBA,EACA/2C,KAArBg3C,iBAAqBA,EACAh3C,KAArBi3C,UAAqBA,EACrB,MAAAJ,MACaK,GAML9uC,EAAmBmQ,EAAcnR,EAAc+vC,EAAgBN,OAMvEO,GAAA,WAAA,QAAAA,MAG+B,sBAH/B75C,KAACiB,EAAAA,UAADV,OACEW,SAAU,yBAEZ24C,KAGAC,GAAA,SAAA/4C,GAiSE,QAAF+4C,GACY9uC,EACAD,EACAE,EACRsuC,EACAxvC,EACoBxB,EACRixC,EACAC,EACQM,EACOL,EACJ/pC,EACaqqC,EAK5BC,GAjBV,GAAF13C,GAkBIxB,EAlBJgF,KAAAtD,KAkBUsH,EAAYwvC,EAA2BC,EACvCC,EAAkBC,IAnB5Bj3C,WACYF,GAAZyI,eAAYA,EACAzI,EAAZwI,mBAAYA,EACAxI,EAAZ0I,QAAYA,EAGY1I,EAAxBgG,KAAwBA,EAGAhG,EAAxBw3C,iBAAwBA,EACOx3C,EAA/Bm3C,UAA+BA,EAOnBn3C,EAAZ03C,eAAYA,EArQF13C,EAAV23C,YAAuB,EAGb33C,EAAV82B,WAA+B,EAGrB92B,EAAV43C,WAAuB,EAMb53C,EAAV63C,WAA+B,EAGrB73C,EAAV83C,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAG5Ch4C,EAAVi4C,KAAiB,cAAcliB,KAGZ/1B,EAAnBk4C,SAA8B,GAAInvC,GAAAA,QAShC/I,EAAFm4C,iBAAqB,EASnBn4C,EAAFo4C,UAAoC,aAGlCp4C,EAAFq4C,WAAe,aAGbr4C,EAAFs4C,WAAuB,GAGrBt4C,EAAFu4C,iBAA6B,MAG3Bv4C,EAAFw4C,0BAA8B,GAAIzvC,GAAAA,QAUhC/I,EAAFy4C,SAAa,EAQXz4C,EAAF04C,aAEM3O,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKNrqC,EAAV24C,yBAA6C,EAanC34C,EAAV44C,UAAqB,EAGnB54C,EAAF64C,YAAgB,aAuFO74C,EAAvB8jB,UAA2C,GAwBhC9jB,EAAX84C,uBAA0EC,EAAAA,MAAM,WAC5E,MAAI/4C,GAAKg5C,QACAv0C,EAAAA,MAAbxE,UAAA,GAAsBD,EAAKg5C,QAAQt0C,IAAI,SAAAu0C,GAAU,MAAAA,GAAOC,qBAG7Cl5C,EAAK0I,QAAQywC,SACjB/xB,eACAnlB,KAAKC,EAAAA,KAAK,GAAIk3C,EAAAA,UAAU,WAAM,MAAAp5C,GAAK84C,4BAIrB94C,EAArBsjC,aAA2D,GAAIh6B,GAAAA,aAGlCtJ,EAA7B+kC,cACM/kC,EAAKsjC,aAAarhC,KAAK0V,EAAAA,OAAO,SAAA0hC,GAAK,MAAAA,KAAI30C,EAAAA,IAAI,eAGpB1E,EAA7BilC,cACMjlC,EAAKsjC,aAAarhC,KAAK0V,EAAAA,OAAO,SAAA0hC,GAAK,OAACA,IAAI30C,EAAAA,IAAI,eAG7B1E,EAArBs5C,gBACM,GAAIhwC,GAAAA,aAOWtJ,EAArBslB,YAAsD,GAAIhc,GAAAA,aAuBlDtJ,EAAKm3C,YAGPn3C,EAAKm3C,UAAUoC,cAAgBv5C,GAGjCA,EAAKw5C,uBAAyB/B,EAC9Bz3C,EAAKqpC,gBAAkBrpC,EAAKw5C,yBAC5Bx5C,EAAKoN,SAAWqI,SAASrI,IAAa,EAGtCpN,EAAK0uB,GAAK1uB,EAAK0uB,KAlCnB,MAxP+BjwB,GAA/B84C,EAAA/4C,GA8FEqF,OAAFC,eAAMyzC,EAANh2C,UAAA,eAAE,WACE,MAAOrB,MAAK04C,UAAY14C,KAAKy3C,gBAM/B,SAAY5zC,GACV7D,KAAK04C,SAAW70C,mCA6BlBF,OAAFC,eACMyzC,EADNh2C,UAAA,mBAAE,WAC4B,MAAOrB,MAAKu5C,kBACxC,SAAgB11C,GACd7D,KAAKu5C,aAAe11C,EACpB7D,KAAKw5C,aAAa11C,wCAIpBH,OAAFC,eACMyzC,EADNh2C,UAAA,gBAAE,WAC0B,MAAOrB,MAAK42B,eACtC,SAAa/yB,GACX7D,KAAK42B,UAAYtlB,EAAAA,sBAAsBzN,GACvC7D,KAAKw5C,aAAa11C,wCAIpBH,OAAFC,eACMyzC,EADNh2C,UAAA,gBAAE,WAC0B,MAAOrB,MAAK23C,eACtC,SAAa9zC,GACX,GAAI7D,KAAKy5C,gBACP,KAAMC,KAGR15C,MAAK23C,UAAYrmC,EAAAA,sBAAsBzN,oCAIzCF,OAAFC,eACMyzC,EADNh2C,UAAA,8BAAE,WACwC,MAAOrB,MAAKy4C,6BACpD,SAA2B50C,GACzB7D,KAAKy4C,wBAA0BnnC,EAAAA,sBAAsBzN,oCAQvDF,OAAFC,eACMyzC,EADNh2C,UAAA,mBAAE,WACoB,MAAOrB,MAAK43C,kBAChC,SAAgBngB,GACd,GAAkB,kBAAPA,GACT,KAAMkiB,KAER35C,MAAK43C,aAAengB,EAChBz3B,KAAKy5C,iBAEPz5C,KAAK45C,wDAKTj2C,OAAFC,eACMyzC,EADNh2C,UAAA,aAAE,WACmB,MAAOrB,MAAKi6B,YAC/B,SAAU6G,GACJA,IAAa9gC,KAAKi6B,SACpBj6B,KAAKu3B,WAAWuJ,GAChB9gC,KAAKi6B,OAAS6G,oCAqBlBn9B,OAAFC,eACMyzC,EADNh2C,UAAA,UAAE,WACmB,MAAOrB,MAAK65C,SAC/B,SAAOh2C,GACL7D,KAAK65C,IAAMh2C,GAAS7D,KAAK+3C,KACzB/3C,KAAKw5C,aAAa11C,wCAwEpBuzC,EAAFh2C,UAAAmiB,SAAE,WAAA,GAAF1jB,GAAAE,IACIA,MAAKy5C,gBAAkB,GAAIK,GAAAA,eAA0B95C,KAAK+5C,UAC1D/5C,KAAKw5C,aAAa11C,OAKlB9D,KAAKs4C,0BACFv2C,KAAKqZ,EAAAA,uBAAwB3R,EAAAA,UAAUzJ,KAAKg4C,WAC5C/1C,UAAU,WACLnC,EAAKk6C,WACPl6C,EAAK43C,WAAa,EAClB53C,EAAKsjC,aAAa59B,MAAK,KAEvB1F,EAAKsjC,aAAa59B,MAAK,GACvB1F,EAAKm6C,WAAWC,QAAU,EAC1Bp6C,EAAKwI,mBAAmB6B,mBAKhCktC,EAAFh2C,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,IACIA,MAAKm6C,kBAELn6C,KAAKy5C,gBAAgBn1C,SAASvC,KAAK0H,EAAAA,UAAUzJ,KAAKg4C,WAAW/1C,UAAU,SAAAkD,GACrEA,EAAMi1C,MAAMj4C,QAAQ,SAAA42C,GAAU,MAAAA,GAAOsB,WACrCl1C,EAAMm1C,QAAQn4C,QAAQ,SAAA42C,GAAU,MAAAA,GAAOwB,eAGzCv6C,KAAK84C,QAAQ30C,QAAQpC,KAAKqiB,EAAAA,UAAU,MAAO3a,EAAAA,UAAUzJ,KAAKg4C,WAAW/1C,UAAU,WAC7EnC,EAAK06C,gBACL16C,EAAK85C,0BAITvC,EAAFh2C,UAAA6kC,UAAE,WACMlmC,KAAKi3C,WACPj3C,KAAKy6C,oBAITpD,EAAFh2C,UAAAiiB,YAAE,SAAYnf,GAGNA,EAAQ8I,UACVjN,KAAKw5C,aAAa11C,QAItBuzC,EAAFh2C,UAAAiL,YAAE,WACEtM,KAAKg4C,SAASl0C,OACd9D,KAAKg4C,SAAShzC,WACdhF,KAAKw5C,aAAax0C,YAIpBqyC,EAAFh2C,UAAAy2B,OAAE,WACE93B,KAAKg6C,UAAYh6C,KAAK2jC,QAAU3jC,KAAK2qB,QAIvC0sB,EAAFh2C,UAAAspB,KAAE,WAAA,GAAF7qB,GAAAE,MACQA,KAAKiN,UAAajN,KAAK84C,SAAY94C,KAAK84C,QAAQt2C,SAAUxC,KAAKy3C,aAInEz3C,KAAK06C,aAAe16C,KAAKuZ,QAAQ5T,cAAc24B,wBAG/Ct+B,KAAKi4C,iBAAmB1iC,SAASolC,iBAAiB36C,KAAKuZ,QAAQ5T,eAAei1C,UAAY,KAE1F56C,KAAKy3C,YAAa,EAClBz3C,KAAK6J,YAAY+B,0BAA0B,MAC3C5L,KAAK66C,4BACL76C,KAAK86C,0BACL96C,KAAKsI,mBAAmB6B,eAGxBnK,KAAKwI,QAAQywC,SAAS/xB,eAAenlB,KAAKC,EAAAA,KAAK,IAAIC,UAAU,WACvDnC,EAAKm4C,kBAAoBn4C,EAAKm6C,WAAWjvB,YACzClrB,EAAKm6C,WAAWjvB,WAAWqB,iBAC7BvsB,EAAKm6C,WAAWjvB,WAAWqB,eAAe1e,MAAMitC,SAAc96C,EAAKm4C,iBAA3E,UAMEZ,EAAFh2C,UAAAsiC,MAAE,WACM3jC,KAAKy3C,aACPz3C,KAAKy3C,YAAa,EAClBz3C,KAAK6J,YAAY+B,0BAA0B5L,KAAK+6C,SAAW,MAAQ,OACnE/6C,KAAKsI,mBAAmB6B,eACxBnK,KAAKm4C,eAUTd,EAAFh2C,UAAAk2B,WAAE,SAAW1zB,GACL7D,KAAK84C,SACP94C,KAAKg7C,qBAAqBn3C,IAW9BwzC,EAAFh2C,UAAAm2B,iBAAE,SAAiBC,GACfz3B,KAAKk4C,UAAYzgB,GAUnB4f,EAAFh2C,UAAAq2B,kBAAE,SAAkBD,GAChBz3B,KAAKm4C,WAAa1gB,GASpB4f,EAAFh2C,UAAAs2B,iBAAE,SAAiBC,GACf53B,KAAKiN,SAAW2qB,EAChB53B,KAAKsI,mBAAmB6B,eACxBnK,KAAKw5C,aAAa11C,QAIpBH,OAAFC,eAAMyzC,EAANh2C,UAAA,iBAAE,WACE,MAAOrB,MAAKy3C,4CAId9zC,OAAFC,eAAMyzC,EAANh2C,UAAA,gBAAE,WACE,MAAOrB,MAAK+5C,SAAW/5C,KAAKy5C,gBAAgBtgC,SAAWnZ,KAAKy5C,gBAAgBtgC,SAAS,oCAIvFxV,OAAFC,eAAMyzC,EAANh2C,UAAA,oBAAE,WACE,GAAIrB,KAAKi7C,MACP,MAAO,EAGT,IAAIj7C,KAAK23C,UAAW,CACxB,GAAYuD,GAAkBl7C,KAAKy5C,gBAAgBtgC,SAAS3U,IAAI,SAAAu0C,GAAU,MAAAA,GAAOoC,WAO3E,OALIn7C,MAAK+6C,UACPG,EAAgBE,UAIXF,EAAgBG,KAAK,MAG9B,MAAOr7C,MAAKy5C,gBAAgBtgC,SAAS,GAAGgiC,2CAI1C9D,EAAFh2C,UAAA05C,OAAE,WACE,QAAO/6C,KAAK8F,MAA2B,QAApB9F,KAAK8F,KAAKjC,OAI/BwzC,EAAFh2C,UAAAoJ,eAAE,SAAetF,GACRnF,KAAKiN,WACRjN,KAAKg6C,UAAYh6C,KAAKs7C,mBAAmBn2C,GAASnF,KAAKu7C,qBAAqBp2C,KAKxEkyC,EAAVh2C,UAAAk6C,qBAAE,SAA6Bp2C,GAC/B,GAAUwF,GAAUxF,EAAMwF,QAChB6wC,EAAa7wC,IAAY6yB,EAAAA,YAAc7yB,IAAY2yB,EAAAA,UACtC3yB,IAAY0yB,EAAAA,YAAc1yB,IAAY4yB,EAAAA,YACnDke,EAAY9wC,IAAYM,EAAAA,OAASN,IAAYO,EAAAA,MAC7CwwC,EAAU17C,KAAK6J,WAGrB,IAAK4xC,IAAc/wC,EAAAA,eAAevF,KAAanF,KAAK+5C,UAAY50C,EAAMw2C,SAAWH,EAC/Er2C,EAAM2F,iBACN9K,KAAK2qB,WACA,KAAK3qB,KAAK+5C,SAAU,CAC/B,GAAY6B,GAAiB57C,KAAKmZ,QAExBxO,KAAYC,EAAAA,MAAQD,IAAYI,EAAAA,KAClCJ,IAAYC,EAAAA,KAAO8wC,EAAQ7wC,qBAAuB6wC,EAAQ1wC,oBAC1D7F,EAAM2F,kBAEN4wC,EAAQtwC,UAAUjG,GAKhBnF,KAAKw3C,gBAAkBoE,IAAmB57C,KAAKmZ,UACjDnZ,KAAKw3C,eAAehrB,SAAUxsB,KAAa,SAAem7C,aAMxD9D,EAAVh2C,UAAAi6C,mBAAE,SAA2Bn2C,GAC7B,GAAUwF,GAAUxF,EAAMwF,QAChB6wC,EAAa7wC,IAAY6yB,EAAAA,YAAc7yB,IAAY2yB,EAAAA,SACnDoe,EAAU17C,KAAK6J,WAErB,IAAIc,IAAYC,EAAAA,MAAQD,IAAYI,EAAAA,IAClC5F,EAAM2F,iBACNH,IAAYC,EAAAA,KAAO8wC,EAAQ7wC,qBAAuB6wC,EAAQ1wC,wBACrD,IAAIwwC,GAAcr2C,EAAMw2C,OAE7Bx2C,EAAM2F,iBACN9K,KAAK2jC,YACA,IAAKh5B,IAAYM,EAAAA,OAASN,IAAYO,EAAAA,QAAUwwC,EAAQG,YAC5DnxC,EAAAA,eAAevF,GAGX,GAAInF,KAAK23C,WAAahtC,IAAYmxC,EAAAA,GAAK32C,EAAM42C,QAAS,CAC3D52C,EAAM2F,gBACZ,IAAYkxC,GAAuBh8C,KAAK84C,QAAQjhC,KAAK,SAAAokC,GAAO,OAACA,EAAIhvC,WAAagvC,EAAI9iC,UAE5EnZ,MAAK84C,QAAQ32C,QAAQ,SAAA42C,GACdA,EAAO9rC,WACV+uC,EAAuBjD,EAAOsB,SAAWtB,EAAOwB,kBAG/C,CACX,GAAY2B,GAAyBR,EAAQS,eAEvCT,GAAQtwC,UAAUjG,GAEdnF,KAAK23C,WAAa6D,GAAcr2C,EAAMi3C,UAAYV,EAAQG,YAC1DH,EAAQS,kBAAoBD,GAC9BR,EAAQG,WAAWQ,4BAlBrBl3C,GAAM2F,iBACN4wC,EAAQG,WAAWQ,yBAsBvBhF,EAAFh2C,UAAA07B,SAAE,WACO/8B,KAAKiN,WACRjN,KAAK04C,UAAW,EAChB14C,KAAKw5C,aAAa11C,SAQtBuzC,EAAFh2C,UAAA27B,QAAE,WACEh9B,KAAK04C,UAAW,EAEX14C,KAAKiN,UAAajN,KAAKg6C,YAC1Bh6C,KAAKm4C,aACLn4C,KAAKsI,mBAAmB6B,eACxBnK,KAAKw5C,aAAa11C,SAOtBuzC,EAAFh2C,UAAAi7C,YAAE,WAAA,GAAFx8C,GAAAE,IACIA,MAAKi6C,WAAWsC,eAAex6C,KAAKC,EAAAA,KAAK,IAAIC,UAAU,WACrDnC,EAAK08C,gCACL18C,EAAKwI,mBAAmBygB,gBACxBjpB,EAAK28C,2BACL38C,EAAK48C,MAAM/2C,cAAcg3C,UAAY78C,EAAK43C,cAK9CL,EAAFh2C,UAAAu7C,eAAE,WACE,MAAO58C,MAAKs3C,iBAAmB,OAAOt3C,KAAKs3C,iBAAiBuF,MAAU,IAKhExF,EAAVh2C,UAAAm7C,8BAAE,WACE,IAAKhG,EAAAA,iCAAmCx2C,KAAK+5C,SAAU,CAC3D,GAAY+C,GAAiB98C,KAAK08C,MAAM/2C,cAAco3C,cAAc,uBAC1DD,KACFtG,EAAAA,gCAAkC1xC,GAA+Bg4C,EAAen1C,eAMtFhE,OAAFC,eAAMyzC,EAANh2C,UAAA,aAAE,WACE,OAAQrB,KAAKy5C,iBAAmBz5C,KAAKy5C,gBAAgBuD,2CAG/C3F,EAAVh2C,UAAAu4C,qBAAE,WAAA,GAAF95C,GAAAE,IAGIkS,SAAQC,UAAUC,KAAK,WACrBtS,EAAKk7C,qBAAqBl7C,EAAKm3C,UAAYn3C,EAAKm3C,UAAUpzC,MAAQ/D,EAAKm6B,QACvEn6B,EAAK05C,aAAa11C,UAQduzC,EAAVh2C,UAAA25C,qBAAE,SAA6Bn3C,GAA7B,GAAF/D,GAAAE,IACI,IAAIA,KAAK+5C,UAAYl2C,EAAO,CAC1B,IAAKjC,MAAMC,QAAQgC,GACjB,KAAMo5C,KAGRj9C,MAAKy5C,gBAAgBltB,QACrB1oB,EAAM1B,QAAQ,SAAC+6C,GAAsB,MAAAp9C,GAAKq9C,aAAaD,KACvDl9C,KAAKo9C,kBACA,CACLp9C,KAAKy5C,gBAAgBltB,OAC3B,IAAY8wB,GAAsBr9C,KAAKm9C,aAAat5C,EAI1Cw5C,IACFr9C,KAAK6J,YAAYiD,cAAcuwC,GAInCr9C,KAAKsI,mBAAmB6B,gBAOlBktC,EAAVh2C,UAAA87C,aAAE,SAAqBt5C,GAArB,GAAF/D,GAAAE,KACUq9C,EAAsBr9C,KAAK84C,QAAQrkC,KAAK,SAACskC,GAC7C,IAEE,MAAuB,OAAhBA,EAAOl1C,OAAiB/D,EAAK83C,aAAamB,EAAOl1C,MAAQA,GAChE,MAAOy5C,GAKP,MAJInmC,GAAAA,aAEFomC,QAAQC,KAAKF,IAER,IAQX,OAJID,IACFr9C,KAAKy5C,gBAAgBY,OAAOgD,GAGvBA,GAIDhG,EAAVh2C,UAAA84C,gBAAE,WAAA,GAAFr6C,GAAAE,IACIA,MAAK6J,YAAc,GAAI4zC,GAAAA,2BAAsCz9C,KAAK84C,SAC/D4E,gBACAC,0BACA/xC,0BAA0B5L,KAAK+6C,SAAW,MAAQ,OAClD6C,yBAAyB,aAE5B59C,KAAK6J,YAAYg0C,OAAO97C,KAAK0H,EAAAA,UAAUzJ,KAAKg4C,WAAW/1C,UAAU,WAG/DnC,EAAKyH,QACLzH,EAAK6jC,UAGP3jC,KAAK6J,YAAY0B,OAAOxJ,KAAK0H,EAAAA,UAAUzJ,KAAKg4C,WAAW/1C,UAAU,WAC3DnC,EAAK23C,YAAc33C,EAAK48C,MAC1B58C,EAAKg+C,8BACKh+C,EAAK23C,YAAe33C,EAAKi6C,WAAYj6C,EAAK+J,YAAYgyC,YAChE/7C,EAAK+J,YAAYgyC,WAAWQ,2BAM1BhF,EAAVh2C,UAAAm5C,cAAE,WAAA,GAAF16C,GAAAE,KACU+9C,EAAqBx5C,EAAAA,MAAMvE,KAAK84C,QAAQ30C,QAASnE,KAAKg4C,SAE5Dh4C,MAAK44C,uBAAuB72C,KAAK0H,EAAAA,UAAUs0C,IAAqB97C,UAAU,SAAAkD,GACxErF,EAAKk+C,UAAU74C,EAAMgxB,OAAQhxB,EAAM84C,aAE/B94C,EAAM84C,cAAgBn+C,EAAKi6C,UAAYj6C,EAAK23C,aAC9C33C,EAAK6jC,QACL7jC,EAAKyH,WAMThD,EAAAA,MAAJxE,UAAA,GAAaC,KAAK84C,QAAQt0C,IAAI,SAAAu0C,GAAU,MAAAA,GAAOlmC,iBACxC9Q,KAAK0H,EAAAA,UAAUs0C,IACf97C,UAAU,WACTnC,EAAKwI,mBAAmB6B,eACxBrK,EAAK05C,aAAa11C,SAGtB9D,KAAKk+C,iBAIC7G,EAAVh2C,UAAA28C,UAAE,SAAkBjF,EAAmBkF,GACvC,GAAUE,GAAcn+C,KAAKy5C,gBAAgB2E,WAAWrF,EAEhC,OAAhBA,EAAOl1C,OAAkB7D,KAAK23C,WAKhCoB,EAAO5/B,SAAWnZ,KAAKy5C,gBAAgBY,OAAOtB,GAAU/4C,KAAKy5C,gBAAgBc,SAASxB,GAElFkF,GACFj+C,KAAK6J,YAAYiD,cAAcisC,GAG7B/4C,KAAK+5C,WACP/5C,KAAKo9C,cAEDa,GAKFj+C,KAAKuH,WAlBTwxC,EAAOwB,WACPv6C,KAAKy5C,gBAAgBltB,QACrBvsB,KAAKq+C,kBAAkBtF,EAAOl1C,QAqB5Bs6C,IAAgBn+C,KAAKy5C,gBAAgB2E,WAAWrF,IAClD/4C,KAAKq+C,oBAGPr+C,KAAKw5C,aAAa11C,QAIZuzC,EAAVh2C,UAAA+7C,YAAE,WAAA,GAAFt9C,GAAAE,IACI,IAAIA,KAAK+5C,SAAU,CACvB,GAAYuE,GAAUt+C,KAAK84C,QAAQ9rC,SAE7BhN,MAAKy5C,gBAAgB55B,KAAK,SAACC,EAAGC,GAC5B,MAAOjgB,GAAKy+C,eAAiBz+C,EAAKy+C,eAAez+B,EAAGC,EAAGu+B,GAC1BA,EAAQ39B,QAAQb,GAAKw+B,EAAQ39B,QAAQZ,KAEpE/f,KAAKw5C,aAAa11C,SAKduzC,EAAVh2C,UAAAg9C,kBAAE,SAA0BG,GAC5B,GAAQC,GAAmB,IAGrBA,GADEz+C,KAAK+5C,SACQ/5C,KAAa,SAAiBwE,IAAI,SAAAu0C,GAAU,MAAAA,GAAOl1C,QAEpD7D,KAAKmZ,SAAYnZ,KAAa,SAAe6D,MAAQ26C,EAGrEx+C,KAAKi6B,OAASwkB,EACdz+C,KAAKolB,YAAY5f,KAAKi5C,GACtBz+C,KAAKk4C,UAAUuG,GACfz+C,KAAKo5C,gBAAgB5zC,KAAK,GAAIoxC,IAAgB52C,KAAMy+C,IACpDz+C,KAAKsI,mBAAmB6B,gBAIlBktC,EAAVh2C,UAAA68C,cAAE,WACEl+C,KAAKo4C,WAAap4C,KAAK84C,QAAQt0C,IAAI,SAAAu0C,GAAU,MAAAA,GAAOvqB,KAAI6sB,KAAK,MAOvDhE,EAAVh2C,UAAAy5C,wBAAE,WACM96C,KAAK6J,cACH7J,KAAKi7C,MACPj7C,KAAK6J,YAAYgB,qBAEjB7K,KAAK6J,YAAYiD,cAAc9M,KAAKy5C,gBAAgBtgC,SAAS,MAM3Dk+B,EAAVh2C,UAAAy8C,4BAAE,WACF,GAAUY,GAAoB1+C,KAAK6J,YAAYsyC,iBAAmB,EACxDwC,EAAaC,EAA8BF,EAAmB1+C,KAAK84C,QACrE94C,KAAK6+C,aAET7+C,MAAK08C,MAAM/2C,cAAcg3C,UAAYmC,EACnCJ,EAAoBC,EACpB3+C,KAAK++C,iBACL/+C,KAAK08C,MAAM/2C,cAAcg3C,UAn5BQ,MAy5BrCtF,EAAFh2C,UAAAkG,MAAE,WACEvH,KAAK0F,YAAYC,cAAc4B,SAIzB8vC,EAAVh2C,UAAA29C,gBAAE,SAAwBjG,GACtB,MAAO/4C,MAAK84C,QAAQx4B,OAAO,SAAC2+B,EAA4BC,EAAoB78C,GAC1E,WAAkBwR,KAAXorC,EAAwBlG,IAAWmG,EAAU78C,MAAQwR,GAAaorC,OACxEprC,KAIGwjC,EAAVh2C,UAAAw5C,0BAAE,WACF,GAAUsE,GAAan/C,KAAK++C,iBAClBK,EAAQp/C,KAAKq/C,gBACbC,EAAczxC,KAAK2B,IAAI4vC,EAAQD,EAx6BF,KAy6B7BI,EAAwBH,EAAQD,EAGhCK,EAAYD,EAAwBD,EAGtCG,EACAz/C,KAAKi7C,MAAQ,EAAIj7C,KAAKg/C,gBAAgBh/C,KAAKy5C,gBAAgBtgC,SAAS,GAExEsmC,IAAwBb,EAA8Ba,EAAsBz/C,KAAK84C,QAC7E94C,KAAK6+C,aAIb,IAAUa,GAAeJ,EAAc,CACnCt/C,MAAK03C,WAAa13C,KAAK2/C,wBAAwBF,EAAsBC,EAAcF,GACnFx/C,KAAKu4C,SAAWv4C,KAAK4/C,yBAAyBH,EAAsBC,EAAcF,GAElFx/C,KAAK6/C,4BAA4BL,IAUnCnI,EAAFh2C,UAAAs+C,wBAAE,SAAwB3wC,EAAuB0wC,EACvBF,GAC1B,GAAUL,GAAan/C,KAAK++C,iBAClBe,EAA4BX,EAAanwC,EACzC+wC,EAAmBZ,EAAa,EAMhCa,EAAwBF,EAA4BJ,EAAeK,CACzE,OAAOlyC,MAAK2B,IAAI3B,KAAK0B,IAAI,EAAGywC,GAAwBR,IAItDnI,EAAFh2C,UAAA4+C,cAAE,WAGE,MAAOjgD,MAAK6jB,eAAiB,KAAO7jB,KAAK4jB,WAAa5jB,KAAKkgD,aAI7D7I,EAAFh2C,UAAA8+C,mBAAE,WACE,MAAIngD,MAAK6jB,eACA7jB,KAAK6jB,eAKT7jB,KAAKs3C,kBAAqBt3C,KAAKs3C,iBAAiB8I,sBACnDpgD,KAAKigD,gBAIAjgD,KAAKs3C,iBAAiB+I,UAAY,KAHhC,MAOXhJ,EAAFh2C,UAAAi/C,yBAAE,WACE,MAAItgD,MAAKg6C,WAAah6C,KAAK6J,aAAe7J,KAAK6J,YAAYgyC,WAClD77C,KAAK6J,YAAYgyC,WAAWrtB,GAG9B,MAUD6oB,EAAVh2C,UAAAo7C,yBAAE,WACF,GAKQvC,GALEqG,EAAcvgD,KAAKi6C,WAAWjvB,WAAWqB,eAAeiS,wBACxDkiB,EAAexgD,KAAKuI,eAAek4C,kBACnC5zB,EAAQ7sB,KAAK+6C,SACb2F,EAAe1gD,KAAK+5C,SAAWvD,EAAAA,gCA3/BH,GA4/BG1xC,EAIrC,IAAI9E,KAAK+5C,SACPG,EAAU1D,EAAAA,oCACL,CACX,GAAUr9B,GAAWnZ,KAAKy5C,gBAAgBtgC,SAAS,IAAMnZ,KAAK84C,QAAQ6H,KAChEzG,GAAU/gC,GAAYA,EAASynC,MAjgCQ97C,GAHP,GAwgC7B+nB,IACHqtB,IAAY,EAIlB,IAAU2G,GAAe,GAAKN,EAAYz9B,KAAOo3B,GAAWrtB,EAAQ6zB,EAAe,IACzEI,EAAgBP,EAAYvzB,MAAQktB,EAAUsG,EAAaz9B,OACxC8J,EAAQ,EAAI6zB,EAGjCG,GAAe,EACjB3G,GAAW2G,EA3/B4B,EA4/B9BC,EAAgB,IACzB5G,GAAW4G,EA7/B4B,GAmgCzC9gD,KAAKi6C,WAAWC,QAAUrsC,KAAKC,MAAMosC,GACrCl6C,KAAKi6C,WAAWjvB,WAAW2b,kBAQrB0Q,EAAVh2C,UAAAu+C,yBAAE,SAAiC5wC,EAAuB0wC,EACxBF,GAClC,GAGQuB,GAHE5B,EAAan/C,KAAK++C,iBAClBiC,GAA0B7B,EAAan/C,KAAK06C,aAAatnC,QAAU,EACnE6tC,EAAsBpzC,KAAK0/B,MA3iCE,IA2iC8B4R,EAIjE,IAAIn/C,KAAKy4C,wBACP,MAAO,EAGT,IAAwB,IAApBz4C,KAAK03C,WACPqJ,EAA2B/xC,EAAgBmwC,MACtC,IAAIn/C,KAAK03C,aAAe8H,EAAW,CAC9C,GAAY0B,GAAsBlhD,KAAKq/C,gBAAkB4B,EAC7CE,EAAuBnyC,EAAgBkyC,EAIzCE,EACAjC,GAAcn/C,KAAKq/C,gBAAkBF,EA5jCR,KA4jCgDA,CAMjF4B,GAA2BI,EAAuBhC,EAAaiC,MAK/DL,GAA2BrB,EAAeP,EAAa,CAMzD,OAAOtxC,MAAKC,OAAkC,EAA5BizC,EAAgCC,IAS5C3J,EAAVh2C,UAAAw+C,4BAAE,SAAoCL,GACtC,GAAUL,GAAan/C,KAAK++C,iBAClByB,EAAexgD,KAAKuI,eAAek4C,kBAEnCY,EAAoBrhD,KAAK06C,aAAaxtB,IA/jCH,EAgkCnCo0B,EACFd,EAAaptC,OAASpT,KAAK06C,aAAavtB,OAjkCH,EAmkCnCo0B,EAAiB1zC,KAAK2zC,IAAIxhD,KAAKu4C,UAC/BkJ,EACF5zC,KAAK2B,IAAIxP,KAAKq/C,gBAAkBF,EAhmCD,KAimC7BuC,EAAoBD,EAAmBF,EAAiBvhD,KAAK06C,aAAatnC,MAE5EsuC,GAAoBJ,EACtBthD,KAAK2hD,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3BrhD,KAAK4hD,iBAAiBL,EAAgBF,EAAmB7B,GAExDx/C,KAAKq4C,iBAAmBr4C,KAAK6hD,2BAKzBxK,EAAVh2C,UAAAsgD,eAAE,SAAuBD,EAA2BJ,GAEpD,GAAUQ,GAAwBj0C,KAAKC,MAAM4zC,EAAoBJ,EAI7DthD,MAAK03C,YAAcoK,EACnB9hD,KAAKu4C,UAAYuJ,EACjB9hD,KAAKq4C,iBAAmBr4C,KAAK6hD,0BAKzB7hD,KAAK03C,YAAc,IACrB13C,KAAK03C,WAAa,EAClB13C,KAAKu4C,SAAW,EAChBv4C,KAAKq4C,iBAAmB,mBAKpBhB,EAAVh2C,UAAAugD,iBAAE,SAAyBL,EAAwBF,EACxB7B,GAE3B,GAAUuC,GAAwBl0C,KAAKC,MAAMyzC,EAAiBF,EAW1D,IAPArhD,KAAK03C,YAAcqK,EACnB/hD,KAAKu4C,UAAYwJ,EACjB/hD,KAAKq4C,iBAAmBr4C,KAAK6hD,0BAKzB7hD,KAAK03C,YAAc8H,EAIrB,MAHAx/C,MAAK03C,WAAa8H,EAClBx/C,KAAKu4C,SAAW,OAChBv4C,KAAKq4C,iBAAmB,gBAMpBhB,EAAVh2C,UAAAwgD,wBAAE,WACF,GAAU1C,GAAan/C,KAAK++C,iBAClBiC,GAA0B7B,EAAan/C,KAAK06C,aAAatnC,QAAU,CAEzE,OAAO,QADSvF,KAAK2zC,IAAIxhD,KAAKu4C,UAAYyI,EAAyB7B,EAAa,GACpF,UAIU9H,EAAVh2C,UAAAg+C,cAAE,WACE,MAAOr/C,MAAK84C,QAAQt2C,OAASxC,KAAK6+C,aAAar8C,QAIzC60C,EAAVh2C,UAAA09C,eAAE,WACE,MA9pCiC,GA8pC1B/+C,KAAKi4C,kBAOdZ,EAAFh2C,UAAA2gD,kBAAE,SAAkBC,GAChBjiD,KAAKkiD,iBAAmBD,EAAI5G,KAAK,MAOnChE,EAAFh2C,UAAA8gD,iBAAE,WACEniD,KAAKuH,QACLvH,KAAK2qB,QAOPhnB,OAAFC,eAAMyzC,EAANh2C,UAAA,wBAAE,WACE,MAAOrB,MAAKy3C,aAAez3C,KAAKi7C,sDA9mCpC19C,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,aACEO,SAAU,YACVC,SAAU,27CACVI,QAAF,qkEACEuI,QAAF,WAAA,gBAAA,YACEtI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACET,MACFE,KAAA,UACMgjD,YAAN,KACIppB,kBAAJ,WACIqpB,oBAAJ,kBACIC,yBAAJ,uBACIC,uBAAJ,sBACIz6C,uBAAwB,sBACxB06C,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/BC,2BAA4B,QAC5B7jD,MAAJ,aACIs/B,YAAJ,yBACIrF,UAAJ,aACImF,SAAJ,aAEAj4B,YACA8vC,GAAAC,gBAEA33C,YACAvB,QAAA8lD,GAAA5lD,YAAAg6C,IACAl6C,QAAA+lD,GAAA7lD,YAAAg6C,8FAnMA95C,KAAQuS,EAAAA,SAKRvS,KAAEqd,KAYFrd,KAAEC,EAAAA,aAsBFD,KAAEqS,EAAAA,eAAFhS,aAAAL,KAAAsS,EAAAA,aA5BAtS,KAAE4lD,EAAAA,OAAFvlD,aAAAL,KAAAsS,EAAAA,aA3BAtS,KAAQ6lD,EAAAA,mBAARxlD,aAAAL,KAAAsS,EAAAA,aA6CAtS,KAA6D8lD,GAA7DzlD,aA4aKL,KA5aLsS,EAAAA,aAAAtS,KAA8B+lD,EAAAA,UAA9B1lD,aAAAL,KAAAs4C,EAAAA,OAAAt4C,KAAAsS,EAAAA,aAsBAtS,KAAQI,OAARC,aAAAL,KAAAM,EAAAA,UAAAC,MAAA,gBAtBAP,SAAkDsW,GAAlDjW,aAAAL,KA+aKuW,EAAAA,OA/aLhW,MAAA24C,QAgbAl5C,KAAAgwB,EAAAA,iBA9dA8pB,EAAAz3C,wGAuUAq6C,aAAA18C,KAAAuJ,EAAAA,UAAAhJ,MAAAylD,EAAAA,uBAGAzK,UAAAv7C,KAAAW,EAAAA,gBAAAJ,MAAA0lD,IAAAjiB,aAAA,MAGAsd,eAAAthD,KAAAW,EAAAA,gBAAAJ,MAAA2lD,MAGAv6B,aAAA3rB,KAAAS,EAAAA,QAGA0lD,gBAAAnmD,KAAAo2B,EAAAA,aAAkB71B,MAAlBs5C,MAGA8I,cAAA3iD,KAAAS,EAAAA,QAGAq7B,WAAA97B,KAAAS,EAAAA,QAGA+7C,WAAAx8C,KAAAS,EAAAA,QAQA2lD,yBAAApmD,KAAAS,EAAAA,QAQA4lD,cAAArmD,KAAAS,EAAAA,QAWA6F,QAAAtG,KAAAS,EAAAA,QAWA4lB,YAAArmB,KAAAS,EAAAA,MAAQF,MAAR,gBAcA+lB,iBAAAtmB,KAAAS,EAAAA,MAAAF,MAAA,qBAWA+lD,oBAAAtmD,KAAAS,EAAAA,QAGAugD,iBAAAhhD,KAAGS,EAAAA,QAGHwwB,KAAAjxB,KAAAS,EAAAA,QAMAolC,eAAA7lC,KAAAoJ,EAAAA,SAGAk+B,gBAAQtnC,KAARoJ,EAAAA,OAAA7I,MAAA,YAoBAinC,gBAAAxnC,KAAAoJ,EAAAA,OAAA7I,MAAA,YAGAs7C,kBAAA77C,KAAAoJ,EAAAA,SAIAye,cAAA7nB,KAAAoJ,EAAAA,UAYA0wC,O+DzcAtJ,GAAA,WAAA,QAAAA,MAW8B,sBAX9BxwC,KAACkD,EAAAA,SAAD3C,OACE4C,SACEE,EAAAA,aACA4oB,EAAAA,cACAs6B,GACAjjD,IAEFC,SAAUijD,GAAoB1M,GAAWD,GAAkB0M,GAAiBjjD,IAC5EE,cAAes2C,GAAWD,IAC1B14C,WAAYg4C,QAEd3I,KCNa/C,IAIXC,aAAc1xB,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyB7L,EAAAA,OAAOqa,QAAS,EAAGpa,UAAW,cAC7D4L,EAAAA,MAAM,UAAW7L,EAAAA,OAAOC,UAAW,cACnC8L,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,mCAAoCqW,EAAAA,WACrEriB,EAAAA,OAAOqa,QAAS,EAAGpa,UAAW,WAAYgwB,OAAQ,IAClDjwB,EAAAA,OAAOqa,QAAS,GAAKpa,UAAW,cAAegwB,OAAQ,KACvDjwB,EAAAA,OAAOqa,QAAS,EAAGpa,UAAW,WAAYgwB,OAAQ,QAEpDlkB,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,mCAAoChM,EAAAA,OAAOqa,QAAS,S/DiB7Eg8B,GAAqB,GAcrBzZ,GACT,GAAIp6B,GAAAA,eAAqC,+BAQhCi7B,IACXjuC,QAASotC,GACTha,MAAOjD,EAAAA,SACPkD,WAAYyzB,IAYDzZ,GACT,GAAIr6B,GAAAA,eAAyC,+BAC3CoS,WAAY,OACZC,QAAS0hC,KAkBftd,GAAA,WA0FE,QAAFA,GACY/c,EACAnkB,EACAkjC,EACAzlB,EACA3a,EACRgF,EACQs5B,EACA3xB,EAC6B+zB,EACjBpjC,EAEVsiC,EACyB+b,GAbrC,GAAFrkD,GAAAE,IACYA,MAAZ6pB,SAAYA,EACA7pB,KAAZ0F,YAAYA,EACA1F,KAAZ4oC,kBAAYA,EACA5oC,KAAZmjB,kBAAYA,EACAnjB,KAAZwI,QAAYA,EAEAxI,KAAZ8mC,eAAYA,EACA9mC,KAAZmV,cAAYA,EAEYnV,KAAxB8F,KAAwBA,EAEV9F,KAAdooC,gBAAcA,EAxFJpoC,KAAVmG,UAAuC,QAC7BnG,KAAV2gC,WAA+B,EAoCC3gC,KAAhCynC,UAA4CznC,KAAKooC,gBAAgBX,UAGjCznC,KAAhCgoC,UAA4ChoC,KAAKooC,gBAAgBJ,UAEvDhoC,KAAV6mC,SAAqB,GA6BX7mC,KAAVqnC,iBAA6B,GAAIrZ,KAGdhuB,KAAnB4I,WAAgC,GAAIC,GAAAA,QAiBhC7I,KAAKmpC,gBAAkBD,CAC3B,IAAU5/B,GAAuB5D,EAAYC,cACnCy+C,EAAe96C,EAAa,MAC5B+6C,EAAgC,mBAAXC,SAA0B,OAAgBC,QAAUJ,CAI1E32C,GAASg3C,KAAQh3C,EAASi3C,QAInBJ,GAGVrkD,KAAKqnC,iBAAiBzY,IAAI,aAAc,WAAM,MAAA9uB,GAAK8U,SANnD5U,KAAKqnC,iBACFzY,IAAI,aAAc,WAAM,MAAA9uB,GAAK8U,SAC7Bga,IAAI,aAAc,WAAM,MAAA9uB,GAAK+U,SAOlC7U,KAAKqnC,iBAAiBllC,QAAQ,SAACmlC,EAAUniC,GAAU,MAAAmE,GAAQo7C,iBAAiBv/C,EAAOmiC,KAE1D,UAArBh+B,EAAQq7C,UAA6C,aAArBr7C,EAAQq7C,WAM1CP,EAAaQ,iBAAmBR,EAAaS,WAAaT,EAAaU,aAAe,IAMpFx7C,EAAQy7C,WAA6C,SAAhCX,EAAaY,iBACpCZ,EAAaY,eAAiB,IAGhC7vC,EAAcK,QAAQ9P,GAAa3D,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aAAa3G,UAAU,SAAAoE,GAEvEA,EAEiB,aAAXA,GACTmC,EAAQmE,IAAI,WAAM,MAAA7M,GAAK8U,SAFvBpM,EAAQmE,IAAI,WAAM,MAAA7M,GAAK+U,KAAK,OAM5BuzB,GAAmBA,EAAgBriC,WACrC/F,KAAK+F,SAAWqiC,EAAgBriC,UA4PtC,MA9XEpC,QAAFC,eACMgjC,EADNvlC,UAAA;yDAAE,WACkC,MAAOrB,MAAKmG,eAC9C,SAAatC,GACPA,IAAU7D,KAAKmG,YACjBnG,KAAKmG,UAAYtC,EAEb7D,KAAK4lB,cACP5lB,KAAKymC,kBAEDzmC,KAAK0mC,kBACP1mC,KAAqB,iBAAE4U,KAAK,GAG9B5U,KAAK4lB,YAAY+gB,oDAMvBhjC,OAAFC,eACMgjC,EADNvlC,UAAA,gBAAE,WAC0B,MAAOrB,MAAK2gC,eACtC,SAAa98B,GACX7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,GAGnC7D,KAAK2gC,WACP3gC,KAAK6U,KAAK,oCAadlR,OAAFC,eACMgjC,EADNvlC,UAAA,eAAE,WACgB,MAAOrB,MAAK6mC,cAC5B,SAAYhjC,GACV7D,KAAK8mC,eAAeC,kBAAkB/mC,KAAK0F,YAAYC,cAAe3F,KAAK6mC,UAG3E7mC,KAAK6mC,SAAoB,MAAThjC,GAAgB,GAAGA,GAAQiU,OAAS,IAE/C9X,KAAK6mC,UAAY7mC,KAAKgnC,oBACzBhnC,KAAK6U,KAAK,IAEV7U,KAAKinC,wBACLjnC,KAAK8mC,eAAeI,SAASlnC,KAAK0F,YAAYC,cAAe3F,KAAK4qB,2CAKtEjnB,OAAFC,eACMgjC,EADNvlC,UAAA,oBAAE,WACqB,MAAOrB,MAAKmnC,mBACjC,SAAiBtjC,GACf7D,KAAKmnC,cAAgBtjC,EACjB7D,KAAK0mC,kBACP1mC,KAAKonC,iBAAiBpnC,KAAKmnC,gDA4E/BP,EAAFvlC,UAAAiL,YAAE,WAAA,GAAFxM,GAAAE,IACQA,MAAK4lB,cACP5lB,KAAK4lB,YAAYmB,UACjB/mB,KAAK0mC,iBAAmB,MAI1B1mC,KAAKqnC,iBAAiBllC,QAAQ,SAACmlC,EAAUniC,GACvCrF,EAAK4F,YAAYC,cAAc4hC,oBAAoBpiC,EAAOmiC,KAE5DtnC,KAAKqnC,iBAAiB9a,QAEtBvsB,KAAK4I,WAAW9E,OAChB9D,KAAK4I,WAAW5D,WAEhBhF,KAAK8mC,eAAeC,kBAAkB/mC,KAAK0F,YAAYC,cAAe3F,KAAK4qB,SAC3E5qB,KAAKmV,cAAcU,eAAe7V,KAAK0F,cAIzCkhC,EAAFvlC,UAAAuT,KAAE,SAAK4yB,GAAL,GAAF1nC,GAAAE,IACI,QADJ,KAAAwnC,IAAOA,EAAgBxnC,KAAKynC,YACpBznC,KAAKiN,UAAajN,KAAK4qB,WAAY5qB,KAAKgnC,qBACzChnC,KAAqB,iBAAE0nC,gBAAmB1nC,KAAqB,iBAAE2nC,gBADpE,CAKJ,GAAU3c,GAAahrB,KAAK2rB,gBAExB3rB,MAAK4nC,UACL5nC,KAAK6nC,QAAU7nC,KAAK6nC,SAAW,GAAIvc,GAAAA,gBAAgBwc,GAAkB9nC,KAAKmjB,mBAC1EnjB,KAAK0mC,iBAAmB1b,EAAW1G,OAAOtkB,KAAK6nC,SAASrc,SACxDxrB,KAAK0mC,iBAAiBqB,cACnBhmC,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aACpB3G,UAAU,WAAM,MAAAnC,GAAK8nC,YACxB5nC,KAAKonC,iBAAiBpnC,KAAKmnC,eAC3BnnC,KAAKinC,wBACLjnC,KAAqB,iBAAE4U,KAAK4yB,KAI9BZ,EAAFvlC,UAAAwT,KAAE,SAAK2yB,OAAP,KAAAA,IAAOA,EAAgBxnC,KAAKgoC,WACpBhoC,KAAK0mC,kBACP1mC,KAAK0mC,iBAAiB7xB,KAAK2yB,IAK/BZ,EAAFvlC,UAAAy2B,OAAE,WACE93B,KAAKgnC,oBAAsBhnC,KAAK6U,OAAS7U,KAAK4U,QAIhDgyB,EAAFvlC,UAAA2lC,kBAAE,WACE,QAAShnC,KAAK0mC,kBAAoB1mC,KAAK0mC,iBAAiBuB,aAI1DrB,EAAFvlC,UAAAoJ,eAAE,SAAey9B,GACTloC,KAAKgnC,qBAAuBkB,EAAEv9B,UAAY84B,EAAAA,SAC5CyE,EAAE/Q,kBACFn3B,KAAK6U,KAAK,KAKd+xB,EAAFvlC,UAAA8mC,gBAAE,WACEnoC,KAAK6U,KAAK7U,KAAKooC,gBAAgBC,oBAIzBzB,EAAVvlC,UAAAsqB,eAAE,WAAA,GAAF7rB,GAAAE,IACI,IAAIA,KAAK4lB,YACP,MAAO5lB,MAAK4lB,WAIlB,IAAU0iB,GAAWtoC,KAAK6pB,SAAS9jB,WAC5BwiC,oBAAoBvoC,KAAK0F,aACzB8iC,sBAAsB,gBACtBC,wBAAuB,GACvBC,mBAAmB,GAEhBC,EAAsB3oC,KAAK4oC,kBAC9BC,4BAA4B7oC,KAAK0F,YA2BpC,OAzBA4iC,GAASQ,yBAAyBH,GAElCL,EAASS,gBAAgBhnC,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aAAa3G,UAAU,SAAAsJ,GAC9DzL,EAAK4mC,kBACHn7B,EAAOy9B,yBAAyBC,kBAAoBnpC,EAAK4mC,iBAAiBuB,aAG5EnoC,EAAK0I,QAAQmE,IAAI,WAAM,MAAA7M,GAAK+U,KAAK,OAKvC7U,KAAK4lB,YAAc5lB,KAAK6pB,SAASuD,QAC/Bjf,UAAWnO,KAAK8F,KAChB6mB,iBAAkB2b,EAClBpf,WAzT6B,oBA0T7BggB,eAAgBlpC,KAAKmpC,oBAGvBnpC,KAAKymC,kBAELzmC,KAAK4lB,YAAYuG,cACdpqB,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aACpB3G,UAAU,WAAM,MAAAnC,GAAK8nC,YAEjB5nC,KAAK4lB,aAINghB,EAAVvlC,UAAAumC,QAAE,WACM5nC,KAAK4lB,aAAe5lB,KAAK4lB,YAAYvB,eACvCrkB,KAAK4lB,YAAYrB,SAGnBvkB,KAAK0mC,iBAAmB,MAIlBE,EAAVvlC,UAAAolC,gBAAE,WACF,GAAU1gC,GACF/F,KAAgB,YAAEopC,YAA4B,iBAC5C/iC,EAASrG,KAAKqpC,aACdC,EAAUtpC,KAAKupC,qBAErBxjC,GAASyjC,eACb1e,MAAUzkB,EAAOojC,KAASH,EAAQG,MAClC3e,MAAUzkB,EAAOqjC,SAAaJ,EAAQI,aAQpC9C,EAAFvlC,UAAAgoC,WAAE,WACF,GAEQM,GAFEC,GAAS5pC,KAAK8F,MAA2B,OAAnB9F,KAAK8F,KAAKjC,MAChCkC,EAAW/F,KAAK+F,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzB4jC,GAAkBE,QAAS,SAAUC,QAAqB,SAAZ/jC,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsB6jC,GACV,SAAZ7jC,IAAwB6jC,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZ/jC,GACa,SAAZA,GAAuB6jC,GACX,QAAZ7jC,IAAuB6jC,GAGxB,KAAMG,IAAkChkC,EAFxC4jC,IAAkBE,QAAS,MAAOC,QAAS,UAKvC,GAAA16B,GAAVpP,KAAAgqC,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEL,KAAME,EACND,UAAWG,QAJjBz6B,EAAAiM,EAI6ByuB,QAJ7B16B,EAAAkM,KASEsrB,EAAFvlC,UAAAkoC,oBAAE,WACF,GAEQU,GAFEL,GAAS5pC,KAAK8F,MAA2B,OAAnB9F,KAAK8F,KAAKjC,MAChCkC,EAAW/F,KAAK+F,QAGtB,IAAgB,SAAZA,EACFkkC,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZpkC,EACTkkC,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZpkC,GACa,QAAZA,GAAsB6jC,GACV,SAAZ7jC,IAAwB6jC,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZpkC,GACa,SAAZA,GAAuB6jC,GACX,QAAZ7jC,IAAuB6jC,GAGxB,KAAMG,IAAkChkC,EAFxCkkC,IAAmBC,SAAU,QAASC,SAAU,UAK5C,GAAA/6B,GAAVpP,KAAAgqC,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEV,KAAMQ,EACNP,UAAWQ,SAJjB96B,EAAAiM,EAI8B8uB,SAJ9B/6B,EAAAkM,KASUsrB,EAAVvlC,UAAA4lC,sBAAE,WAAA,GAAFnnC,GAAAE,IAGQA,MAAK0mC,mBACP1mC,KAAK0mC,iBAAiB9b,QAAU5qB,KAAK4qB,QACrC5qB,KAAK0mC,iBAAiBtF,gBAEtBphC,KAAKwI,QAAQwgB,iBAAiB9B,eAAenlB,KAC3CC,EAAAA,KAAK,GACLyH,EAAAA,UAAUzJ,KAAK4I,aACf3G,UAAU,WACNnC,EAAK4mC,kBACP5mC,EAAgB,YAAE6mC,qBAOlBC,EAAVvlC,UAAA+lC,iBAAE,SAAyBgD,GACnBpqC,KAAK0mC,mBACP1mC,KAAK0mC,iBAAiB0D,aAAeA,EACrCpqC,KAAK0mC,iBAAiBtF,kBAKlBwF,EAAVvlC,UAAA2oC,gBAAE,SAAwB3uB,EAA4BC,GAelD,MAdsB,UAAlBtb,KAAK+F,UAA0C,UAAlB/F,KAAK+F,SAC1B,QAANuV,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAAND,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeC,EAAfA,mBAhZA/d,KAACiB,EAAAA,UAADV,OACEW,SAAU,eACVO,SAAU,aACVE,MACE8yB,cAAe,SACfyM,YAAa,yBACb4L,aAAc,6DAjGlB9sC,KAAE+vB,EAAAA,UAeF/vB,KAAEC,EAAAA,aATFD,KAAQ42B,EAAAA,mBAgBR52B,KAAE8a,EAAAA,mBAHF9a,KAAEuS,EAAAA,SAZFvS,KAAQwS,EAAAA,WAjBRxS,KAAQ+sC,EAAAA,gBAAR/sC,KAAuB2Y,EAAAA,eAwMvB3Y,SAAAsW,GAAAjW,aAAAL,KAAKuW,EAAAA,OAALhW,MAAYysC,QAvMZhtC,KAAQqS,EAAAA,eAARhS,aAAAL,KAwMKsS,EAAAA,aACLtS,SAAAsW,GAAAjW,aAAAL,KAAKsS,EAAAA,WAALtS,KAAiBuW,EAAAA,OAAjBhW,MAAwB0sC,QAExBjtC,SAAAsW,GAAAjW,aAAAL,KAAKsS,EAAAA,WAALtS,KAAiBuW,EAAAA,OAAjBhW,MAAwB2sC,EAAAA,sCAnFxB1kC,WAAAxI,KAAGS,EAAAA,MAAHF,MAAS,wBAmBTmP,WAAA1P,KAAGS,EAAAA,MAAHF,MAAS,wBAYT2pC,YAAAlqC,KAAGS,EAAAA,MAAHF,MAAS,yBAGTkqC,YAAAzqC,KAAGS,EAAAA,MAAHF,MAAS,yBAKT8sB,UAAArtB,KAAGS,EAAAA,MAAHF,MAAS,gBAiBTssC,eAAA7sC,KAAGS,EAAAA,MAAHF,MAAS,sBAsUT8oC,KAQAkB,GAAA,WAyCE,QAAFA,GACYx/B,EACA0hB,GADAhqB,KAAZsI,mBAAYA,EACAtI,KAAZgqB,oBAAYA,EAbVhqB,KAAF0qC,YAAmC,UAGzB1qC,KAAV2qC,qBAAyC,EAGtB3qC,KAAnB4qC,QAA2C,GAAI/hC,GAAAA,QAG7C7I,KAAF6qC,WAA4C7qC,KAAKgqB,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAliBzF,MA4iBE4b,GAAFzmC,UAAAuT,KAAE,SAAK4yB,GAAL,GAAF1nC,GAAAE,IAEQA,MAAK2nC,iBACPphB,aAAavmB,KAAK2nC,gBAClB3nC,KAAK2nC,eAAiB,MAIxB3nC,KAAK2qC,qBAAsB,EAC3B3qC,KAAK0nC,eAAiB7gB,WAAW,WAC/B/mB,EAAK4qC,YAAc,UACnB5qC,EAAK4nC,eAAiB,KAItB5nC,EAAKshC,iBACJoG,IAOLM,EAAFzmC,UAAAwT,KAAE,SAAK2yB,GAAL,GAAF1nC,GAAAE,IAEQA,MAAK0nC,iBACPnhB,aAAavmB,KAAK0nC,gBAClB1nC,KAAK0nC,eAAiB,MAGxB1nC,KAAK2nC,eAAiB9gB,WAAW,WAC/B/mB,EAAK4qC,YAAc,SACnB5qC,EAAK6nC,eAAiB,KAItB7nC,EAAKshC,iBACJoG,IAILM,EAAFzmC,UAAA0mC,YAAE,WACE,MAAO/nC,MAAK4qC,QAAQ1jB,gBAItB4gB,EAAFzmC,UAAA4mC,UAAE,WACE,MAA4B,YAArBjoC,KAAK0qC,aAGd5C,EAAFzmC,UAAAiL,YAAE,WACEtM,KAAK4qC,QAAQ5lC,YAGf8iC,EAAFzmC,UAAAypC,gBAAE,WACE9qC,KAAK2qC,qBAAsB,GAG7B7C,EAAFzmC,UAAA8Z,eAAE,SAAehW,GACjB,GAAUG,GAAUH,EAAa,OAEb,YAAZG,GAAyBtF,KAAKioC,aAChCjoC,KAAK4qC,QAAQ9mC,OAGC,YAAZwB,GAAqC,WAAZA,IAC3BtF,KAAK2qC,qBAAsB,IAS/B7C,EAAFzmC,UAAA0pC,uBAAE,WACM/qC,KAAK2qC,qBACP3qC,KAAK6U,KAAK,IASdizB,EAAFzmC,UAAA+/B,cAAE,WACEphC,KAAKsI,mBAAmB6B,+BAxI5B5M,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,wBACEQ,SAAU,mOACVI,QAAF,6UACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE2G,YAAa0kC,GAAfC,cACE/rC,2GAKEgsC,cAAJ,wGAtgBApD,KqDQAqD,GAAA,WAAA,QAAAA,MAe+B,sBAf/B5tC,KAACkD,EAAAA,SAAD3C,OACE4C,SACE6V,EAAAA,WACA3V,EAAAA,aACA4oB,EAAAA,cACA3oB,IAEFC,SAAU8lC,GAAYkB,GAAkBjnC,IACxCE,cAAe6lC,GAAYkB,IAC3Bre,iBAAkBqe,IAClBppC,WACE0sC,IACCjuC,QAASooB,EAAAA,sBAAuBC,SAAUC,SAG/C0lB,KCnBAE,GAAA,WAAA,QAAAA,KAMWrrC,KAAXmE,QAAoC,GAAI0E,GAAAA,QAGtC7I,KAAFsrC,kBAA8B,kBAG5BtrC,KAAFurC,cAA0B,YAGxBvrC,KAAFwrC,kBAA8B,gBAG5BxrC,KAAFyrC,eAA2B,aAGzBzrC,KAAF0rC,cAA0B,YAGxB1rC,KAAF2rC,cAAkB,SAACxqB,EAAca,EAAkBxf,GAC/C,GAAc,GAAVA,GAA2B,GAAZwf,EAAiB,MAAO,QAAQxf,CAEnDA,GAASqL,KAAK0B,IAAI/M,EAAQ,EAE9B,IAAUsf,GAAaX,EAAOa,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAatf,EAC1BqL,KAAK2B,IAAIsS,EAAaE,EAAUxf,GAChCsf,EAAaE,GAErB,OAAiDxf,GApDjD,sBAgBAjF,KAAC8vB,EAAAA,WAADvvB,OAAaykB,WAAY,8GAhBzB8oB,KA8DaO,IAEXzuC,QAASkuC,GACT9a,OAAQ,GAAI1gB,GAAAA,SAAY,GAAI6d,GAAAA,SAAY2d,KACxC7a,WAAYqb,kBC3Bd,QAAAC,MAeA,MAAAA,oBAIA,QAAAC,MAA+B,MAA/BA,MACaC,GACT5kC,EAAcymB,EAAiBke,KAOnCE,GAAA,SAAA3tC,GAgFE,QAAF2tC,GAAqBpb,EACCvoB,GADpB,GAAFxI,GAEIxB,EAFJgF,KAAAtD,OAAAA,WAAqBF,GAArB+wB,MAAqBA,EACC/wB,EAAtBwI,mBAAsBA,EArDZxI,EAAVosC,WAAuB,EASbpsC,EAAVqsC,QAAoB,EAkBVrsC,EAAVssC,oBAQUtsC,EAAVusC,eAA0B,EAShBvsC,EAAVwsC,uBAAkC,EAGbxsC,EAArBqhB,KAAqD,GAAI/X,GAAAA,aAQrDtJ,EAAKysC,aAAe1b,EAAM1sB,QAAQlC,UAAU,WAAM,MAAAnC,GAAKwI,mBAAmB6B,mBAR9E,MA9DkC5L,GAAlC0tC,EAAA3tC,GASEqF,OAAFC,eACMqoC,EADN5qC,UAAA,iBAAE,WAC0B,MAAOrB,MAAKksC,gBACtC,SAAcroC,GACZ7D,KAAKksC,WAAar+B,KAAK0B,IAAI3F,EAAAA,qBAAqB/F,GAAQ,GACxD7D,KAAKsI,mBAAmB6B,gDAK1BxG,OAAFC,eACMqoC,EADN5qC,UAAA,cAAE,WACuB,MAAOrB,MAAKmsC,aACnC,SAAWtoC,GACT7D,KAAKmsC,QAAUviC,EAAAA,qBAAqB/F,GACpC7D,KAAKsI,mBAAmB6B,gDAK1BxG,OAAFC,eACMqoC,EADN5qC,UAAA,gBAAE,WACyB,MAAOrB,MAAKwsC,eACrC,SAAa3oC,GACX7D,KAAKwsC,UAAY3+B,KAAK0B,IAAI3F,EAAAA,qBAAqB/F,GAAQ,GACvD7D,KAAKysC,mEAKP9oC,OAAFC,eACMqoC,EADN5qC,UAAA,uBAAE,WACkC,MAAOrB,MAAKosC,sBAC9C,SAAoBvoC,GAClB7D,KAAKosC,kBAAoBvoC,OAAaW,IAAI,SAAAkoC,GAAK,MAAA9iC,GAAAA,qBAAqB8iC,KACpE1sC,KAAKysC,mEAKP9oC,OAAFC,eACMqoC,EADN5qC,UAAA,oBAAE,WAC8B,MAAOrB,MAAKqsC,mBAC1C,SAAiBxoC,GACf7D,KAAKqsC,cAAgB/6B,EAAAA,sBAAsBzN,oCAM7CF,OAAFC,eACMqoC,EADN5qC,UAAA,4BAAE,WACsC,MAAOrB,MAAKssC,2BAClD,SAAyBzoC,GACvB7D,KAAKssC,sBAAwBh7B,EAAAA,sBAAsBzN,oCAgBrDooC,EAAF5qC,UAAAmiB,SAAE,WACExjB,KAAK2sC,cAAe,EACpB3sC,KAAKysC,kCACLzsC,KAAKovB,oBAGP6c,EAAF5qC,UAAAiL,YAAE,WACEtM,KAAKusC,aAAa95B,eAIpBw5B,EAAF5qC,UAAAurC,SAAE,WACE,GAAK5sC,KAAK6sC,cAAV,CAEJ,GAAUC,GAAoB9sC,KAAK+hB,SAC/B/hB,MAAK+hB,YACL/hB,KAAK+sC,eAAeD,KAItBb,EAAF5qC,UAAA2rC,aAAE,WACE,GAAKhtC,KAAKitC,kBAAV,CAEJ,GAAUH,GAAoB9sC,KAAK+hB,SAC/B/hB,MAAK+hB,YACL/hB,KAAK+sC,eAAeD,KAItBb,EAAF5qC,UAAA6rC,UAAE,WAEE,GAAKltC,KAAKitC,kBAAV,CAEJ,GAAUH,GAAoB9sC,KAAK+hB,SAC/B/hB,MAAK+hB,UAAY,EACjB/hB,KAAK+sC,eAAeD,KAItBb,EAAF5qC,UAAA8rC,SAAE,WAEE,GAAKntC,KAAK6sC,cAAV,CAEJ,GAAUC,GAAoB9sC,KAAK+hB,SAC/B/hB,MAAK+hB,UAAY/hB,KAAKotC,mBAAqB,EAC3CptC,KAAK+sC,eAAeD,KAItBb,EAAF5qC,UAAA4rC,gBAAE,WACE,MAAOjtC,MAAK+hB,WAAa,GAAsB,GAAjB/hB,KAAKgiB,UAIrCiqB,EAAF5qC,UAAAwrC,YAAE,WACF,GAAUQ,GAAertC,KAAKotC,mBAAqB,CAC/C,OAAOptC,MAAK+hB,UAAYsrB,GAAiC,GAAjBrtC,KAAKgiB,UAI/CiqB,EAAF5qC,UAAA+rC,iBAAE,WACE,MAAKptC,MAAKgiB,SAIHnU,KAAKuU,KAAKpiB,KAAKwC,OAASxC,KAAKgiB,UAH3B,GAeXiqB,EAAF5qC,UAAAisC,gBAAE,SAAgBtrB,GAGlB,GAAUF,GAAa9hB,KAAK+hB,UAAY/hB,KAAKgiB,SACnC8qB,EAAoB9sC,KAAK+hB,SAE/B/hB,MAAK+hB,UAAYlU,KAAK0/B,MAAMzrB,EAAaE,IAAa,EACtDhiB,KAAKgiB,SAAWA,EAChBhiB,KAAK+sC,eAAeD,IAItBb,EAAF5qC,UAAAmsC,qBAAE,WACE,MAAOxtC,MAAKiN,WAAajN,KAAK6sC,eAIhCZ,EAAF5qC,UAAAosC,yBAAE,WACE,MAAOztC,MAAKiN,WAAajN,KAAKitC,mBAOxBhB,EAAV5qC,UAAAorC,gCAAE,WACOzsC,KAAK2sC,eAGL3sC,KAAKgiB,WACRhiB,KAAKwsC,UAA2C,GAA/BxsC,KAAK0tC,gBAAgBlrC,OAClCxC,KAAK0tC,gBAAgB,GApOL,IAwOtB1tC,KAAK2tC,0BAA4B3tC,KAAK0tC,gBAAgBnrC,SAES,IAA3DvC,KAAK2tC,0BAA0BhtB,QAAQ3gB,KAAKgiB,WAC9ChiB,KAAK2tC,0BAA0BjsC,KAAK1B,KAAKgiB,UAI3ChiB,KAAK2tC,0BAA0B9tB,KAAK,SAACC,EAAGC,GAAM,MAAAD,GAAIC,IAClD/f,KAAKsI,mBAAmB6B,iBAIlB8hC,EAAV5qC,UAAA0rC,eAAE,SAAuBD,GACrB9sC,KAAKmhB,KAAK3b,MACRsnC,kBAANA,EACM/qB,UAAW/hB,KAAK+hB,UAChBC,SAAUhiB,KAAKgiB,SACfxf,OAAQxC,KAAKwC,yBAvNnBjF,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,gBACEO,SAAU,eACVC,SAAU,8oFACVI,QAAF,q0BACEuI,QAAF,YACE1I,MACFC,MAAA,iBAEAM,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAjEAysC,EAAArsC,kEA2EA4C,SAAAjF,KAAAS,EAAAA,QAGAgkB,WAAAzkB,KAAAS,EAAAA,QASA0vC,kBAAAnwC,KAAAS,EAAAA,QASA4vC,eAAArwC,KAAAS,EAAAA,QASA6vC,uBAAAtwC,KAAQS,EAAAA,QASRmjB,OAAA5jB,KAAAoJ,EAAAA,UAiBAslC,OC7HA6B,GAAA,WAAA,QAAAA,MAWiC,sBAXjCvwC,KAACkD,EAAAA,SAAD3C,OACE4C,SACEE,EAAAA,aACA4b,GACAuxB,GACA5C,IAEFrqC,SAAUmrC,IACVlrC,cAAekrC,IACfvtC,WAAYktC,QAEdkC,mBCQE,QAAFE,GAAqBtoC,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAAsoC,MAOaC,GACT39B,EAAW09B,GAAoB,WAOtBE,GAA4B,GAAI/9B,GAAAA,eAC3C,6BACCoS,WAAY,OAAQC,QAAS2rB,KAyB5BC,GAAgB,EAKpBC,GAAA,SAAA/vC,GAqBE,QAAF+vC,GAAqB3oC,EAAiC8C,EACUguB,EAKH8X,GAN3D,GAAFxuC,GAOIxB,EAPJgF,KAAAtD,KAOU0F,IAPV1F,IAAqBF,GAArB4F,YAAqBA,EAAiC5F,EAAtD0I,QAAsDA,EACU1I,EAAhE02B,eAAgEA,EAqB9D12B,EAAFyuC,kBAAqB,EAaXzuC,EAAVm6B,OAA2B,EAMjBn6B,EAAV0uC,aAAiC,EASrB1uC,EAAZ2uC,aAA2B,GAAIrlC,GAAAA,aAGrBtJ,EAAV4uC,0BAAoD99B,EAAAA,aAAaC,MAStD/Q,EAAXmzB,KAAwE,cAGtEnzB,EAAFsuC,cAAkB,oBAAoBA,IAjDtC,IAAUO,GAAOL,EAAWA,EAASM,cAAcjU,MAAM,KAAK,GAAK,SAC/D76B,GAAK+uC,oBAAsB,QAAQF,EAAvC,IAA+C7uC,EAAKsuC,cAApD,KACItuC,EAAKyuC,iBAAsC,mBAAnB/X,IA4C5B,MAhEoCj4B,GAApC8vC,EAAA/vC,GA2BEqF,OAAFC,eACMyqC,EADNhtC,UAAA,aAAE,WACsB,MAAOrB,MAAKi6B,YAClC,SAAU5L,GACRruB,KAAKi6B,OAAS6U,GAAMzgB,GAAK,GAGrBruB,KAAKuuC,kBACPvuC,KAAK+uC,oDAMTprC,OAAFC,eACMyqC,EADNhtC,UAAA,mBAAE,WAC4B,MAAOrB,MAAKwuC,kBACxC,SAAgBngB,GAAaruB,KAAKwuC,aAAeM,GAAMzgB,GAAK,oCA+B5DggB,EAAFhtC,UAAA2tC,kBAAE,WAEE,OAAQphC,UAAW,UADL5N,KAAK6D,MAAQ,IAC/B,MAOEwqC,EAAFhtC,UAAA4tC,iBAAE,WACE,GAAkB,WAAdjvC,KAAKizB,KAAmB,CAE1B,OAAQrlB,UAAW,UADL5N,KAAKkvC,YAAc,IACvC,OAIEb,EAAFhtC,UAAA6K,gBAAE,WAAA,GAAFpM,GAAAE,IACSA,MAAKuuC,kBAGRvuC,KAAKwI,QAAQmB,kBAAiB,WAC5B7J,EAAK4uC,0BACDllC,EAAAA,UAA2B1J,EAAKqvC,iBAAiBxpC,cAAe,iBAC/D5D,KAAK0V,EAAAA,OAAM,SAAGywB,GACb,MAAAA,GAAEkH,SAAWtvC,EAAKqvC,iBAAiBxpC,iBACpC1D,UAAU,SAAAw0B,GAAK,MAAA32B,GAAK0I,QAAQmE,IAAI,WAAM,MAAA7M,GAAKivC,0BAKtDV,EAAFhtC,UAAAiL,YAAE,WACEtM,KAAK0uC,0BAA0Bj8B,eAIzB47B,EAAVhtC,UAAA0tC,iBAAE,WACoB,gBAAd/uC,KAAKizB,MAAwC,WAAdjzB,KAAKizB,MACtCjzB,KAAKyuC,aAAa3qC,MAAMD,MAAO7D,KAAK6D,wBAjI1CtG,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,mBACEO,SAAU,iBACVE,MACFE,KAAA,cACMiwC,gBAAN,IACIC,gBAAJ,MACIrQ,uBAAJ,QACIsQ,cAAe,OACfpwC,MAAJ,mBACIg6B,kCAAJ,oBAEAvxB,QAAA,SACA3I,SAAA,spBACEI,QAAS,g1JACTI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,iFAzFAjC,KAAEI,OAAFC,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA8mB,EAAAA,2BAMArnB,SAAEsW,GAAFjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAowC,SA+FAG,EAAAzuC,oEAmBAuvC,mBAAQ5xC,KAARuJ,EAAAA,UAAAhJ,MAAA,qBAaA2wC,eAAAlxC,KAAAoJ,EAAAA,SAKAssB,OAAA11B,KAAAS,EAAAA,SAmBAqwC,OCzJAmB,GAAA,WAAA,QAAAA,MAKmC,sBALnCjyC,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUE,EAAAA,aAAcC,IACxBC,SAAUutC,GAAgBxtC,IAC1BE,cAAestC,QAEjBmB,KVaMC,GAAY,kBAWhB,QAAFC,GAAqBhqC,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAAgqC,MACaC,GACTr/B,EAAWo/B,GAAwB,WAgB1B9P,GACT,GAAIzvB,GAAAA,eAAiD,wCACnDoS,WAAY,OACZC,QAASotB,KAYTC,GAAmC,46CA2BzChQ,GAAA,SAAAvhC,GAyEE,QAAFuhC,GAAqBn6B,EACP8H,EACsC0J,EAEa6oB,EAEvCxJ,GANxB,GAAFz2B,GAQIxB,EARJgF,KAAAtD,KAQU0F,IARV1F,IAAqBF,GAArB4F,YAAqBA,EAE+B5F,EAApDoX,UAAoDA,EAEapX,EAAjEigC,cAAiEA,EAEvCjgC,EAA1By2B,SAA0BA,EAxDhBz2B,EAAVm6B,OAAmB,EAETn6B,EAAVgwC,oBAA+B,EAY7BhwC,EAAFiwC,gBAAoD,mBAAvBjwC,EAAKigC,iBAC1BjgC,EAAKy2B,WAAaz2B,EAAKy2B,SAASyZ,iBAY9BlwC,EAAVmwC,UAAsBR,GAYX3vC,EAAXmzB,KAAuC,cAoBnCnzB,EAAKgwC,mBAAqBtiC,EAASQ,MAAQR,EAASO,QAEhDwoB,IACEA,EAAS2Z,WACXpwC,EAAKowC,SAAW3Z,EAAS2Z,UAGvB3Z,EAAS4Z,cACXrwC,EAAKqwC,YAAc5Z,EAAS4Z,aAMpC,IAAUC,GACJ,sCAAqCtwC,EAAKgwC,mBAAqB,YAAc,IADnF,mBAGIpqC,GAAYC,cAAc+L,UAAUG,IAAIu+B,KAlC5C,MA5CwC7xC,GAAxCshC,EAAAvhC,GAoBEqF,OAAFC,eACMi8B,EADNx+B,UAAA,gBAAE,WACyB,MAAOrB,MAAKiwC,eACrC,SAAapS,GACX79B,KAAKiwC,UAAYrmC,EAAAA,qBAAqBi0B,GAEjC79B,KAAK8vC,oBAAuBjQ,EAAmBwQ,UAAU3hB,IAAI1uB,KAAKiwC,YACrEjwC,KAAKswC,oDAMT3sC,OAAFC,eACMi8B,EADNx+B,UAAA,mBAAE,WAEE,MAAOrB,MAAKuwC,cAAgBvwC,KAAKkwC,SAAW,QAE9C,SAAgBrsC,GACd7D,KAAKuwC,aAAe3mC,EAAAA,qBAAqB/F,oCAO3CF,OAAFC,eACMi8B,EADNx+B,UAAA,aAAE,WAEE,MAAqB,gBAAdrB,KAAKizB,KAAyBjzB,KAAKi6B,OAAS,OAErD,SAAU6G,GACR9gC,KAAKi6B,OAASpsB,KAAK0B,IAAI,EAAG1B,KAAK2B,IAAI,IAAK5F,EAAAA,qBAAqBk3B,sCAiC/Dn9B,OAAFC,eAAMi8B,EAANx+B,UAAA,qBAAE,WACE,OAAQrB,KAAKkwC,SA1KS,IA0KuB,mCAI/CvsC,OAAFC,eAAMi8B,EAANx+B,UAAA,gBAAE,WACF,GAAUmvC,GAA+B,EAArBxwC,KAAKywC,cAAoBzwC,KAAKmwC,WAC9C,OAAO,OAAOK,EAAlB,IAA6BA,mCAI3B7sC,OAAFC,eAAMi8B,EAANx+B,UAAA,4BAAE,WACE,MAAO,GAAIwM,KAAK6iC,GAAK1wC,KAAKywC,+CAI5B9sC,OAAFC,eAAMi8B,EAANx+B,UAAA,yBAAE,WACE,MAAkB,gBAAdrB,KAAKizB,KACAjzB,KAAK2wC,sBAAwB,IAAM3wC,KAAKi6B,QAAU,IAIvDj6B,KAAK8vC,oBAAoC,kBAAd9vC,KAAKizB,KACC,GAA5BjzB,KAAK2wC,qBAGP,sCAIThtC,OAAFC,eAAMi8B,EAANx+B,UAAA,0BAAE,WACE,MAAOrB,MAAKmwC,YAAcnwC,KAAKkwC,SAAW,qCAIpCrQ,EAAVx+B,UAAAivC,iBAAE,WACF,GAAQM,GAAW/Q,EAAmB+Q,QAE7BA,KACHA,EAAW5wC,KAAKkX,UAAU25B,cAAc,SACxC7wC,KAAKkX,UAAU45B,KAAKC,YAAYH,GAChC/Q,EAAmB+Q,SAAWA,GAG5BA,GAAYA,EAASI,OACtBJ,EAAc,MAAmBK,WAAWjxC,KAAKkxC,oBAAqB,GAGzErR,EAAmBwQ,UAAUx+B,IAAI7R,KAAKkwC,WAIhCrQ,EAAVx+B,UAAA6vC,kBAAE,WACE,MAAOrB,IAEFsB,QAAQ,eAAgB,GAAG,IAAOnxC,KAAK2wC,sBACvCQ,QAAQ,aAAc,GAAG,GAAMnxC,KAAK2wC,sBACpCQ,QAAQ,YAAa,GAAGnxC,KAAKkwC,WApIrBrQ,EAAjBwQ,UAA6B,GAAIe,MAAa3B,KAM7B5P,EAAjB+Q,SAAmD,oBAlCnDrzC,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,uBACEO,SAAU,qBACVE,MACFE,KAAA,cACMD,MAAN,uBACIg6B,kCAAJ,kBACI6G,mBAAJ,WACIC,oBAAJ,WACIjB,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB,QACxBsQ,cAAJ,QAEA3nC,QAAA,SACA3I,SAAA,8sBACEI,QAAS;2kGACTI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,mFA3GAjC,SAAEsW,GAAFjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAoa,EAAAA,cALA3a,KAAQI,OAAQC,aAAhBL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA8mB,EAAAA,2BA0KArnB,SAAAsW,GAAAjW,aAAAL,KAAeuW,EAAAA,OAAQhW,MAAvB8hC,SAGAC,EAAAjgC,uEArCAqzB,OAAA11B,KAAAS,EAAAA,QAYA6F,QAAAtG,KAAAS,EAAAA,SAYA6hC,sBA0GA,QAAAC,GAAAx4B,EAAAkG,EAAAyJ,EAkBE8oB,EAAFxJ,GAEA,GAAAz2B,GAAAxB,EAAAgF,KAAAtD,KAAAsH,EAAAkG,EAAAyJ,EAAA8oB,EAAAxJ,IAAAv2B,IAFE,OAGFF,GAAAmzB,KAAA,gBAHAnzB,EACA,6BAOAvC,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,oBA1BAW,KAAA,cACA6zB,KAAA,gBACA9zB,MAAA,mCACMg6B,kCAAN,kBACI6G,mBAAJ,WACIC,oBAAJ,YAEAr4B,QAAA,SACA3I,SAAA,8sBACAI,QAAA,mkGACAI,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAsgC,EAAA9jB,eAAA,WAAA,QACAze,KAAAC,EAAAA,0MArRAD,SAAEsW,GAAFjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAA8hC,SAwRAE,GAEAD,IC3RAK,GAAA,WAAA,QAAAA,MAYgC,sBAZhC3iC,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUG,GAAiBD,EAAAA,cAC3BE,SACE++B,GACAC,GACAj/B,IAEFE,cACE8+B,GACAC,QAGJI,KCuBIrK,GAAe,EAONsK,IACXhjC,QAAS44B,EAAAA,kBACT14B,YAAaonB,EAAAA,WAAW,WAAM,MAAA2b,MAC9BnK,OAAO,iBAKP,QAAFoK,GAEWlK,EAEAtyB,GAFA7D,KAAXm2B,OAAWA,EAEAn2B,KAAX6D,MAAWA,EACX,MAAAw8B,MAKAD,GAAA,WAyHE,QAAFA,GAAsBE,GAAAtgC,KAAtBsgC,gBAAsBA,EA9GZtgC,KAAVi6B,OAAwB,KAGdj6B,KAAVugC,MAA0B,mBAAmB1K,KAGnC71B,KAAVwgC,UAA6C,KAGnCxgC,KAAVygC,gBAAoC,EAG1BzgC,KAAV0gC,eAA+C,QAGrC1gC,KAAV2gC,WAA+B,EAGrB3gC,KAAV42B,WAA+B,EAG7B52B,KAAFu6B,8BAAwD,aAMtDv6B,KAAF02B,UAAyB,aAOJ12B,KAArBuL,OAA4D,GAAInC,GAAAA,aA4KhE,MArKEzF,QAAFC,eACMw8B,EADN/+B,UAAA,YAAE,WACqB,MAAOrB,MAAKugC,WACjC,SAAS18B,GACP7D,KAAKugC,MAAQ18B,EACb7D,KAAK4gC,2DAIPj9B,OAAFC,eACMw8B,EADN/+B,UAAA,qBAAE,WAEE,MAAOrB,MAAK0gC,oBAEd,SAAkBrS,GAChBruB,KAAK0gC,eAAuB,WAANrS,EAAiB,SAAW,QAClDruB,KAAK6gC,uDASPl9B,OAAFC,eACMw8B,EADN/+B,UAAA,aAAE,WACmB,MAAOrB,MAAKi6B,YAC/B,SAAU6G,GACJ9gC,KAAKi6B,SAAW6G,IAElB9gC,KAAKi6B,OAAS6G,EAEd9gC,KAAK+gC,gCACL/gC,KAAKghC,8DAITZ,EAAF/+B,UAAA2/B,0BAAE,WACMhhC,KAAKwgC,YAAcxgC,KAAKwgC,UAAUpK,UACpCp2B,KAAKwgC,UAAUpK,SAAU,IAQ7BzyB,OAAFC,eACMw8B,EADN/+B,UAAA,gBAAE,WACiB,MAAOrB,MAAKwgC,eAC7B,SAAarnB,GACXnZ,KAAKwgC,UAAYrnB,EACjBnZ,KAAK6D,MAAQsV,EAAWA,EAAStV,MAAQ,KACzC7D,KAAKghC,6DAIPr9B,OAAFC,eACMw8B,EADN/+B,UAAA,gBAAE,WAC0B,MAAOrB,MAAK2gC,eACtC,SAAa98B,GACX7D,KAAK2gC,UAAYrvB,EAAAA,sBAAsBzN,GACvC7D,KAAK6gC,uDAIPl9B,OAAFC,eACMw8B,EADN/+B,UAAA,gBAAE,WAC0B,MAAOrB,MAAK42B,eACtC,SAAa/yB,GACX7D,KAAK42B,UAAYtlB,EAAAA,sBAAsBzN,GACvC7D,KAAK6gC,uDASPT,EAAF/+B,UAAAgK,mBAAE,WAIErL,KAAKygC,gBAAiB,GAOxBL,EAAF/+B,UAAA4/B,OAAE,WACMjhC,KAAK02B,WACP12B,KAAK02B,aAID0J,EAAV/+B,UAAAu/B,wBAAE,WAAA,GAAF9gC,GAAAE,IACQA,MAAKkhC,SACPlhC,KAAKkhC,QAAQ/+B,QAAQ,SAAAg/B,GACnBA,EAAMnnB,KAAOla,EAAKka,KAClBmnB,EAAMC,mBAMJhB,EAAV/+B,UAAA0/B,8BAAE,WAAA,GAAFjhC,GAAAE,KAEUqhC,EAAuC,OAAnBrhC,KAAKwgC,WAAsBxgC,KAAKwgC,UAAU38B,QAAU7D,KAAKi6B,MAE/Ej6B,MAAKkhC,UAAYG,IACnBrhC,KAAKwgC,UAAY,KACjBxgC,KAAKkhC,QAAQ/+B,QAAQ,SAAAg/B,GACnBA,EAAM/K,QAAUt2B,EAAK+D,QAAUs9B,EAAMt9B,MACjCs9B,EAAM/K,UACRt2B,EAAK0gC,UAAYW,OAOzBf,EAAF/+B,UAAAg2B,iBAAE,WACMr3B,KAAKygC,gBACPzgC,KAAKuL,OAAO/F,KAAK,GAAI66B,IAAergC,KAAc,UAAGA,KAAKi6B,UAI9DmG,EAAF/+B,UAAAw/B,oBAAE,WACM7gC,KAAKkhC,SACPlhC,KAAKkhC,QAAQ/+B,QAAQ,SAAAg/B,GAAS,MAAAA,GAAMC,mBAQxChB,EAAF/+B,UAAAk2B,WAAE,SAAW1zB,GACT7D,KAAK6D,MAAQA,EACb7D,KAAKsgC,gBAAgBn2B,gBAQvBi2B,EAAF/+B,UAAAm2B,iBAAE,SAAiBC,GACfz3B,KAAKu6B,8BAAgC9C,GAQvC2I,EAAF/+B,UAAAq2B,kBAAE,SAAkBD,GAChBz3B,KAAK02B,UAAYe,GAOnB2I,EAAF/+B,UAAAs2B,iBAAE,SAAiBC,GACf53B,KAAKiN,SAAW2qB,EAChB53B,KAAKsgC,gBAAgBn2B,+BAvNzB5M,KAACiB,EAAAA,UAADV,OACEW,SAAU,kBACVO,SAAU,gBACVN,WAAYyhC,IACZjhC,MACEE,KAAQ,aACRD,MAAS,2DAhEb5B,KAAEkJ,EAAAA,uCAuGF8E,SAAAhO,KAAGoJ,EAAAA,SAGHu6B,UAAA3jC,KAAGW,EAAAA,gBAAHJ,MAAmB2mB,EAAAA,WAAW,WAAM,MAAA6c,OAAmBC,aAAa,MAIpEvnB,OAAAzc,KAAGS,EAAAA,QAQH4d,gBAAAre,KAAGS,EAAAA,QAeH6F,QAAAtG,KAAGS,EAAAA,QAsBHmb,WAAA5b,KAAGS,EAAAA,QASHiP,WAAA1P,KAAGS,EAAAA,QAQHq7B,WAAA97B,KAAGS,EAAAA,SAuGHoiC,mBAUE,QAAFoB,GAAqB97B,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAA87B,MAGaC,GAELnxB,EAAWlI,EAAmBmQ,EAAcipB,KAAsB,UAK1EF,GAAA,SAAAhjC,GAoJE,QAAFgjC,GAA0BI,EACZp6B,EACQg5B,EACAnrB,EACAwsB,EAC0CnL,GAL9D,GAAF12B,GAMIxB,EANJgF,KAAAtD,KAMUsH,IANVtH,WAEsBF,GAAtBwgC,gBAAsBA,EACAxgC,EAAtBqV,cAAsBA,EACArV,EAAtB6hC,iBAAsBA,EAC0C7hC,EAAhE02B,eAAgEA,EA/HtD12B,EAAV62B,UAA8B,gBAAed,GAGlC/1B,EAAX0uB,GAAwB1uB,EAAK62B,UA6FR72B,EAArByL,OAA4D,GAAInC,GAAAA,aAStDtJ,EAAV+2B,UAA8B,EASpB/2B,EAAVm6B,OAAwB,KAGdn6B,EAAV8hC,+BAAuD,aAenD9hC,EAAK4hC,WAAaA,EAElB5hC,EAAK8hC,+BACHD,EAAiBE,OAAO,SAACrT,EAAYxU,GAC/BwU,IAAO1uB,EAAK0uB,IAAMxU,IAASla,EAAKka,OAClCla,EAAKs2B,SAAU,OAjBzB,MA3HoC73B,GAApC+iC,EAAAhjC,GAqBEqF,OAAFC,eACM09B,EADNjgC,UAAA,eAAE,WACyB,MAAOrB,MAAK62B,cACrC,SAAYhzB,GACd,GAAUi+B,GAAkBxwB,EAAAA,sBAAsBzN,EAC1C7D,MAAK62B,WAAaiL,IACpB9hC,KAAK62B,SAAWiL,EACZA,GAAmB9hC,KAAK0hC,YAAc1hC,KAAK0hC,WAAW79B,QAAU7D,KAAK6D,MACvE7D,KAAK0hC,WAAWvoB,SAAWnZ,MACjB8hC,GAAmB9hC,KAAK0hC,YAAc1hC,KAAK0hC,WAAW79B,QAAU7D,KAAK6D,QAI/E7D,KAAK0hC,WAAWvoB,SAAW,MAGzB2oB,GAEF9hC,KAAK2hC,iBAAiBI,OAAO/hC,KAAKwuB,GAAIxuB,KAAKga,MAE7Cha,KAAKsgC,gBAAgBn2B,iDAKzBxG,OAAFC,eACM09B,EADNjgC,UAAA,aAAE,WACmB,MAAOrB,MAAKi6B,YAC/B,SAAUp2B,GACJ7D,KAAKi6B,SAAWp2B,IAClB7D,KAAKi6B,OAASp2B,EACU,OAApB7D,KAAK0hC,aACF1hC,KAAKo2B,UAERp2B,KAAKo2B,QAAUp2B,KAAK0hC,WAAW79B,QAAUA,GAEvC7D,KAAKo2B,UACPp2B,KAAK0hC,WAAWvoB,SAAWnZ,yCAOnC2D,OAAFC,eACM09B,EADNjgC,UAAA,qBAAE,WAEE,MAAOrB,MAAK0gC,gBAAmB1gC,KAAK0hC,YAAc1hC,KAAK0hC,WAAW9lB,eAAkB,aAEtF,SAAkB/X,GAChB7D,KAAK0gC,eAAiB78B,mCAKxBF,OAAFC,eACM09B,EADNjgC,UAAA,gBAAE,WAEE,MAAOrB,MAAK2gC,WAAkC,OAApB3gC,KAAK0hC,YAAuB1hC,KAAK0hC,WAAWz0B,cAExE,SAAapJ,GACf,GAAUm+B,GAAmB1wB,EAAAA,sBAAsBzN,EAC3C7D,MAAK2gC,YAAcqB,IACrBhiC,KAAK2gC,UAAYqB,EACjBhiC,KAAKsgC,gBAAgBn2B,iDAKzBxG,OAAFC,eACM09B,EADNjgC,UAAA,gBAAE,WAEE,MAAOrB,MAAK42B,WAAc52B,KAAK0hC,YAAc1hC,KAAK0hC,WAAWrI,cAE/D,SAAax1B,GACX7D,KAAK42B,UAAYtlB,EAAAA,sBAAsBzN,oCAczCF,OAAFC,eAAM09B,EAANjgC,UAAA,eAAE,WAAwB,OAAUrB,KAAKwuB,IAAMxuB,KAAK22B,WAApD,0CAyCE2K,EAAFjgC,UAAAkG,MAAE,WACEvH,KAAKmV,cAAc0iB,SAAS73B,KAAKo3B,cAAe,aAQlDkK,EAAFjgC,UAAA+/B,cAAE,WAGEphC,KAAKsgC,gBAAgBn2B,gBAGvBm3B,EAAFjgC,UAAAmiB,SAAE,WACMxjB,KAAK0hC,aAEP1hC,KAAKo2B,QAAUp2B,KAAK0hC,WAAW79B,QAAU7D,KAAKi6B,OAE9Cj6B,KAAKga,KAAOha,KAAK0hC,WAAW1nB,OAIhCsnB,EAAFjgC,UAAA6K,gBAAE,WAAA,GAAFpM,GAAAE,IACIA,MAAKmV,cACFK,QAAQxV,KAAK0F,aAAa,GAC1BzD,UAAU,SAAAg1B,IACJA,GAAen3B,EAAK4hC,YACvB5hC,EAAK4hC,WAAWT,YAKxBK,EAAFjgC,UAAAiL,YAAE,WACEtM,KAAKmV,cAAcU,eAAe7V,KAAK0F,aACvC1F,KAAK4hC,kCAICN,EAAVjgC,UAAAg2B,iBAAE,WACEr3B,KAAKuL,OAAO/F,KAAK,GAAI66B,IAAergC,KAAMA,KAAKi6B,UAGjDqH,EAAFjgC,UAAA4gC,kBAAE,WACE,MAAOjiC,MAAKkiC,eAAiBliC,KAAKiN,UAGpCq0B,EAAFjgC,UAAAi2B,cAAE,SAAcnyB,GAQZA,EAAMgyB,mBAORmK,EAAFjgC,UAAA8gC,eAAE,SAAeh9B,GAIbA,EAAMgyB,iBAEV,IAAUiL,GAAoBpiC,KAAK0hC,YAAc1hC,KAAK6D,QAAU7D,KAAK0hC,WAAW79B,KAC5E7D,MAAKo2B,SAAU,EACfp2B,KAAKq3B,mBAEDr3B,KAAK0hC,aACP1hC,KAAK0hC,WAAWnH,8BAA8Bv6B,KAAK6D,OACnD7D,KAAK0hC,WAAWT,SACZmB,GACFpiC,KAAK0hC,WAAWrK,oCAtPxB95B,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,mBACEQ,SAAU,++BACVI,QAAF,mxEACEuI,QAAF,QAAA,gBAAA,YACEtI,cAAFC,EAAAA,kBAAAC,KACER,SAAF,iBACEE,MACFC,MAAA,mBACMkjC,4BAAN,UACIC,6BAAJ,WACInJ,kCAAJ,sCAEIH,kBAAJ,uEAOAv5B,gBAAAC,EAAAA,wBAAAC,4GAiIApC,KAAsCkJ,EAAAA,oBAxbtClJ,KAAE2Y,EAAAA,eAJF3Y,KAAEglC,EAAAA,4BAPFhlC,KAAQI,OAARC,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA8mB,EAAAA,4BAwcA0c,EAAA1hC,0DA5HAgkB,YAAArmB,KAAAS,EAAAA,MAAAF,MAAA,gBAGA+lB,iBAAAtmB,KAAAS,EAAAA,MAAAF,MAAA,qBAGA0kC,kBAAGjlC,KAAHS,EAAAA,MAAAF,MAAA,sBAGAs4B,UAAA74B,KAAAS,EAAAA,QAGA6F,QAAAtG,KAAAS,EAAAA,QAGA4d,gBAAGre,KAAHS,EAAAA,QAwBAiP,WAAA1P,KAAAS,EAAAA,QAkBAq7B,WAAA97B,KAAAS,EAAAA,QAUAuN,SAAAhO,KAAAoJ,EAAAA,SAaAywB,gBAAA75B,KAAQuJ,EAAAA,UAARhJ,MAAA,YAqCAwjC,OC3bAmB,GAAA,WAAA,QAAAA,MAK6B,sBAL7BllC,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUE,EAAAA,aAAcyV,GAAiBxV,IACzCC,SAAUs/B,GAAekB,GAAgBzgC,IACzCE,cAAeq/B,GAAekB,QAEhCmB,KCCajO,IAIXC,gBAAiBlb,EAAAA,QAAQ,aAKvBC,EAAAA,MAAM,qBAAsB7L,EAAAA,OAC1BC,UAAa,OACb6L,WAAc,aAEhBD,EAAAA,MAAM,OAAQ7L,EAAAA,OAEZ+0B,aAAc,OACdjpB,WAAc,YAEhBC,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CVyBHgpB,GACT,GAAIxyB,GAAAA,eAAwB,+BAC1BoS,WAAY,OACZC,QAASogB,KAQfhP,GAAA,SAAAt1B,GAaE,QAAFs1B,GACctrB,EAC6Cu6B,EACrDv7B,EACA0sB,EACA/e,GALJ,GAAFnV,GAMIxB,EANJgF,KAAAtD,KAMUsH,EAAY0sB,EAAkB/e,IANxCjV,WACcF,GAAdwI,mBAAcA,EAC6CxI,EAA3D+iC,WAA2DA,IA7D3D,MA0DsCtkC,GAAtCq1B,EAAAt1B,GAUEs1B,EAAFvyB,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,IACIA,MAAK6iC,WAAWvP,sBAAsBrxB,UAAU,WAC9CnC,EAAKwI,mBAAmB6B,iCAxB9B5M,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,qBACEQ,SAAU,4BACVC,MACFC,MAAA,qBACM80B,yBAAN,kCACIC,0BAAJ,oCAEAz0B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,0JAjEAjC,KAAEC,EAAAA,aAwEFD,KAAuE42B,EAAAA,mBAnEvE52B,KAAEuS,EAAAA,UAMF8jB,0DA+EA,GAAA9zB,GAAAE,IAgIAA,MAAA0F,YAAAA,EAAE1F,KAAF8iC,kBAAAA,EAAsB9iC,KAAtBmV,cAAAA,EACsBnV,KAAtByI,UAAAA,EACsBzI,KAAtBwI,QAAAA,EACsBxI,KAAtB+iC,KAAAA,EACsB/iC,KAAtBgjC,qCAAA,sDAzGUhjC,KAAVijC,MAAA,OAaUjjC,KAAVkjC,eAAA,EASUljC,KAAVmjC,YAAA,sHA2BqB,GAArB/5B,GAAAA,cAAA,2HA6CWpJ,KAAXojC,aAAAnhC,UAAA,SAAAmxB,GAgIAA,GAlHAtzB,EAAsBijC,OACtBjjC,EAAAkjC,qCAAAljC,EAAAijC,KAAA,eAEUjjC,EAAKujC,qBAAfvjC,EAAAwjC,YACAxjC,EAAAyjC,cAKAzjC,EAAA0jC,4DASAh6B,EAAAA,UAAA1J,EAAA4F,YAAAC,cAAA,WAAA5D,KAAA0V,EAAAA,OAAA,SAAAtS,GAAA,MAAAA,GAAAwF,UAAA84B,EAAAA,SAAA3jC,EAAA4jC,eAAAj6B,EAAAA,UAAA3J,EAAA8I,aAAA3G,UAAA,SAAAkD,GAAA,MAAArF,GAAA0I,QAAAmE,IAAA,WACA7M,EAAA6jC,QACAx+B,EAAiCgyB,wBAS7Bn3B,KAAJ4jC,cAAA7hC,KAAAqZ,EAAAA,qBAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAE,YAAAD,EAAAC,WAAAF,EAAA/V,UAAAgW,EAAAhW,WACQrD,UAAR,SAA4BkD,GACtB,GAANoW,GAAApW,EAAAoW,UAAAjW,EAAAH,EAAAG,SACA,IAAAA,EAAAqb,QAAA,SAAA,SAAApF,GACA,SAAAjW,GAAA,IAAAiW,EAAAoF,QAAA,UAEU7gB,EAAVsjC,aAAA59B,KAAkC1F,EAAM+jC,WArExC,MAyEAlgC,QAAOC,eAAP8vB,EAAAryB,UAAA,YAjJAoU,uDAEA5R,EAAA,QAAAA,EAAA,MAAA,UACA7D,KAAAmG,YACAnG,KAAAmG,UAAAtC,EACQ7D,KAAK8jC,kBAAkBt+B,SAG/BmQ,YAAA,EACEC,cAAF,8CAIAH,+DAEAzV,KAAA+jC,aAAAjgC,QAEA6R,YAAA,EACEC,cAAF,sDAIAH,uHAEEG,cAAF,mDAIAH,iHAEEG,cAAF,uDAqBAH,mGAEAE,YAAA,EACEC,cAAF,qDAGAH,6JAEAE,YAAA,EAIEC,cAAF,uDAGAH,mGAEAE,YAAA,EACEC,cAAF,qDAGAH,kJAEAE,YAAA,EAIEC,cAAF,6DAAAH,eAeA,MAAAzV,MAAAozB,QAAA,SAAApzB,KAAAizB,MAEAtd,YAAA,EACEC,cAAF,gDAqDA5V,MAAAgkC,WAEAhkC,KAAAsjC,WAAAW,+BAAA7xB,KAAA,SAAA8xB,GAIAA,GAAA,kBAAApkC,GAAA4F,YAAAC,cAAA4B,OACAzH,EAAA4F,YAAAC,cAAA4B,mEAcA,GAAA48B,GAAAnkC,KAAA+iC,MAAA/iC,KAAA+iC,KAAAqB,8DAEApkC,KAAAgjC,+CAAAqB,aAEArkC,KAAAmV,cAAA0iB,SAAA73B,KAAAgjC,qCAAAhjC,KAAAskC,YAGAtkC,KAAA0F,YAAAC,cAAAq1B,QAEAh7B,KAAOgjC,qCAAP,KACAhjC,KAAAskC,WAAA,+HAMAtkC,KAAAsjC,WAAAiB,QAAAvkC,KAAAqjC,kEAQArjC,KAAAyI,UAAA2O,YACApX,KAAAwkC,mBAAA,wDAMAxkC,KAAAsjC,WAAAmB,UAEAzkC,KAAA0kC,kBAAA1/B,WACAhF,KAAA4jC,cAAA5+B,WAEIhF,KAAK4I,WAAT9E,OACI9D,KAAK4I,WAAT5D,YAEArB,OAAAC,eAAA8vB,EAAAryB,UAAA,qHASEuU,cAAF,2JAqCA,YAdA,KAAA+uB,IAAAA,GAAA3kC,KAAAozB,YAAA,KAAAwR,IAAAA,EAAA,WAAS5kC,KAAT6jC,QAAAc,EAAAA,GAGQ3kC,KAARmoB,gBAAAnoB,KAAAwkC,kBAAA,OAAA,eAEQxkC,KAARskC,WAAAM,IAGA5kC,KAAAmoB,gBAAA,OAAAnoB,KAAAwjC,iBAEMxjC,KAAKsjC,aACXtjC,KAAAsjC,WAAAiB,QAAAvkC,KAAAqjC,qBAGA,GAAAnxB,SAAqB,SAArBC,GACArS,EAAAsjC,aAAArhC,KAAAC,EAAAA,KAAA,IAAAC,UAAA,SAAA0oB,GAAA,MAAAxY,GAAAwY,EAAA,OAAA,cAIAhnB,OAAOC,eAAP8vB,EAAAryB,UAAA,UACAoU,sGAGAE,YAAA,EACEC,cAAF,mBAAArY,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,kCAvSAQ,SAAA,0EACEqH,YAAFkuB,GAAAC,iBACEv1B,MACFC,MAAA,aACAu1B,eAAA,kBACAC,qBAAA,iCACMC,oBAAN,6BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI9nB,SAAJ,MAEAzN,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIAk0B,EAAA1X,eAAA,WAAA,QACAze,KAAAC,EAAAA,+EA1GAD,KAAEuS,EAAAA,SAhBFvS,SAA8CsW,GAA9CjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAoa,EAAAA,eAIAwb,EAAA9zB,gBAkBAmG,WAAAxI,KAAAS,EAAAA,QAoNAi1B,OAAA11B,KAAAS,EAAAA,iEAvGAolC,eAAA7lC,KAAAoJ,EAAAA,SAaAk+B,gBAAAtnC,KAAAoJ,EAAAA,OAAA7I,MAAA,YASAgnC,cAAAvnC,KAAAoJ,EAAAA,SAMAo+B,gBAAAxnC,KAAAoJ,EAAAA,OAAA7I,MAAA,YAkBAknC,cAAAznC,KAAAoJ,EAAAA,SAKAm9B,oBAAAvmC,KAAAoJ,EAAAA,OAAA7I,MAAA,qBAMAs1B,SAAA71B,KAAAS,EAAAA,SAeA01B,0CA4ScuR,gCAGdjlC,MAAA8F,KAAAA,EACA9F,KAAAklC,SAAAA,EANcllC,KAAdwI,QAAAA,EAJExI,KAAFsI,mBAAAA,EAAkCtI,KAAlCw2B,eAAAA,EAKiEx2B,KAAjEmlC,cAAA,GAAA/7B,GAAAA,aAxCqBpJ,KAArB4I,WAAkC,GAAlCC,GAAAA,QAgBmB7I,KAAnBolC,gBAAA,GAAAv8B,GAAAA,6FAUA/C,GAEAA,EAAAyF,OAAAxJ,KAAA0H,EAAAA,UAAAzJ,KAAA4I,aAAA3G,UAAA,WAmBAnC,EAAAulC,mBACAvlC,EAAAwlC,0BAKML,GACNA,EAAA15B,SAEAxJ,KAAA0H,EAAAA,UAAAzJ,KAAA4I,aACA3G,UAAA,WAAA,MAAAnC,GAAAwlC,0BAEAtlC,KAAAulC,UAAmBC,EApGnB,MAsGA7hC,QAAAC,eAAkB2vB,EAAlBlyB,UAAA,SAGIoU,mEArGJ9R,OAAAC,eAAA2vB,EAAAlyB,UAAA,wEAGAsC,OAAAC,eAAA2vB,EAAAlyB,UAAA,6IAYAsC,OAAAC,eAAA2vB,EAAAlyB,UAAA,+IAQArB,KAAAylC,mBAGA7W,8FAKEhZ,cAAF,IAEAjS,OAAAC,eAAA2vB,EAAAlyB,UAAA,oFAmCEuU,cAAF,IAEA2d,EAAAlyB,UAAAgK,8BAkCA,GAAAvL,GAAAE,6FAAAF,EAAA2zB,SAAAtxB,QAAA,SAAAujC,GAAA5lC,EAAA6lC,mBAAAD,GACA5lC,EAAkB8lC,qBAAlBF,GACA5lC,EAAA+lC,iBAAAH,OAGA5lC,EAAA2zB,SAAAjxB,QACQ1C,EAAKgmC,cAAbhmC,EAAiCimC,SACzBjmC,EAAKgmC,cAAbhmC,EAAAkmC,QACAlmC,EAAAwlC,wBAGAxlC,EAAAwI,mBAAA6B,iBAEAnK,KAAAolC,gBAAArjC,KAAAkkC,EAAAA,aAAA,IACAx8B,EAAAA,UAAAzJ,KAAA4I,aAAA3G,UAAA,WAAA,MAAAnC,GAAAwlC,2BASE/R,EAAFlyB,UAAAiL,uBAEAtM,KAAAolC,gBAAApgC,+EAOE,kFAKA,iEAEAuuB,EAAFlyB,UAAA6kC,qBAEA,GAAApmC,GAAAE,uCAAAA,KAAAwI,QAMGmB,kBANH,WAAA,MAAA7J,GAAAslC,gBAAAthC,yMAcA,iBAAAqB,EAAAG,SAC8C,mBAD9CxF,EAAA02B,gBAIA12B,EAAcolC,SAAdv/B,cAAA+L,UAAAG,IAAA,yBAEM/R,EAANwlC,wBACMxlC,EAANwI,mBAAA6B,iBAEA,SAAAu7B,EAAAzS,MAEMyS,EAANtC,aAAArhC,KAAA0H,EAAAA,UAAAzJ,KAAAyzB,SAAAtvB,UAAAlC,UAAA,WACA,MAAAnC,GAAAqmC,mBAAAT,EAAAtS,sEAeAsS,EAAA5B,kBAAA/hC,KAAA0H,EAAAA,UAAAzJ,KAAAyzB,SAAAtvB,UAAAlC,UAAA,WACAnC,EAAA0I,QAAAwgB,iBAAA9B,eAAAnlB,KAAAC,EAAAA,KAAA,IAAAC,UAAA,WACAnC,EAAAulC,gKAUApjC,UAAA,WAAAnC,EAAAwlC,wBACAxlC,EAAAwI,mBAAA6B,8HAWQnK,KAAKklC,SAAbv/B,cAAA+L,UAAAC,OAAA,oGAQA3R,KAAAyzB,SAAAtxB,QAAA,SAAAujC,GAAA,OAAAA,EAAA3/B,UAC8B,MAA9BjG,EAAsBkmC,MAEtBI,GAAA,OAEUtmC,EAAMkmC,KAAhBN,IAGA,MAAA5lC,EAAAimC,QACAK,GAAA,SACAtmC,EAAAimC,OAAAL,KAGA1lC,KAAAmzB,OAAAnzB,KAAAgzB,MAAA,KAEAhzB,KAAA8F,MAAA,QAAA9F,KAAA8F,KAAAjC,OACA7D,KAAAgzB,MAAAhzB,KAAAgmC,KAEQhmC,KAARmzB,OAAsBnzB,KAAtB+lC,SAIM/lC,KAAKgzB,MAAQhzB,KAAK+lC,OAClB/lC,KAAKmzB,OAASnzB,KAAKgmC,iKAWvBzS,EAAFlyB,UAAAglC,8BAEArmC,KAAAmlC,cAAA3/B,iCAGE+tB,EAAFlyB,UAAAilC,6BAEA,GAAAxmC,GAAAE,6BAAAyX,OAAA,SAAAiuB,GAAA,MAAAA,KAAAA,EAAAhC,cAAA5jC,EAAAymC,iBAAAb,KAAAvjC,QAAA,SAAAujC,GAAA,MAAA,GAAA/B,WAKEpQ,EAAFlyB,UAAAmlC,8BAEA,MAAAxmC,MAAA8lC,cAAA9lC,KAAA+lC,SAAoB/lC,KAApBumC,iBAAAvmC,KAAA+lC;oVAoBI,GAAJjmC,GAAAE,8CAKQ,GAAR,QAAYA,KAAZgzB,MAAAC,8BAGa,IAAb,QAAAjzB,KAAsBgzB,MAAtBC,KAAA,CAEQ,GAAIlQ,GAAQ/iB,KAApBgzB,MAAAE,MACApQ,IAAAC,EAAAiK,GAAqBjK,EAErB,GAAA/iB,KAAAmzB,QAAAnzB,KAAAmzB,OAAAC,OACA,GAAA,QAAQpzB,KAAKmzB,OAAbF,KACAjG,GAAAhtB,KAAAmzB,OAAAD,WAGa,IAAb,QAAAlzB,KAAAmzB,OAAAF,KAAA,CAEQ,GAARlQ,GAAA/iB,KAAAmzB,OAAAD,MACAlG,IAAAjK,EAAAD,GAAAC,EAOID,EAAJA,GAAA,KACIkK,EAAJA,GAAA,KACAlK,IAAA9iB,KAAAqzB,gBAAAvQ,MAAAkK,IAAAhtB,KAAAqzB,gBAAArG,QACAhtB,KAAAqzB,iBAAAvQ,KAAAA,EAAAkK,MAAAA,GAIQhtB,KAARwI,QAAqBmE,IAArB,WAAA,MAA8C7M,GAA9CwzB,sBAAAxvB,KAAAhE,EAAAuzB,qBAIAE,EAAA31B,aACAL,KAAUwB,EAAAA,UAAVjB,OAAAW,SAAA,uBACAO,SAAA,qBAEAC,SAAA,25EA5VAC,MACAC,MAAA,uBACAq0B,iDAAA,qBAEE/zB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA+zB,EAAAvX,eAAA,WAAA,QACAze,KAAAqS,EAAAA,eAAAhS,aAAAL,KAAAsS,EAAAA,aACAtS,KAAAC,EAAAA,aACAD,KAAAuS,EAAAA,qLAjaAvS,KAAQoS,EAAAA,cAAR/R,aAAAL,KAAAsS,EAAAA,cAqBA0jB,EAAA3zB,gBAXA6zB,WAAAl2B,KAAAW,EAAAA,gBAAAJ,MAAA41B,MA0eA1sB,WAAAzJ,KAAAo2B,EAAAA,aAAA71B,MAAe81B,MACfC,eAAAt2B,KAAAuJ,EAAAA,UAAAhJ,MAAA81B,MAjfAE,WAAAv2B,KAAAS,EAAAA,sEAgaAu1B,KCjZAQ,GAAA,SAAAz1B,GAaE,QAAFy1B,GACMjY,EAC+C8P,EAC/CtkB,EACA0sB,EACA/e,GACN,MAAI3W,GAAJgF,KAAAtD,KAAU8b,EAAmB8P,EAAWtkB,EAAY0sB,EAAkB/e,IAAtEjV,KA3BA,MAoBuCzB,GAAvCw1B,EAAAz1B,kBAZAf,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,sBACEQ,SAAU,4BACVC,MACFC,MAAA,yCACM80B,yBAAN,kCACIC,0BAAJ,oCAEAz0B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,0JA1BAjC,KAAEC,EAAAA,aAiCFD,KAAgE42B,EAAAA,mBAxBhE52B,KAAEuS,EAAAA,UACFikB,OA6BAK,GAAA,SAAA91B,GAGA,QAAA81B,KAyBA,GAAAt0B,GAAA,OAAAxB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,IAcU,OAvCVF,GAAAu0B,kBAAA,EAAAv0B,EAAAw0B,aAAA,EA8BUx0B,EAAVy0B,gBAAA,EASAz0B,EAZA,MAvCAvB,GAAA61B,EAAA91B,wDAuCAmX,6HAEEG,cAAF,yKASEA,cAAF,kLASEA,cAAF,mBADArY,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,oCA9CAQ,SAAA,0EACEqH,YAAFkuB,GAAAC,iBACEv1B,MACFC,MAAA,yBACA+N,SAAA,KACAwnB,eAAA,kBACMC,qBAAN,iCACIC,oBAAJ,6BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACIC,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEA11B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAGA40B,EAAAx0B,gBACAw1B,kBAAA73B,KAAAS,EAAAA,QACAq3B,cAAA93B,KAAAS,EAAAA,yCAGAo2B,GASAV,IASA4B,GAAA,SAAAh3B,GAGE,QAAFg3B,oDAgBA,cACyCA,EAAzC13B,aAbAL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,uDAgBAQ,SAAA,66EAhBAC,MACAC,MAAA,6CACAq0B,iDAAA,qBAEE/zB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAGA81B,EAAI11B,gBACJ6zB,WAAGl2B,KAAHW,EAAAA,gBAAAJ,MAAAs2B,MACAptB,WAAAzJ,KAAAo2B,EAAAA,aAAA71B,MAAAi2B,OAEAuB,OCpGAC,GAAA,WAAA,QAAAA,MAyB+B,sBAzB/Bh4B,KAACkD,EAAAA,SAAD3C,OACE4C,SACEE,EAAAA,aACAC,GACA20B,EAAAA,gBACAC,EAAAA,gBAEF30B,SACED,GACA6yB,GACAH,GACAK,GACAQ,GACAkB,GACAvB,IAEFhzB,cACE2yB,GACAH,GACAK,GACAQ,GACAkB,GACAvB,QAGJwB,KCtBaG,GACX,GAAIvlB,GAAAA,eAA6C,oCAC/CoS,WAAY,OACZC,QAAS,WAAM,OAAEmT,oBAAoB,EAAOC,kBAAkB,MC2B9DC,GAAe,EAGNC,IACX34B,QAAS44B,EAAAA,kBACT14B,YAAaonB,EAAAA,WAAW,WAAM,MAAAuR,MAC9BC,OAAO,iBAKP,QAAFC,GAEWC,EAEAC,GAFAp2B,KAAXm2B,OAAWA,EAEAn2B,KAAXo2B,QAAWA,EACX,MAAAF,oBAKE,QAAFG,GAAqB3wB,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAA2wB,MACaC,GAML/d,EAAcjI,EAAWlI,EAAmBhB,EAAcivB,KAAsB,WAGxFL,GAAA,SAAA13B,GAsGE,QAAF03B,GAAc1uB,EAKAmB,EACQ0M,EACA7M,EACe4E,EACf1E,EAEG+tB,EACuCC,EAC9B1wB,GAbhC,GAAFhG,GAcIxB,EAdJgF,KAAAtD,KAcUsH,IAdVtH,WAMsBF,GAAtBqV,cAAsBA,EACArV,EAAtBwI,mBAAsBA,EAEAxI,EAAtB0I,QAAsBA,EAEG1I,EAAzBy2B,SAAyBA,EACuCz2B,EAAhE02B,eAAgEA,EAC9B12B,EAAlCgG,KAAkCA,EA3FxBhG,EAAVwE,SAAqB,SAACmyB,KACZ32B,EAAV42B,UAAsB,aAEZ52B,EAAV62B,UAA8B,uBAAsBd,GAC1C/1B,EAAV82B,WAA+B,EACrB92B,EAAV+2B,UAA8B,EAGpB/2B,EAAVg3B,WAAsB,EAkBXh3B,EAAXka,KAAiC,KAGtBla,EAAX0uB,GAAwB1uB,EAAK62B,UAGlB72B,EAAX8b,cAA+C,QAGxB9b,EAAvB8jB,UAAkD,KAGtB9jB,EAA5B+jB,eAA4D,KAevC/jB,EAArByL,OACM,GAAInC,GAAAA,aAQWtJ,EAArBi3B,aAAwD,GAAI3tB,GAAAA,aAQvCtJ,EAArBk3B,WAAsD,GAAI5tB,GAAAA,aAuBtDtJ,EAAKoN,SAAWqI,SAASrI,IAAa,IAjB1C,MA/EoC3O,GAApCy3B,EAAA13B,GA4CEqF,OAAFC,eACMoyB,EADN30B,UAAA,gBAAE,WAC0B,MAAOrB,MAAK42B,eACtC,SAAa/yB,GAAS7D,KAAK42B,UAAYtlB,EAAAA,sBAAsBzN,oCAG7DF,OAAFC,eACMoyB,EADN30B,UAAA,eAAE,WACyB,MAAOrB,MAAK62B,cACrC,SAAYhzB,GACV7D,KAAK62B,SAAWvlB,EAAAA,sBAAsBzN,GACtC7D,KAAKsI,mBAAmB6B,gDAuB1BxG,OAAFC,eAAMoyB,EAAN30B,UAAA,eAAE,WAAwB,OAAUrB,KAAKwuB,IAAMxuB,KAAK22B,WAApD,0CAuBEX,EAAF30B,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,IACIA,MAAKmV,cACFK,QAAQxV,KAAK0F,aAAa,GAC1BzD,UAAU,SAAAg1B,GACJA,GAMH/kB,QAAQC,UAAUC,KAAK,WAAM,MAAAtS,GAAK42B,iBAK1CV,EAAF30B,UAAAiL,YAAE,WACEtM,KAAKmV,cAAcU,eAAe7V,KAAK0F,cAIzCswB,EAAF30B,UAAA61B,eAAE,SAAe/xB,GAcb,GAVAA,EAAMgyB,kBAEDn3B,KAAK82B,WACR92B,KAAK+2B,aAAavxB,OAOhBxF,KAAK82B,WAAa92B,KAAKu2B,SAASZ,mBAElC,YADA31B,KAAKo3B,cAAczxB,cAAcywB,QAAUp2B,KAAKo2B,QAKlDp2B,MAAKo2B,QAAUp2B,KAAKo3B,cAAczxB,cAAcywB,QAIhDp2B,KAAKq3B,oBAIPrB,EAAF30B,UAAAi2B,cAAE,SAAcnyB,GAQZA,EAAMgyB,mBAIRnB,EAAF30B,UAAAk2B,WAAE,SAAW1zB,GACT7D,KAAKo2B,UAAYvyB,GAInBmyB,EAAF30B,UAAAm2B,iBAAE,SAAiBC,GACfz3B,KAAKsE,SAAWmzB,GAIlBzB,EAAF30B,UAAAq2B,kBAAE,SAAkBD,GAChBz3B,KAAK02B,UAAYe,GAInBzB,EAAF30B,UAAAs2B,iBAAE,SAAiBC,GACf53B,KAAKiN,SAAW2qB,EAChB53B,KAAKsI,mBAAmB6B,gBAI1B6rB,EAAF30B,UAAAkG,MAAE,WACEvH,KAAKmV,cAAc0iB,SAAS73B,KAAKo3B,cAAe,aAIlDpB,EAAF30B,UAAAy2B,OAAE,WACE93B,KAAKo2B,SAAWp2B,KAAKo2B,QACrBp2B,KAAKsE,SAAStE,KAAKo2B,UAMbJ,EAAV30B,UAAAg2B,iBAAE,WACEr3B,KAAKsE,SAAStE,KAAKo2B,SACnBp2B,KAAKuL,OAAO/F,KAAK,GAAI0wB,IAAqBl2B,KAAMA,KAAKo2B,WAI/CJ,EAAV30B,UAAA02B,mBAAE,SAA2BzoB,GAC7B,GAAQ0oB,GAAc1oB,EAAWtP,KAAKi4B,eAAkB,GAOpD,OAJIj4B,MAAKk4B,mBACPF,GAAc,KAGTnqB,KAAK0B,IAAI,EAAG1B,KAAK2B,IAAIwoB,EAAY,OAG1ChC,EAAF30B,UAAA82B,aAAE,WACE,IAAKn4B,KAAKiN,WAAajN,KAAK82B,UAAW,CAC3C,GAAYsB,GAAUp4B,KAAKq4B,SAAS1yB,aAC9B3F,MAAKi4B,eAAiBj4B,KAAKs4B,YAAY3yB,cAAc4yB,YAAcH,EAAQG,YAC3EH,EAAQ1mB,UAAUG,IAAI,gBAEtB7R,KAAKk4B,iBAAmBl4B,KAAKo2B,QAC7Bp2B,KAAK82B,WAAY,IAIrBd,EAAF30B,UAAAm3B,QAAE,SAAQrzB,GACN,GAAInF,KAAK82B,UAAW,CACxB,GAAY3oB,GAAYnO,KAAK8F,MAA4B,QAApB9F,KAAK8F,KAAKjC,OAAmB,EAAI,CAChE7D,MAAKy4B,gBAAkBz4B,KAAK+3B,mBAAmB5yB,EAAMuzB,OAASvqB,EAEpE,IAAYwqB,GAAS34B,KAAKy4B,gBAAkB,IAAOz4B,KAAKi4B,eAAiB9pB,CACnEnO,MAAKq4B,SAAS1yB,cAAcgI,MAAMC,UAAY,eAAe+qB,EAAnE,cAIE3C,EAAF30B,UAAAu3B,WAAE,WAAA,GAAF94B,GAAAE,IACI,IAAIA,KAAK82B,UAAW,CACxB,GAAY+B,GAAkB74B,KAAKy4B,gBAAkB,EAE3CI,KAAoB74B,KAAKo2B,UAC3Bp2B,KAAKg3B,WAAWxxB,OACXxF,KAAKu2B,SAASX,mBACjB51B,KAAKo2B,QAAUyC,EACf74B,KAAKq3B,qBAMTr3B,KAAKwI,QAAQmB,kBAAkB,WAAM,MAAAkd,YAAW,WAC1C/mB,EAAKg3B,YACPh3B,EAAKg3B,WAAY,EACjBh3B,EAAKu4B,SAAS1yB,cAAc+L,UAAUC,OAAO,gBAI7C7R,EAAKu4B,SAAS1yB,cAAcgI,MAAMC,UAAY,UAOtDooB,EAAF30B,UAAAy3B,mBAAE,WAME94B,KAAKsI,mBAAmBygB,gCA9R5BxrB,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,mBACEO,SAAU,iBACVE,MACFC,MAAA,mBACM45B,OAAN,KACIC,kBAAJ,KAEIC,sBAAuB,4CACvBC,wCAAJ,4BACIC,kCAAJ,sCACIC,UAAJ,uCAEAn6B,SAAA,owCACAI,QAAA,61GACEX,WAAFo3B,IACEluB,QAAS,WAAX,gBAAA,QAAA,YACEtI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAhFApC,KAAE2Y,EAAAA,eAPF3Y,KAAQkJ,EAAAA,oBAHRlJ,KAAQI,OAARC,aAAAL,KAAAM,EAAAA,UAAAC,MAAA,gBAQAP,KAAEuS,EAAAA,SA+KFvS,SAAAsW,GAAAjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAyB43B,QArKzBn4B,KAAEI,OAAFC,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA8mB,EAAAA,2BAuKArnB,KAAAqS,EAAAA,eAAAhS,aAAAL,KAAAsS,EAAAA,cAxLAmmB,EAAAp2B,0HAoHAoa,OAAAzc,KAAAS,EAAAA,QAGAwwB,KAAAjxB,KAAAS,EAAAA,QAGA4d,gBAAAre,KAAAS,EAAAA,QAGA4lB,YAAArmB,KAAAS,EAAAA,MAAAF,MAAA,gBAGA+lB,iBAAAtmB,KAAAS,EAAAA,MAAAF,MAAA,qBAGAu7B,WAAA97B,KAAAS,EAAAA,QAGAo4B,UAAA74B,KAAAS,EAAAA,QAGAuN,SAAAhO,KAAAoJ,EAAAA,SAKAowB,eAAAx5B,KAAQoJ,EAAAA,SAORqwB,aAAAz5B,KAAAoJ,EAAAA,SASAywB,gBAAA75B,KAAAuJ,EAAAA,UAAAhJ,MAAA,YAcAk4B,OCtKAsD,GAAA,WAAA,QAAAA,MAQmC,sBARnC/7B,KAACkD,EAAAA,SAAD3C,OACE4C,SAAU2V,GAAiBxV,GAAiByV,EAAAA,iBAC5CxV,SAAUk1B,GAAgBn1B,IAC1BE,cAAei1B,IACft3B,YACGvB,QAASooB,EAAAA,sBAAuBC,SAAUC,SAG/C6T,KrBoDaC,IACXp8B,QAAS44B,EAAAA,kBACT14B,YAAaonB,EAAAA,WAAW,WAAM,MAAAI,MAC9BoR,OAAO,iBAIT,QAAAuD,MAMA,MAAAA,oBAME,QAAFC,GAAqB/zB,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAA+zB,MACaC,GAKLnhB,EAAcjI,EAAWlJ,EAAcqyB,IAAgB,WAM/D5U,GAAA,SAAAvmB,GAmWE,QAAFumB,GAAcvd,EACQ6N,EACA7M,EACYxC,EACGoH,EAE2BspB,GAN9D,GAAF12B,GAOIxB,EAPJgF,KAAAtD,KAOUsH,IAPVtH,WACsBF,GAAtBqV,cAAsBA,EACArV,EAAtBwI,mBAAsBA,EACYxI,EAAlCgG,KAAkCA,EAG8BhG,EAAhE02B,eAAgEA,EAzTtD12B,EAAV65B,SAAoB,EAYV75B,EAAV85B,KAAyB,IAiBf95B,EAAV+5B,KAAyB,EAef/5B,EAAVg6B,MAA0B,EAMhBh6B,EAAVi6B,aAAiC,EAiBvBj6B,EAAVk6B,cAA2C,EA4BjCl6B,EAAVm6B,OAAkC,KAexBn6B,EAAVo6B,WAAsB,EAGDp6B,EAArByL,OAA6D,GAAInC,GAAAA,aAG5CtJ,EAArBqlB,MAA4D,GAAI/b,GAAAA,aAO3CtJ,EAArBslB,YAAgE,GAAIhc,GAAAA,aA6BlEtJ,EAAF42B,UAAyB,aAIf52B,EAAVq6B,SAA6B,EAM3Br6B,EAAFs6B,YAAwB,EAMtBt6B,EAAF4V,WAAuB,EA2Gb5V,EAAVu6B,qBAAyC,EAG/Bv6B,EAAVw6B,kBAAiD,KAEvCx6B,EAAVy6B,8BAAgE,aAMtDz6B,EAAV6kB,uBAAmC/T,EAAAA,aAAaC,MA8B5C/Q,EAAKoN,SAAWqI,SAASrI,IAAa,IAxB1C,MA5S+B3O,GAA/BsmB,EAAAvmB,GAGEqF,OAAFC,eACMihB,EADNxjB,UAAA,cAAE,WACwB,MAAOrB,MAAK25B,aACpC,SAAW91B,GACT7D,KAAK25B,QAAUroB,EAAAA,sBAAsBzN,oCAKvCF,OAAFC,eACMihB,EADNxjB,UAAA,WAAE,WACoB,MAAOrB,MAAK45B,UAChC,SAAQvL,GACNruB,KAAK45B,KAAOhwB,EAAAA,qBAAqBykB,EAAGruB,KAAK45B,MACzC55B,KAAKm6B,SAAWn6B,KAAKw6B,qBAAqBx6B,KAAKi6B,QAG/Cj6B,KAAKsI,mBAAmB6B,gDAK1BxG,OAAFC,eACMihB,EADNxjB,UAAA,WAAE,WACoB,MAAOrB,MAAK65B,UAChC,SAAQxL,GACNruB,KAAK65B,KAAOjwB,EAAAA,qBAAqBykB,EAAGruB,KAAK65B,MAGrB,OAAhB75B,KAAKi6B,SACPj6B,KAAK6D,MAAQ7D,KAAK65B,MAEpB75B,KAAKm6B,SAAWn6B,KAAKw6B,qBAAqBx6B,KAAKi6B,QAG/Cj6B,KAAKsI,mBAAmB6B,gDAK1BxG,OAAFC,eACMihB,EADNxjB,UAAA,YAAE,WACqB,MAAOrB,MAAK85B,WACjC,SAASzL,GACPruB,KAAK85B,MAAQlwB,EAAAA,qBAAqBykB,EAAGruB,KAAK85B,OAEtC95B,KAAK85B,MAAQ,GAAM,IACrB95B,KAAKy6B,gBAAkBz6B,KAAK85B,MAAMY,WAAWC,MAAM,KAAKC,MAAOp4B,QAIjExC,KAAKsI,mBAAmB6B,gDAK1BxG,OAAFC,eACMihB,EADNxjB,UAAA,kBAAE,WAC4B,MAAOrB,MAAK+5B,iBACxC,SAAel2B,GAAkB7D,KAAK+5B,YAAczoB,EAAAA,sBAAsBzN,oCAO1EF,OAAFC,eACMihB,EADNxjB,UAAA,oBAAE,WACqB,MAAOrB,MAAKg6B,mBACjC,SAAiBn2B,GAEb7D,KAAKg6B,cADO,SAAVn2B,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxB+F,EAAAA,qBAAqB/F,EAAO7D,KAAkB,eAE9C,mCAMzB2D,OAAFC,eACMihB,EADNxjB,UAAA,aAAE,WAME,MAHoB,QAAhBrB,KAAKi6B,SACPj6B,KAAK6D,MAAQ7D,KAAK65B,MAEb75B,KAAKi6B,YAEd,SAAU5L,GACR,GAAIA,IAAMruB,KAAKi6B,OAAQ,CAC3B,GAAUp2B,GAAQ+F,EAAAA,qBAAqBykB,EAI7BruB,MAAKy6B,kBACP52B,EAAQg3B,WAAWh3B,EAAMi3B,QAAQ96B,KAAKy6B,mBAGxCz6B,KAAKi6B,OAASp2B,EACd7D,KAAKm6B,SAAWn6B,KAAKw6B,qBAAqBx6B,KAAKi6B,QAG/Cj6B,KAAKsI,mBAAmB6B,iDAa5BxG,OAAFC,eACMihB,EADNxjB,UAAA,gBAAE,WAC0B,MAAOrB,MAAKk6B,eACtC,SAAar2B,GACX7D,KAAKk6B,UAAY5oB,EAAAA,sBAAsBzN,oCAkBzCF,OAAFC,eAAMihB,EAANxjB,UAAA,oBAAE,WACE,MAAIrB,MAAKilB,YACAjlB,KAAKilB,YAAYjlB,KAAK6D,OAM3B7D,KAAKy6B,iBAAmBz6B,KAAK6D,OAAS7D,KAAK6D,MAAQ,GAAM,EACpD7D,KAAK6D,MAAMi3B,QAAQ96B,KAAKy6B,iBAG1Bz6B,KAAK6D,OAAS,mCAIvBghB,EAAFxjB,UAAAkG,MAAE,WACEvH,KAAK+6B,qBAIPlW,EAAFxjB,UAAA25B,KAAE,WACEh7B,KAAKi7B,oBAOPt3B,OAAFC,eAAMihB,EAANxjB,UAAA,eAAE,WAAwB,MAAOrB,MAAKk7B,OAAOl7B,KAAKm6B,2CAmBhDx2B,OAAFC,eAAMihB,EAANxjB,UAAA,mBAAE,WAGE,MAAOrB,MAAKklB,UAAYllB,KAAKm7B,OAASn7B,KAAKm7B,wCAK7Cx3B,OAAFC,eAAMihB,EAANxjB,UAAA,mBAAE,WACE,MAAwB,KAAjBrB,KAAKo7B,yCAOdz3B,OAAFC,eAAMihB,EAANxjB,UAAA,iBAAE,WACE,MAAIrB,MAAKiN,SA5Rc,EA+RnBjN,KAAKq7B,cAAgBr7B,KAAK+kB,WACrB/kB,KAAK0V,UA1RiB,GAHG,EA+R3B,mCAIT/R,OAAFC,eAAMihB,EAANxjB,UAAA,8BAAE,WACF,GAAUi6B,GAAOt7B,KAAKklB,SAAW,IAAM,IAC7BqW,EAAQv7B,KAAKklB,SAAW,OAAM,EAAIllB,KAAKo7B,SAAjD,MAAmE,EAAIp7B,KAAKo7B,QAA5E,QAGI,QAEExtB,UAAW,YAAY0tB,EAA7B,KAJiBt7B,KAAKw7B,2BAA6B,IAAM,IAIbx7B,KAAKy7B,UAAjD,eAAyEF,EAAzE,sCAKE53B,OAAFC,eAAMihB,EAANxjB,UAAA,wBAAE,WACF,GAAUi6B,GAAOt7B,KAAKklB,SAAW,IAAM,IAC7BqW,EAAQv7B,KAAKklB,SAAW,MAAMllB,KAAKo7B,QAA7C,MAA+Dp7B,KAAKo7B,QAApE,QAGI,QAEExtB,UAAW,YAAY0tB,EAA7B,KAJiBt7B,KAAKw7B,2BAA6B,GAAK,KAIZx7B,KAAKy7B,UAAjD,eAAyEF,EAAzE,sCAKE53B,OAAFC,eAAMihB,EAANxjB,UAAA,6BAAE,WAME,OACEuM,UAAa,aANJ5N,KAAKklB,SAAW,IAAM,KAMrC,KAHgBllB,KAAKklB,UAAoC,OAAxBllB,KAAK07B,gBAAgC,IAAL,IAChD17B,KAAKq6B,qBAAuB,EAAI,IAEjD,uCAKE12B,OAAFC,eAAMihB,EAANxjB,UAAA,oBAAE,WACF,GAAQs6B,GAAuC,IAA5B37B,KAAKq6B,qBAChBuB,EAAiB57B,KAAKklB,SAAW,OAAOyW,EAAhD,IAAiEA,EAAjE,QACQL,EAAOt7B,KAAKklB,SAAW,IAAM,IAI7B2W,EAAQ77B,KAAKklB,UAAoC,OAAxBllB,KAAK07B,gBAAiC,GAAN,IACzDI,EAAU97B,KAAKklB,UAAoC,OAAxBllB,KAAK07B,gBAA+C,GAApB,kBAC3Dr8B,GACFu8B,eAAkBA,EAElBhuB,UAAa,0BAA0B0tB,EAA7C,IAAqDO,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAI97B,KAAKq7B,aAAer7B,KAAKy7B,UAAW,CAItCp8B,EAAO,WAHIW,KAAKklB,SACXllB,KAAK+7B,YAAc,SAAW,MAC9B/7B,KAAK+7B,YAAc,QAAU,SACJ/7B,KAAKy7B,UAAzC,KAGI,MAAOp8B,oCAGTsE,OAAFC,eAAMihB,EAANxjB,UAAA,6BAAE,WAOE,OACEuM,UAAa,aAPJ5N,KAAKklB,SAAW,IAAM,KAOrC,KAFoE,MADnC,OAAxBllB,KAAK07B,iBAA6B17B,KAAKklB,SAAgCllB,KAAK+7B,aAAxB/7B,KAAK+7B,aACjC/7B,KAAKo7B,QAAU,EAAIp7B,KAAKo7B,SAEzD,uCA4BUvW,EAAVxjB,UAAAm6B,yBAAE,WACE,MAAgC,OAAxBx7B,KAAK07B,iBAA6B17B,KAAKklB,SAAgCllB,KAAK+7B,aAAxB/7B,KAAK+7B,aAI3DlX,EAAVxjB,UAAAq6B,cAAE,WACE,MAAQ17B,MAAK8F,MAA2B,OAAnB9F,KAAK8F,KAAKjC,MAAkB,MAAQ,OAe3DghB,EAAFxjB,UAAAmiB,SAAE,WAAA,GAAF1jB,GAAAE,IACIA,MAAKmV,cACAK,QAAQxV,KAAK0F,aAAa,GAC1BzD,UAAU,SAACoE,GACVvG,EAAK4V,YAAcrP,GAAqB,aAAXA,EAC7BvG,EAAKwI,mBAAmBygB,kBAE1B/oB,KAAK8F,OACP9F,KAAK2kB,uBAAyB3kB,KAAK8F,KAAKyF,OAAOtJ,UAAU,WACvDnC,EAAKwI,mBAAmB6B,mBAK9B0a,EAAFxjB,UAAAiL,YAAE,WACEtM,KAAKmV,cAAcU,eAAe7V,KAAK0F,aACvC1F,KAAK2kB,uBAAuBlS,eAG9BoS,EAAFxjB,UAAA26B,cAAE,WACMh8B,KAAKiN,WAMTjN,KAAKs6B,kBAAoBt6B,KAAKi8B,uBAC9Bj8B,KAAKk8B,+BAGPrX,EAAFxjB,UAAA86B,aAAE,SAAah3B,GAGX,IAAInF,KAAKiN,UAA6B,IAAjB9H,EAAMi3B,OAA3B,CAIJ,GAAUC,GAAWr8B,KAAK6D,KACtB7D,MAAKo6B,YAAa,EAClBp6B,KAAK+6B,oBACL/6B,KAAKs8B,0BAA0BjhB,EAAGlW,EAAMo3B,QAASjhB,EAAGnW,EAAMq3B,UAGtDH,GAAYr8B,KAAK6D,QACnB7D,KAAKy8B,kBACLz8B,KAAKq3B,sBAITxS,EAAFxjB,UAAAq7B,SAAE,SAASv3B,GACP,IAAInF,KAAKiN,SAAT,CAMKjN,KAAKo6B,YACRp6B,KAAK28B,cAAc,MAIrBx3B,EAAM2F,gBAEV,IAAQuxB,GAAWr8B,KAAK6D,KACpB7D,MAAKs8B,0BAA0BjhB,EAAGlW,EAAMy3B,OAAOvhB,EAAGC,EAAGnW,EAAMy3B,OAAOthB,IAG9D+gB,GAAYr8B,KAAK6D,OACnB7D,KAAKy8B,oBAIT5X,EAAFxjB,UAAAs7B,cAAE,SAAcx3B,GACRnF,KAAKiN,UAAYjN,KAAKo6B,aAK1Bp6B,KAAKg8B,gBAELh8B,KAAKo6B,YAAa,EAClBp6B,KAAK+6B,oBACL/6B,KAAK68B,mBAAqB78B,KAAK6D,MAE3BsB,IACFnF,KAAKs8B,0BAA0BjhB,EAAGlW,EAAMy3B,OAAOvhB,EAAGC,EAAGnW,EAAMy3B,OAAOthB,IAClEnW,EAAM2F,oBAIV+Z,EAAFxjB,UAAAy7B,YAAE,WACE98B,KAAKo6B,YAAa,EAEdp6B,KAAK68B,oBAAsB78B,KAAK6D,OAAU7D,KAAKiN,UACjDjN,KAAKq3B,mBAEPr3B,KAAK68B,mBAAqB,MAG5BhY,EAAFxjB,UAAA07B,SAAE,WAGE/8B,KAAKs6B,kBAAoBt6B,KAAKi8B,uBAC9Bj8B,KAAKk8B,8BAGPrX,EAAFxjB,UAAA27B,QAAE,WACEh9B,KAAK02B,aAGP7R,EAAFxjB,UAAA47B,WAAE,SAAW93B,GACT,IAAInF,KAAKiN,WAAYvC,EAAAA,eAAevF,GAApC,CAIJ,GAAUk3B,GAAWr8B,KAAK6D,KAEtB,QAAQsB,EAAMwF,SACZ,IAAKuyB,GAAAA,QACHl9B,KAAKm9B,WAAW,GAChB,MACF,KAAKC,GAAAA,UACHp9B,KAAKm9B,YAAY,GACjB,MACF,KAAKpyB,GAAAA,IACH/K,KAAK6D,MAAQ7D,KAAKuP,GAClB,MACF,KAAK3E,GAAAA,KACH5K,KAAK6D,MAAQ7D,KAAKwP,GAClB,MACF,KAAK6tB,GAAAA,WAQHr9B,KAAKm9B,WAAmC,OAAxBn9B,KAAK07B,gBAA2B,GAAK,EACrD,MACF,KAAK4B,GAAAA,SACHt9B,KAAKm9B,WAAW,EAChB,MACF,KAAKI,GAAAA,YAEHv9B,KAAKm9B,WAAmC,OAAxBn9B,KAAK07B,iBAA4B,EAAI,EACrD,MACF,KAAK8B,GAAAA,WACHx9B,KAAKm9B,YAAY,EACjB,MACF,SAGE,OAGAd,GAAYr8B,KAAK6D,QACnB7D,KAAKy8B,kBACLz8B,KAAKq3B,oBAGPr3B,KAAKo6B,YAAa,EAClBj1B,EAAM2F,mBAGR+Z,EAAFxjB,UAAAo8B,SAAE,WACEz9B,KAAKo6B,YAAa,GAIZvV,EAAVxjB,UAAA87B,WAAE,SAAmBO,GACjB19B,KAAK6D,MAAQ7D,KAAKk7B,QAAQl7B,KAAK6D,OAAS,GAAK7D,KAAK8kB,KAAO4Y,EAAU19B,KAAKwP,IAAKxP,KAAKuP,MAI5EsV,EAAVxjB,UAAAi7B,yBAAE,SAAiCqB,GAC/B,GAAK39B,KAAKs6B,kBAAV,CAIJ,GAAQsD,GAAS59B,KAAKklB,SAAWllB,KAAKs6B,kBAAkBpN,IAAMltB,KAAKs6B,kBAAkBxX,KAC7E+a,EAAO79B,KAAKklB,SAAWllB,KAAKs6B,kBAAkBlnB,OAASpT,KAAKs6B,kBAAkBvX,MAC9E+a,EAAe99B,KAAKklB,SAAWyY,EAAIriB,EAAIqiB,EAAItiB,EAG3C+f,EAAUp7B,KAAKk7B,QAAQ4C,EAAeF,GAAUC,EAUpD,IARI79B,KAAKw7B,6BACPJ,EAAU,EAAIA,GAOA,IAAZA,EACFp7B,KAAK6D,MAAQ7D,KAAKwP,QACb,IAAgB,IAAZ4rB,EACTp7B,KAAK6D,MAAQ7D,KAAKuP,QACb,CACX,GAAYwuB,GAAa/9B,KAAKg+B,gBAAgB5C,GAIlC6C,EAAepwB,KAAKC,OAAOiwB,EAAa/9B,KAAKwP,KAAOxP,KAAK8kB,MAAQ9kB,KAAK8kB,KAAO9kB,KAAKwP,GAGxFxP,MAAK6D,MAAQ7D,KAAKk7B,OAAO+C,EAAcj+B,KAAKwP,IAAKxP,KAAKuP,QAKlDsV,EAAVxjB,UAAAg2B,iBAAE,WACEr3B,KAAKu6B,8BAA8Bv6B,KAAK6D,OACxC7D,KAAKolB,YAAY5f,KAAKxF,KAAK6D,OAC3B7D,KAAKuL,OAAO/F,KAAKxF,KAAKiS,uBAIhB4S,EAAVxjB,UAAAo7B,gBAAE,WACEz8B,KAAKmlB,MAAM3f,KAAKxF,KAAKiS,uBAIf4S,EAAVxjB,UAAA66B,2BAAE,WACE,GAAKl8B,KAAKglB,cAAiBhlB,KAAKs6B,kBAIhC,GAAyB,QAArBt6B,KAAKglB,aAAwB,CACrC,GAAUkZ,GAAYl+B,KAAKklB,SAAWllB,KAAKs6B,kBAAkBlnB,OAASpT,KAAKs6B,kBAAkBvX,MACnFob,EAAgBD,EAAYl+B,KAAK8kB,MAAQ9kB,KAAKuP,IAAMvP,KAAKwP,KACzD4uB,EAAevwB,KAAKuU,KAvoBG,GAuoB6B+b,GACpDE,EAAgBD,EAAep+B,KAAK8kB,IACxC9kB,MAAKq6B,qBAAuBgE,EAAgBH,MAE5Cl+B,MAAKq6B,qBAAuBr6B,KAAKglB,aAAehlB,KAAK8kB,MAAQ9kB,KAAKuP,IAAMvP,KAAKwP,MAKzEqV,EAAVxjB,UAAA4Q,mBAAE,SAA2BpO,OAA7B,KAAAA,IAA6BA,EAAQ7D,KAAK6D,MAC1C,IAAQsB,GAAQ,GAAIq0B,GAKhB,OAHAr0B,GAAMgxB,OAASn2B,KACfmF,EAAMtB,MAAQA,EAEPsB,GAID0f,EAAVxjB,UAAAm5B,qBAAE,SAA6B32B,GAC3B,QAASA,GAAS,GAAK7D,KAAKwP,MAAQxP,KAAKuP,IAAMvP,KAAKwP,MAI9CqV,EAAVxjB,UAAA28B,gBAAE,SAAwBhG,GACtB,MAAOh4B,MAAKwP,IAAMwoB,GAAch4B,KAAKuP,IAAMvP,KAAKwP,MAI1CqV,EAAVxjB,UAAA65B,OAAE,SAAer3B,EAAe2L,EAASD,GACrC,WADJ,KAAAC,IAAgCA,EAAhC,OAAA,KAAAD,IAAyCA,EAAzC,GACW1B,KAAK0B,IAAIC,EAAK3B,KAAK2B,IAAI3L,EAAO0L,KAQ/BsV,EAAVxjB,UAAA46B,qBAAE,WACE,MAAOj8B,MAAKqlB,eAAiBrlB,KAAKqlB,eAAe1f,cAAc24B,wBAA0B,MAOnFzZ,EAAVxjB,UAAA05B,kBAAE,WACE/6B,KAAK0F,YAAYC,cAAc4B,SAIzBsd,EAAVxjB,UAAA45B,iBAAE,WACEj7B,KAAK0F,YAAYC,cAAcq1B,QAOjCnW,EAAFxjB,UAAAk2B,WAAE,SAAW1zB,GACT7D,KAAK6D,MAAQA,GAQfghB,EAAFxjB,UAAAm2B,iBAAE,SAAiBC,GACfz3B,KAAKu6B,8BAAgC9C,GAQvC5S,EAAFxjB,UAAAq2B,kBAAE,SAAkBD,GAChBz3B,KAAK02B,UAAYe,GAQnB5S,EAAFxjB,UAAAs2B,iBAAE,SAAiBC,GACf53B,KAAKiN,SAAW2qB,kBA9qBpBr6B,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,aACEO,SAAU,YACVN,WAAF66B,IACEr6B,MACFk6B,UAAA,aACMmF,SAAN,YACIC,cAAJ,uBACIC,YAAJ,qBACIC,UAAJ,aACI3M,eAAJ,kBACI4M,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACI1/B,MAAJ,aACIC,KAAJ,SACI0/B,aAAJ,WACIh3B,uBAAJ,WACIi3B,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,sDACIxG,kCAAJ,uCAEAl6B,SAAA;0pBACAI,QAAA,ssPACEuI,QAAF,WAAA,QAAA,YACEtI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAA2CC,yFApH3CpC,KAAEkJ,EAAAA,oBAnBFlJ,KAAQqS,EAAAA,eAARhS,aAAAL,KAAAsS,EAAAA,aAiBAtS,KAAEI,OAAFC,aAAAL,KAAAM,EAAAA,UAAAC,MAAA,gBAhBAP,KAAQI,OAARC,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA8mB,EAAAA,4BA2cAC,EAAAjlB,6DA9TA4P,MAAAjS,KAAAS,EAAAA,QAQA8mB,OAAAvnB,KAAAS,EAAAA,QAYA+mB,aAAAxnB,KAAAS,EAAAA,QAiBAgnB,eAAAznB,KAAAS,EAAAA,QAeA6F,QAAAtG,KAAAS,EAAAA,QASAinB,cAAA1nB,KAAAS,EAAAA,QAcAknB,WAAA3nB,KAAAS,EAAAA,QAgCAuN,SAAAhO,KAAAoJ,EAAAA,SAGAwe,QAAA5nB,KAAAoJ,EAAAA,SAQAye,cAAA7nB,KAAAoJ,EAAAA,SAGA0e,iBAAA9nB,KAAAuJ,EAAAA,UAAAhJ,MAAA,oBAgLA+mB,OChbAS,GAAA,WAAA,QAAAA,MAM8B,sBAN9B/nB,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUE,EAAAA,aAAcC,IACxBC,SAAU+jB,GAAWhkB,IACrBE,cAAe8jB,IACfnmB,YAAavB,QAASooB,EAAAA,sBAAuBC,SAAUC,SAEzDH,mBC6BE,QAAFI,GAAcC,EACQC,GADpB,GAAF9lB,GAAAE,IACsBA,MAAtB4lB,YAAsBA,EAlBH5lB,KAAnB6lB,gBAAqC,GAAIhd,GAAAA,QAGtB7I,KAAnB8lB,aAAkC,GAAIjd,GAAAA,QAGnB7I,KAAnB+lB,UAA+B,GAAIld,GAAAA,QASzB7I,KAAVgmB,oBAA+B,EAI3BhmB,KAAK2lB,kBAAoBA,EAEzB3lB,KAAKimB,WAAWhkB,UAAU,WAAM,MAAAnC,GAAKomB,YACrCP,EAAkBQ,QAAQlkB,UAAU,WAAM,MAAAnC,GAAKsmB,mBAsEnD,MAlEEV,GAAFrkB,UAAA6kB,QAAE,WACOlmB,KAAK6lB,gBAAgBQ,QACxBrmB,KAAK2lB,kBAAkBW,OAEzBC,aAAavmB,KAAKwmB,qBAIpBd,EAAFrkB,UAAAolB,kBAAE,WACOzmB,KAAK+lB,UAAUM,SAClBrmB,KAAKgmB,oBAAqB,EAC1BhmB,KAAK+lB,UAAUjiB,OACf9D,KAAK+lB,UAAU/gB,aAUnB0gB,EAAFrkB,UAAAqlB,gBAAE,WACE1mB,KAAKymB,qBAIPf,EAAFrkB,UAAAslB,cAAE,SAAcC,GAAd,GAAF9mB,GAAAE,IACIA,MAAKwmB,mBAAqBK,WAAW,WAAM,MAAA/mB,GAAKomB,WAAWU,IAI7DlB,EAAFrkB,UAAAylB,MAAE,WACO9mB,KAAK8lB,aAAaO,SACrBrmB,KAAK8lB,aAAahiB,OAClB9D,KAAK8lB,aAAa9gB,aAKd0gB,EAAVrkB,UAAA+kB,eAAE,WACEpmB,KAAK4lB,YAAYmB,UAEZ/mB,KAAK+lB,UAAUM,QAClBrmB,KAAK+lB,UAAU/gB,WAGjBhF,KAAK6lB,gBAAgB/hB,MAAMkjB,kBAAmBhnB,KAAKgmB,qBACnDhmB,KAAK6lB,gBAAgB7gB,WACrBhF,KAAKgmB,oBAAqB,GAI5BN,EAAFrkB,UAAA4lB,eAAE,WACE,MAAOjnB,MAAK6lB,gBAAgBqB,gBAI9BxB,EAAFrkB,UAAA8lB,YAAE,WACE,MAAOnnB,MAAK2lB,kBAAkByB,UAIhC1B,EAAFrkB,UAAA4kB,SAAE,WACE,MAAOjmB,MAAK+lB,UAAUmB,gBAE1BxB,KChHa2B,GAAqB,GAAIlX,GAAAA,eAAoB,iCAW1D,QAAAmX,KAEEtnB,KAAFunB,WAAoC,YAMlCvnB,KAAFwnB,oBAAiC,GAM/BxnB,KAAF4mB,SAAsB,EASpB5mB,KAAF+D,KAAoB,KAGlB/D,KAAFynB,mBAAuD,SAGrDznB,KAAF0nB,iBAAmD,SACnD,MAAAJ,MCrCAK,GAAA,WAeE,QAAFA,GACWC,EACqB7jB,GADrB/D,KAAX4nB,YAAWA,EAEP5nB,KAAK+D,KAAOA,EADhB,MAKE4jB,GAAFtmB,UAAAwmB,OAAE,WACE7nB,KAAK4nB,YAAYnB,qBAInB9iB,OAAFC,eAAM+jB,EAANtmB,UAAA,iBAAE,WACE,QAASrB,KAAK+D,KAAK8jB,uDA5BvBtqB,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,mBACEQ,SAAU,8JACVI,QAAF,yUACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACET,MACFC,MAAA,+HAWAwoB,KCdaG,IAIXC,cAAexO,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,eAAgB7L,EAAAA,OACpBC,UAAW,aACXoa,QAAS,KAEXxO,EAAAA,MAAM,UAAW7L,EAAAA,OACfC,UAAW,WACXoa,QAAS,KAEXtO,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,qCACnCD,EAAAA,WAAW,yBAA0BC,EAAAA,QAAQ,oCAAqChM,EAAAA,OAChFqa,QAAS,SCEfC,GAAA,SAAA3pB,GAkCE,QAAF2pB,GACYzf,EACA9C,EACA4C,EAED4f,GALT,GAAFpoB,GAOIxB,EAPJgF,KAAAtD,OAAAA,WACYF,GAAZ0I,QAAYA,EACA1I,EAAZ4F,YAAYA,EACA5F,EAAZwI,mBAAYA,EAEDxI,EAAXooB,eAAWA,EAtBDpoB,EAAV8I,YAAuB,EAMZ9I,EAAXqmB,QAAmC,GAAItd,GAAAA,QAG5B/I,EAAXsnB,SAAoC,GAAIve,GAAAA,QAGtC/I,EAAFqoB,gBAAoB,OAgBkB,cAA9BD,EAAeX,YAA+BW,EAAeV,oBAExB,QAA9BU,EAAeX,WACxBznB,EAAKsoB,MAAQ,KAEbtoB,EAAKsoB,MAAQ,SAJbtoB,EAAKsoB,MAAQ,UA1BnB,MAL0C7pB,GAA1C0pB,EAAA3pB,GAwCE2pB,EAAF5mB,UAAAgnB,sBAAE,SAAyBC,GAGvB,MAFAtoB,MAAKuoB,qBACLvoB,KAAKwoB,wBACExoB,KAAKyoB,cAAcJ,sBAAsBC,IAIlDL,EAAF5mB,UAAAqnB,qBAAE,SAAwBJ,GAGtB,MAFAtoB,MAAKuoB,qBACLvoB,KAAKwoB,wBACExoB,KAAKyoB,cAAcC,qBAAqBJ,IAIjDL,EAAF5mB,UAAAsnB,eAAE,SAAexjB,GACN,GAAAoW,GAAXpW,EAAAoW,UAAsBjW,EAAtBH,EAAAG,OAMI,KAJiB,SAAZA,GAAoC,SAAdiW,GAAqC,WAAZjW,IAClDtF,KAAK4oB,gBAGS,YAAZtjB,EAAuB,CAG/B,GAAYujB,GAAU7oB,KAAKonB,QAErBpnB,MAAKwI,QAAQmE,IAAI,WACfkc,EAAQ/kB,OACR+kB,EAAQ7jB,eAMdijB,EAAF5mB,UAAAynB,MAAE,WACO9oB,KAAK4I,aACR5I,KAAKmoB,gBAAkB,UACvBnoB,KAAKsI,mBAAmBygB,kBAK5Bd,EAAF5mB,UAAAilB,KAAE,WAKE,MADAtmB,MAAKmoB,gBAAkB,SAChBnoB,KAAKmmB,SAId8B,EAAF5mB,UAAAiL,YAAE,WACEtM,KAAK4I,YAAa,EAClB5I,KAAK4oB,iBAOCX,EAAV5mB,UAAAunB,cAAE,WAAA,GAAF9oB,GAAAE,IACIA,MAAKwI,QAAQwgB,iBAAiB9B,eAAenlB,KAAKC,EAAAA,KAAK,IAAIC,UAAU,WACnEnC,EAAKqmB,QAAQriB,OACbhE,EAAKqmB,QAAQnhB,cAKTijB,EAAV5mB,UAAAmnB,sBAAE,WACF,GAAUlf,GAAuBtJ,KAAK0F,YAAYC,cACxCsjB,EAAejpB,KAAKkoB,eAAegB,UAErCD,KACErnB,MAAMC,QAAQonB,GAEhBA,EAAa9mB,QAAQ,SAAAgnB,GAAY,MAAA7f,GAAQoI,UAAUG,IAAIsX,KAEvD7f,EAAQoI,UAAUG,IAAIoX,IAIqB,WAA3CjpB,KAAKkoB,eAAeT,oBACtBne,EAAQoI,UAAUG,IAAI,wBAGqB,QAAzC7R,KAAKkoB,eAAeR,kBACtBpe,EAAQoI,UAAUG,IAAI,sBAKlBoW,EAAV5mB,UAAAknB,mBAAE,WACE,GAAIvoB,KAAKyoB,cAAcpE,cACrB,KAAM+E,OAAM,4FApJlB7rB,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,sBACEQ,SAAU,8CACVI,QAAF,wYACEI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE8G,YAAFwhB,GAAAC,eACE7oB,MACF2Z,cAAA,QACM1Z,MAAN,0BACIkqB,WAAJ,kBACIC,gBAAJ,sGAzBA/rB,KAAEkJ,EAAAA,oBAFFlJ,KAAE+pB,MAUFW,EAAAroB,6EA2BAqoB,uBCvCAsB,GAAA,WAAA,QAAAA,MAYgC,sBAZhChsB,KAACkD,EAAAA,SAAD3C,OACE4C,SACE8oB,EAAAA,cACApT,EAAAA,aACAxV,EAAAA,aACA4b,GACA3b,IAEFC,SAAUmnB,GAAsBpnB,IAChCE,cAAeknB,GAAsBN,IACrC8B,iBAAkBxB,GAAsBN,QAE1C4B,KCGaG,GACT,GAAIvZ,GAAAA,eAAkC,iCACpCoS,WAAY,OACZC,QAASmH,KAWfC,GAAA,WAuBE,QAAFA,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvClqB,KAAd6pB,SAAcA,EACA7pB,KAAd8pB,MAAcA,EACA9pB,KAAd+pB,UAAcA,EACA/pB,KAAdgqB,oBAAcA,EACwBhqB,KAAtCiqB,gBAAsCA,EACejqB,KAArDkqB,eAAqDA,EAtB3ClqB,KAAVmqB,wBAAgE,KAtDhE,MAyDExmB,QAAFC,eAAMgmB,EAANvoB,UAAA,0BAAE,WACF,GAAU+oB,GAASpqB,KAAKiqB,eACpB,OAAOG,GAASA,EAAOC,mBAAqBrqB,KAAKmqB,6BAGnD,SAAuBtmB,GACjB7D,KAAKiqB,gBACPjqB,KAAKiqB,gBAAgBI,mBAAqBxmB,EAE1C7D,KAAKmqB,wBAA0BtmB,mCAmBnC+lB,EAAFvoB,UAAAipB,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAOxqB,MAAKyqB,QAAQF,EAAWC,IAUjCZ,EAAFvoB,UAAAqpB,iBAAE,SAAiBzrB,EAA4BurB,GAE3C,MAAOxqB,MAAKyqB,QAAQxrB,EAAUurB,IAShCZ,EAAFvoB,UAAAspB,KAAE,SAAKC,EAAiB/C,EAAqB2C,OAA7C,KAAA3C,IAAwBA,EAAxB,GAEA,IAAUgD,GAAVC,MAAwB9qB,KAAKkqB,eAAmBM,EAU5C,OANAK,GAAQ9mB,MAAQ6mB,QAApBA,EAA6B/C,OAA7BA,GAESgD,EAAQrD,sBACXqD,EAAQrD,oBAAsBoD,GAGzB5qB,KAAKsqB,kBAAkB3C,GAAgBkD,IAMhDjB,EAAFvoB,UAAA6kB,QAAE,WACMlmB,KAAKqqB,oBACPrqB,KAAKqqB,mBAAmBnE,WAI5B0D,EAAFvoB,UAAAiL,YAAE,WAEMtM,KAAKmqB,yBACPnqB,KAAKmqB,wBAAwBjE,WAOzB0D,EAAVvoB,UAAA0pB,yBAAE,SAAiCC,EACAR,GAEnC,GAAUS,GAAeT,GAAUA,EAAOxG,kBAAoBwG,EAAOxG,iBAAiBkH,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBjrB,KAAK+pB,UAAW,GAAIqB,WACrE9D,GAAmBkD,MAGhBa,EACF,GAAIC,GAAAA,gBAAgBrD,GAAsBuC,EAAOxG,iBAAkBkH,GACjEK,EAAmDP,EAAW1G,OAAO+G,EAE3E,OADAE,GAAaC,SAAStD,eAAiBsC,EAChCe,EAAaC,UAMd5B,EAAVvoB,UAAAopB,QAAE,SAAmBgB,EAA4CC,GAGjE,GAAUlB,GAAVM,MAAuB,GAAIxD,IAAwBtnB,KAAKkqB,eAAmBwB,GACjEV,EAAahrB,KAAK2rB,eAAenB,GACjCoB,EAAY5rB,KAAK+qB,yBAAyBC,EAAYR,GACtD5C,EAAc,GAAIlC,IAAyCkG,EAAWZ,EAE5E,IAAIS,YAAmB1R,GAAAA,YAAa,CACxC,GAAYuO,GAAS,GAAI7E,GAAAA,eAAegI,EAAO,MACvCI,UAAWrB,EAAOzmB,KAClB6jB,YAARA,GAGMA,GAAY4D,SAAWI,EAAUlD,qBAAqBJ,OACjD,CACX,GAAY4C,GAAWlrB,KAAK8rB,gBAAgBtB,EAAQ5C,GACxCU,EAAS,GAAIgD,GAAAA,gBAAgBG,MAAS5X,GAAWqX,GACjDa,EAAaH,EAAUvD,sBAAyBC,EAGtDV,GAAY4D,SAAWO,EAAWP,SAkBpC,MAZAxrB,MAAKgqB,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAASnqB,KACpD0H,EAAAA,UAAUuhB,EAAWmB,cAAcpqB,KAAKC,EAAAA,KAAK,MAC7CC,UAAU,SAAAuX,GACNA,EAAM4S,QACRpB,EAAWqB,eAAe3a,UAAUG,IAAI,yBAExCmZ,EAAWqB,eAAe3a,UAAUC,OAAO,2BAI/C3R,KAAKssB,iBAAiB1E,EAAa4C,GACnCxqB,KAAKqqB,mBAAqBzC,EACnB5nB,KAAKqqB,oBAINT,EAAVvoB,UAAAirB,iBAAE,SAAyB1E,EAAkC4C,GAA3D,GAAF1qB,GAAAE,IAEI4nB,GAAYX,iBAAiBhlB,UAAU,WAEjCnC,EAAKuqB,oBAAsBzC,IAC7B9nB,EAAKuqB,mBAAqB,MAGxBG,EAAOhD,qBACT1nB,EAAKgqB,MAAMyC,UAIXvsB,KAAKqqB,oBAGPrqB,KAAKqqB,mBAAmBpD,iBAAiBhlB,UAAU,WACjD2lB,EAAYjC,kBAAkBmD,UAEhC9oB,KAAKqqB,mBAAmBnE,WAGxB0B,EAAYjC,kBAAkBmD,QAI5B0B,EAAO5D,UAAY4D,EAAO5D,SAAW,GACvCgB,EAAYT,cAAcllB,UAAU,WAAM,MAAA2lB,GAAYjB,cAAc6D,EAAe,YAGjFA,EAAOhD,qBACTxnB,KAAK8pB,MAAM0C,SAAShC,EAAOhD,oBAAqBgD,EAAOjD,aAQnDqC,EAAVvoB,UAAAsqB,eAAE,SAAuBnB,GACzB,GAAUiC,GAAgB,GAAIC,GAAAA,aAC1BD,GAActe,UAAYqc,EAAOrc,SAErC,IAAQwe,GAAmB3sB,KAAK6pB,SAAS9jB,WAAW6mB,SAE1CC,EAA6B,QAArBrC,EAAOrc,UACf2e,EAC0B,SAA9BtC,EAAO/C,oBACwB,UAA9B+C,EAAO/C,qBAAmCoF,GACZ,QAA9BrC,EAAO/C,oBAAgCoF,EACpCE,GAAWD,GAAwC,WAA9BtC,EAAO/C,kBAgBlC,OAfIqF,GACFH,EAAiB7J,KAAK,KACbiK,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BzC,EAAO9C,iBACTiF,EAAiBO,IAAI,KAErBP,EAAiBQ,OAAO,KAG1BV,EAAcE,iBAAmBA,EAC1B3sB,KAAK6pB,SAASuD,OAAOX,IAQtB7C,EAAVvoB,UAAAyqB,gBAAE,SACItB,EACA5C,GAEN,GAAUqD,GAAeT,GAAUA,EAAOxG,kBAAoBwG,EAAOxG,iBAAiBkH,QAElF,OAAO,IAAIC,GAAAA,eAAeF,GAAgBjrB,KAAK+pB,UAAW,GAAIqB,WAC3D1F,GAAgBkC,IAChBP,GAAoBmD,EAAOzmB,yBA9OlCxG,KAAC8vB,EAAAA,WAADvvB,OAAaykB,WAAYgH,2CArCzBhsB,KAAQ+vB,EAAAA,UAFR/vB,KAAQgwB,EAAAA,gBAURhwB,KAAEiwB,EAAAA,WATFjwB,KAAQkwB,EAAAA,qBAkERlwB,KAAuDqsB,EAAvDhsB,aAAAL,KAAOsS,EAAAA,WAAPtS,KAAmBmwB,EAAAA,aAjDnBnwB,KAA4B+pB,GAA5B1pB,aAAAL,KAkDOuW,EAAAA,OAlDPhW,MAkDc4rB,uOA5EdE,mBC0DA,QAAA+D,MAA0B,MAA1BA,MACaC,GACTC,EAAiBzmB,EAAcumB,KAGnCG,GAAA,SAAAxvB,GAAA,QAAAwvB,KAAA,GAAAhuB,GAAA,OAAAxB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,WAQEF,GAAFiuB,UAAc,GAAIC,KAGPluB,EAAX+S,cAA2B,GAAIhK,GAAAA,QASN/I,EAAzBmuB,MAAiD,MAWvCnuB,EAAVouB,WAAsC,GAYFpuB,EAApCkhB,WAAqE,GAAI5X,GAAAA,eA8DzE,MApG6B7K,GAA7BuvB,EAAAxvB,GAkBEqF,OAAFC,eACMkqB,EADNzsB,UAAA,iBAAE,WACiC,MAAOrB,MAAKkuB,gBAC7C,SAAc/f,GACZ,GAAIgJ,EAAAA,aAAehJ,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAMggB,IAA6BhgB,EAErCnO,MAAKkuB,WAAa/f,mCAQpBxK,OAAFC,eACMkqB,EADNzsB,UAAA,oBAAE,WAC8B,MAAOrB,MAAKouB,mBAC1C,SAAiBC,GAAcruB,KAAKouB,cAAgB9c,EAAAA,sBAAsB+c,oCAU1EP,EAAFzsB,UAAAitB,SAAE,SAASC,GACP,IAAKA,EAASC,GACZ,KAAMC,KAGR,IAAIzuB,KAAK+tB,UAAUW,IAAIH,EAASC,IAC9B,KAAMG,IAAgCJ,EAASC,GAEjDxuB,MAAK+tB,UAAUa,IAAIL,EAASC,GAAID,IAOlCT,EAAFzsB,UAAAwtB,WAAE,SAAWN,GACTvuB,KAAK+tB,UAAUe,OAAOP,EAASC,KAIjCV,EAAFzsB,UAAAwe,KAAE,SAAK0O,GACCvuB,KAAK0U,QAAU6Z,EAASC,IAC1BxuB,KAAK0U,OAAS6Z,EAASC,GACvBxuB,KAAKmO,UAAYogB,EAASN,MAAQM,EAASN,MAAQjuB,KAAKiuB,OAExDjuB,KAAKmO,UAAYnO,KAAK+uB,qBAAqBR,GAG7CvuB,KAAKghB,WAAWxb,MAAMkP,OAAQ1U,KAAK0U,OAAQvG,UAAWnO,KAAKmO,aAI7D2f,EAAFzsB,UAAA0tB,qBAAE,SAAqBR,GACnB,IAAKA,EAAY,MAAO,EAG5B,IAAUS,GAAwC,MAAzBT,EAASS,aAAuBT,EAASS,aAAehvB,KAAKgvB,aAC9EC,EAAqBC,GAAsBX,EAASN,OAASjuB,KAAKiuB,MAAOe,GAGzEG,EAAqBF,EAAmBtO,QAAQ3gB,KAAKmO,WAAa,CAEtE,OADIghB,IAAsBF,EAAmBzsB,SAAU2sB,EAAqB,GACrEF,EAAmBE,IAG5BrB,EAAFzsB,UAAAmiB,SAAE,WACExjB,KAAKovB,oBAGPtB,EAAFzsB,UAAAiiB,YAAE,WACEtjB,KAAK6S,cAAc/O,QAGrBgqB,EAAFzsB,UAAAiL,YAAE,WACEtM,KAAK6S,cAAc7N,2BAvGvBzH,KAACiB,EAAAA,UAADV,OACEW,SAAU,YACVO,SAAU,UACV4I,QAAS,mDAWX8M,SAAAnX,KAAGS,EAAAA,MAAHF,MAAS,mBAMTmwB,QAAA1wB,KAAGS,EAAAA,MAAHF,MAAS,kBAGTqQ,YAAA5Q,KAAGS,EAAAA,MAAHF,MAAS,sBAcTkxB,eAAAzxB,KAAGS,EAAAA,MAAHF,MAAS,yBAMTkjB,aAAAzjB,KAAGoJ,EAAAA,OAAH7I,MAAU,oBA8DVgwB,GApG6BF,IClDvByB,GAA4BC,GAAmBC,SAAW,IAC9BC,GAAgBC,eAMrCC,IASXC,UAAWpW,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmB7L,EAAAA,OAAOC,UAAW,qBAE3C4L,EAAAA,MAAM,oBAAqB7L,EAAAA,OAAOC,UAAW,sBAC7C8L,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ0V,OAInDO,YAAarW,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmB7L,EAAAA,OAAOC,UAAW,oBAC3C4L,EAAAA,MAAM,oBAAqB7L,EAAAA,OAAOC,UAAW,mBAC7C8L,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ0V,OAInDQ,aAActW,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmB7L,EAAAA,OAAOC,UAAW,mBAC3C4L,EAAAA,MAAM,oBAAqB7L,EAAAA,OAAOC,UAAW,oBAC7C8L,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ0V,OAInDS,aAAcvW,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyC7L,EAAAA,OAAOqa,QAAS,KAC/DxO,EAAAA,MAAM,kCAAmC7L,EAAAA,OAAOqa,QAAS,OACzDxO,EAAAA,MAAM,4EACF7L,EAAAA,OAAOqa,QAAS,KAEpBtO,EAAAA,WAAW,yDAA0DC,EAAAA,QAAQ,QAC7ED,EAAAA,WAAW,UAAWC,EAAAA,QAAQ0V,OAUhCU,cAAexW,EAAAA,QAAQ,iBAErBG,EAAAA,WAAW,yCACPC,EAAAA,QAAQ0V,GAA2BW,EAAAA,WACjCriB,EAAAA,OAAOC,UAAW,qBAClBD,EAAAA,OAAOC,UAAW,sBAGxB8L,EAAAA,WAAW,yCACPC,EAAAA,QAAQ0V,GAA2BW,EAAAA,WACjCriB,EAAAA,OAAOC,UAAW,kBAClBD,EAAAA,OAAOC,UAAW,wBAGxB8L,EAAAA,WAAW,uCACPC,EAAAA,QAAQ0V,GAA2BW,EAAAA,WACjCriB,EAAAA,OAAOC,UAAW,oBAClBD,EAAAA,OAAOC,UAAW,sBAGxB8L,EAAAA,WAAW,uCACPC,EAAAA,QAAQ0V,GAA2BW,EAAAA,WACjCriB,EAAAA,OAAOC,UAAW,kBAClBD,EAAAA,OAAOC,UAAW,yBAExB4L,EAAAA,MAAM,yEACF7L,EAAAA,OAAOC,UAAW,mBACtB4L,EAAAA,MAAM,qCACF7L,EAAAA,OAAOC,UAAW,sBACtB4L,EAAAA,MAAM,kCACF7L,EAAAA,OAAOC,UAAW,uBAIxBqiB,cAAe1W,EAAAA,QAAQ,iBACrBG,EAAAA,WAAW,WACTwW,EAAAA,MAAM,KAAMC,EAAAA,gBAAiB/W,UAAU,SC9F7CgX,GAAA,WAAA,QAAAA,KAMWpwB,KAAXmE,QAAoC,GAAI0E,GAAAA,QAGtC7I,KAAFqwB,gBAAoB,SAAC7B,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeAjxB,KAAC8vB,EAAAA,WAADvvB,OAAaykB,WAAY,8GAfzB6N,KAkCaE,IAEXnzB,QAASizB,GACTG,OAAQ,GAAI1gB,GAAAA,SAAY,GAAI6d,GAAAA,SAAY0C,KACxCI,WAAYC,kBCPd,QAAAC,MAAgC,MAAhCA,MACaC,GACTvpB,EAAcspB,IAoClBE,GAAA,SAAAtyB,GAqEE,QAAFsyB,GAAqBC,EACP/U,EACmB+E,EAERiQ,GAJvB,GAAFhxB,GASIxB,EAAJgF,KAAAtD,OAAAA,IAEI,IAXiBF,EAArB+wB,MAAqBA,EAEY/wB,EAAjC+gB,MAAiCA,EAER/gB,EAAzBgxB,WAAyBA,EAvCvBhxB,EAAFixB,oBAAgC,EAU9BjxB,EAAFkxB,gBAAmC,GAKjClxB,EAAFmxB,4BAA+B,EASpBnxB,EAAXiwB,cAA+C,SAsBtClP,EACH,KAAMqQ,YAGRpxB,GAAKqxB,sBAAwB5sB,EAAAA,MAAMsc,EAAMG,WAAYH,EAAMhO,cAAege,EAAM1sB,SAC3ElC,UAAU,WACLnC,EAAKsxB,aACPtxB,EAAKuxB,yBAIFvxB,EAAKsxB,aAAetxB,EAAKwxB,YAA0C,WAA5BxxB,EAAKwxB,WAAWhsB,UAC1DxF,EAAKmxB,4BAA6B,EAClCnxB,EAAKyxB,8BAA8BhW,UAAW,SAAUjW,QAASxF,EAAKkxB,mBAGxElV,EAAkB3R,mBAhC5B,MAtCmC5L,GAAnCqyB,EAAAtyB,GAsCEqF,OAAFC,eACMgtB,EADNvvB,UAAA,oBAAE,WAC8B,MAAOrB,MAAKouB,mBAC1C,SAAiBC,GAAKruB,KAAKouB,cAAgB9c,EAAAA,sBAAsB+c,oCAkCjEuC,EAAFvvB,UAAAmiB,SAAE,YACOxjB,KAAKwuB,IAAMxuB,KAAK8wB,aACnB9wB,KAAKwuB,GAAKxuB,KAAK8wB,WAAW9W,MAI5Bha,KAAKqxB,wBACLrxB,KAAKuxB,8BACAjsB,QAAStF,KAAKoxB,YAAc,SAAWpxB,KAAKgxB,kBAEjDhxB,KAAK6gB,MAAMyN,SAAStuB,OAGtB4wB,EAAFvvB,UAAAiL,YAAE,WACEtM,KAAK6gB,MAAMgO,WAAW7uB,MACtBA,KAAKmxB,sBAAsB1e,eAO7Bme,EAAFvvB,UAAAmwB,yBAAE,SAAyBC,GAEnBzxB,KAAK0xB,eAAiBD,IAE1BzxB,KAAK+wB,mBAAqBU,EAErBzxB,KAAKoxB,cACRpxB,KAAKqxB,wBACDrxB,KAAK+wB,mBACP/wB,KAAKuxB,8BAA8BhW,UAAWvb,KAAKgxB,gBAAiB1rB,QAAS,SAE7EtF,KAAKuxB,8BAA8BhW,UAAW,OAAQjW,QAAStF,KAAKgxB,qBAU1EJ,EAAFvvB,UAAAkwB,6BAAE,SAA6BI,GAC3B3xB,KAAKsxB,WAAaK,EAId3xB,KAAKixB,6BACPjxB,KAAKsxB,YAAchsB,QAASqsB,EAAUrsB,WAK1CsrB,EAAFvvB,UAAAkS,aAAE,WACE,IAAIvT,KAAK0xB,cAAT,CAEA1xB,KAAK6gB,MAAMhB,KAAK7f,MAGgB,SAA5BA,KAAKsxB,WAAWhsB,SAAkD,WAA5BtF,KAAKsxB,WAAWhsB,UACxDtF,KAAKixB,4BAA6B,EAKxC,IAAUU,GAAsC3xB,KAAKoxB,aAC5C7V,UAAWvb,KAAKgxB,gBAAiB1rB,QAAS,WAC1CiW,UAAW,SAAUjW,QAAStF,KAAKgxB,gBACxChxB,MAAKuxB,6BAA6BI,GAElC3xB,KAAK+wB,oBAAqB,IAI5BH,EAAFvvB,UAAA+vB,UAAE,WACE,MAAOpxB,MAAK6gB,MAAMnM,QAAU1U,KAAKwuB,KACH,QAAzBxuB,KAAK6gB,MAAM1S,WAAgD,SAAzBnO,KAAK6gB,MAAM1S,YAIpDyiB,EAAFvvB,UAAAuwB,wBAAE,WACE,OAAU5xB,KAAKoxB,YAAc,UAAY,IAAKpxB,KAAKgxB,iBAIrDJ,EAAFvvB,UAAAwwB,mBAAE,WACF,GAAUtW,GAAYvb,KAAKsxB,WAAW/V,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAMvb,KAAKsxB,WAAWhsB,SAajEsrB,EAAFvvB,UAAAgwB,sBAAE,WACErxB,KAAKgxB,gBAAkBhxB,KAAKoxB,YACxBpxB,KAAK6gB,MAAM1S,UACVnO,KAAKiuB,OAASjuB,KAAK6gB,MAAMoN,OAGhC2C,EAAFvvB,UAAAqwB,YAAE,WACE,MAAO1xB,MAAK6gB,MAAM5T,UAAYjN,KAAKiN,UASrC2jB,EAAFvvB,UAAAywB,sBAAE,WACE,MAAK9xB,MAAKoxB,YAEqB,OAAxBpxB,KAAK6gB,MAAM1S,UAAqB,YAAc,aAFrB,qBA1NpC5Q,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,oBACEO,SAAU,gBACVC,SAAU,qiCACVI,QAAF,+oDACEH,MACFiB,UAAA,iBACM4xB,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEA7yB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,OACEiI,QAAF,YACEtB,YACFopB,GAAAC,UACAD,GAAAE,YACIF,GAAkBG,aAClBH,GAAkBI,aAClBJ,GAAkBK,cAClBL,GAAkBO,4FAhEtB1yB,KAAQuwB,GAARlwB,aAAAL,KAAAsS,EAAAA,aAfAtS,SAAEsW,GAAFjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAA,gCAAAP,KAAAsS,EAAAA,cAkIA+gB,EAAAhxB,4FAjBAquB,QAAA1wB,KAAAS,EAAAA,QAGAgxB,eAAAzxB,KAAAS,EAAAA,SAMA4yB,OCtHAwB,GAAA,WAAA,QAAAA,MAM4B,sBAN5B70B,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUE,EAAAA,cACVE,SAAUgtB,GAAS8C,IACnB7vB,cAAe+sB,GAAS8C,IACxBlyB,WAAY4xB,QAEd8B,KCVAzV,GAAA,SAAAre,GAAA,QAAAqe,oDAGgD,MAAdpe,GAAlCoe,EAAAre,kBAHAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,qBAEZke,GAAkC0V,EAAAA,cCDlCC,GAAA,WAAA,QAAAA,KAMWtyB,KAAXmE,QAAoC,GAAI0E,GAAAA,QAGtC7I,KAAFuyB,cAA0B,WAtB1B,sBAaAh1B,KAAC8vB,EAAAA,WAADvvB,OAAaykB,WAAY,8GAbzB+P,KAgCa1V,IACXzf,QAASm1B,GACT/B,OAAQ,GAAI1gB,GAAAA,SAAY,GAAI6d,GAAAA,SAAY4E,KACxC9B,WAAYgC,I/BTdxZ,GAAA,SAAA1a,GAuCE,QAAF0a,GACW6X,EACC1b,EACRzP,EACAoW,GAJF,GAAFhc,GAKIxB,EALJgF,KAAAtD,KAKU0F,IALV1F,WACWF,GAAX+wB,MAAWA,EACC/wB,EAAZqV,cAAYA,EAIRA,EAAcK,QAAQ9P,GAAa,GACnC5F,EAAK2yB,kBAAoB5B,EAAM1sB,QAAQlC,UAAU,WAAM,MAAA6Z,GAAkB3R,mBAT7E,MAzBmC5L,GAAnCya,EAAA1a,GAqCE0a,EAAF3X,UAAAiL,YAAE,WACEtM,KAAKyyB,kBAAkBhgB,cACvBzS,KAAKmV,cAAcU,eAAe7V,KAAK0F,cAIzCsT,EAAF3X,UAAAqxB,aAAE,WACE,MAAO1yB,MAAK2yB,gBAAiBhW,IAAe,KAAO3c,KAAK2yB,OAI1D3Z,EAAF3X,UAAAuxB,eAAE,WACE,MAAO5yB,MAAK2yB,gBAAiBhW,IAAe3c,KAAK2yB,MAAQ,MAI3D3Z,EAAF3X,UAAAwxB,gBAAE,WACE,MAAO7yB,MAAK0F,YAAYC,eAI1BqT,EAAF3X,UAAAyxB,gBAAE,WACE,OACEzwB,MAAOrC,KAAKqC,MACZqS,OAAQ1U,KAAK0U,OACb0E,SAAUpZ,KAAKoZ,WAInBJ,EAAF3X,UAAA0xB,wBAAE,SAAwBvZ,GACtB,MAAa,UAATA,EACK,IAAGxZ,KAAKqC,MAAQ,GAEZ,QAATmX,EACK,SAEI,SAATA,EACK,UAEFA,kBAxFXjc,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,kBACEQ,SAAU;2pCACVI,QAAF,40BACEH,MACFC,MAAA,kBACMC,KAAN,OAEAE,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,+EAbApC,KAAQC,EAAAA,aAbRD,KAAQkJ,EAAAA,qBAGRuS,EAAApZ,8DA+BAqZ,eAAA1b,KAAAS,EAAAA,QAGAkb,gBAAA3b,KAAAS,EAAAA,QAGAqE,QAAA9E,KAAAS,EAAAA,QAGAmb,WAAA5b,KAAAS,EAAAA,QAGA0W,SAAAnX,KAAAS,EAAAA,QAGAob,WAAA7b,KAAGS,EAAAA,SAMHgb,oBC3CaK,IAKXC,yBAA0BC,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAY7L,EAAAA,OAAOC,UAAW,2BAA4B6L,WAAY,YAC5ED,EAAAA,MAAM,UAAW7L,EAAAA,OAAOC,UAAW,OAAQ6L,WAAY,aACvDD,EAAAA,MAAM,OAAQ7L,EAAAA,OAAOC,UAAW,0BAA2B6L,WAAY,YACvEC,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/BC,uBAAwBL,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAY7L,EAAAA,OAAOyF,OAAQ,MAAOqG,WAAY,YACpDD,EAAAA,MAAM,OAAQ7L,EAAAA,OAAOyF,OAAQ,MAAOqG,WAAY,YAChDD,EAAAA,MAAM,UAAW7L,EAAAA,OAAOyF,OAAQ,IAAKqG,WAAY,aACjDC,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,4CCbxCE,GAAA,WAOE,QAAFA,GAAqBC,GAAA9Z,KAArB8Z,YAAqBA,EACrB,sBARAvc,KAACiB,EAAAA,UAADV,OACEW,SAAU,sEAjBZlB,KAA0Bwc,EAAAA,iCAqB1BC,OAAAzc,KAAGS,EAAAA,MAAHF,MAAS,qBAGT+b,KCiBAI,GAAA,SAAA3b,GAcE,QAAF2b,GAAoDC,EAClBC,EACwBC,GAFxD,GAAFta,GAGIxB,EAHJgF,KAAAtD,KAGUka,EAASE,IAHnBpa,WACkCF,GAAlCqa,mBAAkCA,IAJlC,MAF6B5b,GAA7B0b,EAAA3b,GAYE2b,EAAF5Y,UAAAgZ,aAAE,SAAaC,EAA6BC,GAC5C,GAAUC,GAAqBxa,KAAKma,mBAAmBE,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAW1a,KAAK2a,WAE/D,OAAOH,IAAsBC,kBA7BjCld,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,WACEQ,SAAU,uDACVP,YAAFvB,QAAAyd,GAAAvd,YAAA4c,IACE3a,cAAFC,EAAAA,kBAAAC,KACER,SAAF,UACES,gBAAFC,EAAAA,wBAAAC,0KASApC,SAA6DsW,GAA7DjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAA+c,EAAAA,6BAEAZ,EAAAra,6DALAqa,cAIca,GAAd,SAAAxc,GAmBA,QAAAwc,KAGA,GAAAhb,GAAA,OAAAxB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,oGAWA,kEAQAA,MAAA+a,OAAA5Y,QAAA,SAAAiN,GAAA,GAAA4K,GAAA5K,EAAA4K,KAAAF,EAAA1K,EAAA0K,WACQ,OAAOha,GAAfkb,eAA4ChB,GAA5CF,IAAiD9Z,KAAjDib,OAAA9W,QAAApC,KAAA0H,EAAAA,UAAAzJ,KAAA4I,aAAA3G,UAAA,WAAA,MAAAnC,GAAAob,kBAEIlb,KAAJmb,eAAApZ,KAKMqZ,EAAAA,qBAAN,SAAAC,EAAAC,GAAA,MAAAD,GAAAE,YAAAD,EAAAC,WAAAF,EAAA/V,UAAAgW,EAAAhW,UAAAmE,EAAAA,UAAAzJ,KAAA4I,aAAA3G,UAAA,SAAAkD,GACA,YAAAA,EAAA,SACArF,EAAAqR,cAAA3L,UAMAsV,EAAAld,aACAL,KAAAiB,EAAAA,UAAAV,mCArCAgd,EAAAlb,0GAGAmb,SAAAxd,KAAAW,EAAAA,gBAAeJ,MAAf+b,MAGA1I,gBAAA5T,KAAAoJ,EAAAA,UAMAmU,iBAMEU,GAAF,SAAAld,GAsBA,QAAAkd,KAmBA,GAAA1b,GAAA,OAAAxB,GAAAA,EAAAyB,MAAoDC,KAApDC,YAAAD,iEAIAzC,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,yDAvBAQ,SAAA,64CACEI,QAAF,6kGACEuI,QAAF,iBACE1I,MACFC,MAAe,yBACfsc,yCAAA,yBACAC,4CAAA,4BACMC,mBAAN,aACIvc,KAAJ,WAEAkH,YAAA+S,GAAAC,0BACA5a,YAAAvB,QAAA2d,GAAAzd,YAAAme,IACAlc,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGA6b,EAAA5b,gBACAgc,gBAAAre,KAAAS,EAAAA,gBAIA6d,GAAA,SAAAvd,GAAE,QAAFud,GAAA5V,EAAA6V,EAIAxU,EAAA4P,GAiBA,GAAApX,GAAAxB,EAAAgF,KAAAtD,KAAAiG,EAAA6V,EAAAxU,EAAA4P,IAAAlX,IAIA,OAHAF,GAAAic,aAAA,WAGAjc,gBAHA+b,EAAAje,aAOAL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,qDACAQ,SAAA,24IA1BA2I,QAAA,iBACE1I,MACFC,MAAA,uBACAwc,mBAAA,WACAvc,KAAA,WAEEkH,YAAF+S,GAAAO,wBACElb,YAAFvB,QAAA2d,GAAAzd,YAAAwe,IACAvc,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAkc,EAAAG,eAAA,WAAA,QACAze,KAAAqS,EAAAA,eAAAhS,aAAAL,KAAmCsS,EAAAA,aACnCtS,KAAAkJ,EAAAA,oBACAlJ,KAAAC,EAAAA,8EA9JAsd,ICKAmB,GAAA,SAAA3d,GAAA,QAAA2d,oDASoD,MAAhB1d,GAApC0d,EAAA3d,kBATAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,yBACVS,MACEiB,UAAW,kBACX+b,SAAU,QAEZtU,QAAS,QACTlJ,YAAavB,QAASgf,EAAAA,WAAY9e,YAAayd,SAEjDmB,GAAoCG,EAAAA,gBAGpCC,GAAA,SAAA/d,GAAA,QAAA+d,oDAS4D,MAApB9d,GAAxC8d,EAAA/d,kBATAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,6BACVS,MACEiB,UAAW,sBACX+b,SAAU,QAEZtU,QAAS,QACTlJ,YAAavB,QAASgf,EAAAA,WAAY9e,YAAayd,SAEjDuB,GAAwCC,EAAAA,oBCXxCC,GAAA,WAAA,QAAAA,MAmC+B,sBAnC/Bhf,KAACkD,EAAAA,SAAD3C,OACE4C,SACEG,GACAD,EAAAA,aACAwV,EAAAA,aACAoG,GACAC,EAAAA,iBACAC,GACArG,IAEFvV,SACED,GACA2a,GACAK,GACA5B,GACA0C,GACA7B,GACAmB,GACAI,GACArD,GACAa,IAEF9Y,cACEya,GACAK,GACA5B,GACA0C,GACA7B,GACAmB,GACAI,GACArD,GACAa,IAEFnb,WAAYke,GAA2BhC,QAEzC2B,KC5CAM,GAAA,SAAAve,GAAA,QAAAue,KAAA,GAAA/c,GAAA,OAAAxB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,WAcYF,GAAZgd,eAA6B,qBAH7B,MACiCve,GAAjCse,EAAAve,kBAZAf,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,8BACEO,SAAU,WACVC,SAAU8d,EAAAA,mBACV1d,QAAF,+wDACEH,MACFC,MAAA,aAEAG,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAkd,eCJAG,GAAA,SAAA1e,GAAA,QAAA0e,oDAI4C,MAAZze,GAAhCye,EAAA1e,kBAJAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,eACVC,YAAavB,QAAS8f,EAAAA,WAAY5f,YAAa2f,QAEjDA,GAAgCC,EAAAA,YAMhCC,GAAA,SAAA5e,GAAA,QAAA4e,oDAIwD,MAAlB3e,GAAtC2e,EAAA5e,kBAJAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,qBACVC,YAAavB,QAASggB,EAAAA,iBAAkB9f,YAAa6f,QAEvDA,GAAsCC,EAAAA,kBAMtCC,GAAA,SAAA9e,GAAA,QAAA8e,oDAIwD,MAAlB7e,GAAtC6e,EAAA9e,kBAJAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,qBACVC,YAAavB,QAASkgB,EAAAA,iBAAkBhgB,YAAa+f,QAEvDA,GAAsCC,EAAAA,kBAMtCC,GAAA,SAAAhf,GAAA,QAAAgf,oDAgBA,MATkC/e,GAAlC+e,EAAAhf,kBAPAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,iBACVC,YACGvB,QAASogB,EAAAA,aAAclgB,YAAaigB,IACpCngB,QAAS,6BAA8BE,YAAaigB,0BAKzDtD,OAAAzc,KAAGS,EAAAA,MAAHF,MAAS,kBAGT0f,SAAAjgB,KAAGS,EAAAA,QAGHyf,YAAAlgB,KAAGS,EAAAA,SACHsf,GATkCC,EAAAA,cAYlCG,GAAA,SAAApf,GAQE,QAAFof,GAAcC,EACArW,GADZ,GAAFxH,GAEIxB,EAFJgF,KAAAtD,KAEU2d,EAAWrW,IAFrBtH,WAGIsH,GAAW3B,cAAc+L,UAAUG,IAAI,cAAc8L,EAAUC,wBAEnE,MANmCrf,GAAnCmf,EAAApf,kBAPAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,uCACVS,MACEC,MAAS,kBACTC,KAAQ,wDA9DZ7B,KAAEggB,EAAAA,eAJFhgB,KAAmBC,EAAAA,cA2EnBkgB,GANmCG,EAAAA,eASnCC,GAAA,SAAAxf,GAQE,QAAFwf,GAAcH,EACArW,GADZ,GAAFxH,GAEIxB,EAFJgF,KAAAtD,KAEU2d,EAAWrW,IAFrBtH,WAGIsH,GAAW3B,cAAc+L,UAAUG,IAAI,cAAc8L,EAAUC,wBAEnE,MANmCrf,GAAnCuf,EAAAxf,kBAPAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,uCACVS,MACEC,MAAS,kBACTC,KAAQ,oDA9EZ7B,KAAEggB,EAAAA,eAJFhgB,KAAmBC,EAAAA,cA2FnBsgB,GANmCC,EAAAA,eASnCC,GAAA,SAAA1f,GAQE,QAAF0f,GAAcL,EACArW,GADZ,GAAFxH,GAEIxB,EAFJgF,KAAAtD,KAEU2d,EAAWrW,IAFrBtH,WAGIsH,GAAW3B,cAAc+L,UAAUG,IAAI,cAAc8L,EAAUC,wBAEnE,MAN6Brf,GAA7Byf,EAAA1f,kBAPAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,yBACVS,MACEC,MAAS,WACTC,KAAQ,oDA9FZ7B,KAAEggB,EAAAA,eAJFhgB,KAAmBC,EAAAA,cA2GnBwgB,GAN6BC,EAAAA,SCnF7BC,GAAA,SAAA5f,GAAA,QAAA4f,oDAKsD,MAAjB3f,GAArC2f,EAAA5f,kBALAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,oBACVC,YAAavB,QAASghB,EAAAA,gBAAiB9gB,YAAa6gB,IACpDtW,QAAS,2BAA4B,qCAEvCsW,GAAqCC,EAAAA,iBAMrCC,GAAA,SAAA9f,GAAA,QAAA8f,oDAKsD,MAAjB7f,GAArC6f,EAAA9f,kBALAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,oBACVC,YAAavB,QAASkhB,EAAAA,gBAAiBhhB,YAAa+gB,IACpDxW,QAAS,2BAA4B,qCAEvCwW,GAAqCC,EAAAA,iBAOrCC,GAAA,SAAAhgB,GAAA,QAAAggB,oDAKgD,MAAd/f,GAAlC+f,EAAAhgB,kBALAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,cACVC,YAAavB,QAASohB,EAAAA,UAAWlhB,YAAaihB,IAC9C1W,QAAS,4BAA6B,2BAExC0W,GAAkCC,EAAAA,WAGlCC,GAAA,SAAAlgB,GAAA,QAAAkgB,oDAYA,MACkCjgB,GAAlCigB,EAAAlgB,kBAbAf,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,qCACEQ,SAAUwf,EAAAA,iBACVvf,MACFC,MAAA,iBACMC,KAAN,OAEAK,gBAAiBC,EAAAA,wBAAjBC,OACAL,cAAAC,EAAAA,kBAAAC,KACER,SAAF,eACEN,YAAFvB,QAAAuhB,EAAAA,aAAuCrhB,YAAvCmhB,QAGAA,kCAIA,QAAAG,KAaA,MAAA,QAAArgB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,KAHA,6BAGAzC,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,iEAbAS,MACAC,MAAA,iBACAC,KAAA,OAEEK,gBAAFC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,KACAR,SAAU,eACVN,YAAAvB,QAAAyhB,EAAAA,aAAAvhB,YAAAshB,QAGAA,GACAC,EAAAA,cAEAC,GAAA,SAAAvgB,+DAWA,cAK4BugB,EAA5BjhB,aAbAL,KAAAwB,EAAAA,UAAAjB,OAAAW,SAAA,mDAaAS,sBAbAE,KAAA,OAEEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACER,SAAF,SACAN,YAAAvB,QAAA2hB,EAAAA,OAAAzhB,YAAAwhB,QAGAA,GACAC,EAAAA,QCnEMC,IAEJlC,GAGAK,GACAgB,GACAZ,GACAN,GACAsB,GACAlB,GACAgB,GAGAV,GACAM,GACAF,GAGAU,GACAK,GACAF,IAGFK,GAAA,WAAA,QAAAA,MAK6B,sBAL7BzhB,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUue,EAAAA,eAAgBre,EAAAA,aAAcC,IACxCC,QAASie,GACThe,aAAcge,OAEhBC,KCjCME,GAAmB,gCAwKvB,QAAFC,GAAc9b,OAAd,KAAAA,IAAcA,KAAZ,IAAFvD,GACIxB,EADJgF,KAAAtD,OAAAA,WAzJmBF,GAAnBsf,YAAiC,GAAI5b,GAAAA,oBAGlB1D,EAAnBuf,QAA6B,GAAI7b,GAAAA,gBAAwB,IAGtC1D,EAAnBwf,qBAA0C,GAAIzW,GAAAA,QAM5C/I,EAAFyf,2BAA+B3O,EAAAA,aAAaC,MA0D1C/Q,EAAF0f,oBACM,SAACzb,EAAS0b,GAChB,GAAU5b,GAAQ,EAA+B4b,EAE7C,IAAIC,EAAAA,eAAe7b,GAAQ,CAC/B,GAAY8b,GAAcjH,OAAO7U,EAI3B,OAAO8b,GAAcT,GAAmBS,EAAc9b,EAGxD,MAAOA,IAYT/D,EAAF8f,SAAkD,SAAC7b,EAAW8b,GAC9D,GAAUnL,GAASmL,EAAKnL,OACdvG,EAAY0R,EAAK1R,SACvB,OAAKuG,IAAuB,IAAbvG,EAERpK,EAAK8b,KAAK,SAACC,EAAGC,GACzB,GAAUC,GAASlgB,EAAK0f,oBAAoBM,EAAGpL,GACrCuL,EAASngB,EAAK0f,oBAAoBO,EAAGrL,GAMrCwL,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAb/R,EAAqB,GAAK,KAxBdpK,GAsC3CjE,EAAFqgB,gBAA4D,SAACpc,EAAS0T,GAEtE,GAAU2I,GAAUzc,OAAO0c,KAAKtc,GAAMuc,OAAO,SAACC,EAAqBC,GAO7D,MAAOD,GAAc,EAA+BC,GAAO,KAC1D,IAAIC,cAGDC,EAAoBjJ,EAAOK,OAAO2I,aAExC,QAA8C,GAAvCL,EAAQO,QAAQD,IAKvB5gB,EAAK4D,MAAQ,GAAIF,GAAAA,gBAAqBH,GACtCvD,EAAK8gB,8BAqHT,MAtR2CriB,GAA3C4gB,EAAA7gB,GA4BEqF,OAAFC,eAAMub,EAAN9d,UAAA,YAAE,WAAa,MAAOrB,MAAK0D,MAAMG,WAC/B,SAASE,GAAa/D,KAAK0D,MAAMI,KAAKC,oCAMtCJ,OAAFC,eAAMub,EAAN9d,UAAA,cAAE,WAAuB,MAAOrB,MAAKqf,QAAQxb,WAC3C,SAAW4T,GAAkBzX,KAAKqf,QAAQvb,KAAK2T,oCAM/C9T,OAAFC,eAAMub,EAAN9d,UAAA,YAAE,WAA6B,MAAOrB,MAAK6gB,WACzC,SAAShB,GACP7f,KAAK6gB,MAAQhB,EACb7f,KAAK4gB,6DAcPjd,OAAFC,eAAMub,EAAN9d,UAAA,iBAAE,WAAuC,MAAOrB,MAAK8gB,gBACnD,SAAcC,GACZ/gB,KAAK8gB,WAAaC,EAClB/gB,KAAK4gB,6DA2GPzB,EAAF9d,UAAAuf,0BAAE,WAAA,GAAF9gB,GAAAE,KAOUghB,EAAyChhB,KAAK6gB,MAChDtc,EAAAA,MAAiBvE,KAAK6gB,MAAMG,WAAYhhB,KAAK6gB,MAAMI,aACnDzV,EAAAA,GAAa,MACX0V,EAA8ClhB,KAAK8gB,WACrDvc,EAAAA,MACEvE,KAAK8gB,WAAWK,KAAMnhB,KAAKsf,qBAAsBtf,KAAK8gB,WAAWG,aACnEzV,EAAAA,GAAa,MACX4V,EAAaphB,KAAK0D,MAElB2d,EAAeC,EAAAA,cAAcF,EAAYphB,KAAKqf,SACjDtd,KAAKyC,EAAAA,IAAI,SAAC4K,GAAjB,GAAkBrL,GAAlBqL,EAAA,EAA4B,OAAAtP,GAAKyhB,YAAYxd,MAEnCyd,EAAcF,EAAAA,cAAcD,EAAcL,GAC7Cjf,KAAKyC,EAAAA,IAAI,SAAC4K,GAAjB,GAAkBrL,GAAlBqL,EAAA,EAA4B,OAAAtP,GAAK2hB,WAAW1d,MAElC2d,EAAgBJ,EAAAA,cAAcE,EAAaN,GAC9Cnf,KAAKyC,EAAAA,IAAI,SAAC4K,GAAjB,GAAkBrL,GAAlBqL,EAAA,EAA4B,OAAAtP,GAAK6hB,UAAU5d,KAEvC/D,MAAKuf,2BAA2B9M,cAChCzS,KAAKuf,2BAA6BmC,EAAczf,UAAU,SAAA8B,GAAQ,MAAAjE,GAAKsf,YAAYtb,KAAKC,MAQ1Fob,EAAF9d,UAAAkgB,YAAE,SAAYxd,GAAZ,GAAFjE,GAAAE,IASI,OALAA,MAAKqhB,aACArhB,KAAKyX,OAAgB1T,EAAK0T,OAAO,SAAAmK,GAAO,MAAA9hB,GAAKqgB,gBAAgByB,EAAK9hB,EAAK2X,UAAzD1T,EAEf/D,KAAK+gB,WAAa/gB,KAAK6hB,iBAAiB7hB,KAAKqhB,aAAa7e,QAEvDxC,KAAKqhB,cAQdlC,EAAF9d,UAAAogB,WAAE,SAAW1d,GAET,MAAK/D,MAAK6f,KAEH7f,KAAK4f,SAAS7b,EAAKxB,QAASvC,KAAK6f,MAFf9b,GAS3Bob,EAAF9d,UAAAsgB,UAAE,SAAU5d,GACR,IAAK/D,KAAK+gB,UAAa,MAAOhd,EAElC,IAAU+d,GAAa9hB,KAAK+gB,UAAUgB,UAAY/hB,KAAK+gB,UAAUiB,QAC7D,OAAOje,GAAKxB,QAAQ0f,OAAOH,EAAY9hB,KAAK+gB,UAAUiB,WAQxD7C,EAAF9d,UAAAwgB,iBAAE,SAAiBK,GAAjB,GAAFpiB,GAAAE,IACIkS,SAAQC,UAAUC,KAAK,WAC3B,GAAY2O,GAAYjhB,EAAKihB,SAEvB,IAAKA,IAELA,EAAUve,OAAS0f,EAGfnB,EAAUgB,UAAY,GAAG,CACnC,GAAcI,GAAgBtU,KAAKuU,KAAKrB,EAAUve,OAASue,EAAUiB,UAAY,GAAK,EACxEK,EAAexU,KAAK2B,IAAIuR,EAAUgB,UAAWI,EAE/CE,KAAiBtB,EAAUgB,YAC7BhB,EAAUgB,UAAYM,EAItBviB,EAAKwf,qBAAqBxb,YAUlCqb,EAAF9d,UAAA4C,QAAE,WAAY,MAAOjE,MAAKof,aAMxBD,EAAF9d,UAAAoD,WAAE,aACF0a,GAtR2Cza,EAAAA,YChB9B4d,GACX,GAAInS,GAAAA,eAAqC,uBACvCoS,WAAY,OACZC,QAASC,KAoBb9L,GAAA,WAOE,QAAFA,GACYjR,EACA8C,EACiCka,GAFjC1iB,KAAZ0F,YAAYA,EACA1F,KAAZwI,QAAYA,EACiCxI,KAA7C0iB,kBAA6CA,EAwC7C,MAjCE/L,GAAFtV,UAAA6N,eAAE,SAAe5F,GAAf,GAAFxJ,GAAAE,IACIA,MAAK4U,OAEgC,mBAA1B7I,uBACT/L,KAAKwI,QAAQmB,kBAAkB,WAC7BoC,sBAAsB,WAAM,MAAAjM,GAAK6iB,WAAWrZ,OAG9CtJ,KAAK2iB,WAAWrZ,IAKpBqN,EAAFtV,UAAAuT,KAAE,WACE5U,KAAK0F,YAAYC,cAAcgI,MAAM8L,WAAa,WAIpD9C,EAAFtV,UAAAwT,KAAE,WACE7U,KAAK0F,YAAYC,cAAcgI,MAAM8L,WAAa,UAO5C9C,EAAVtV,UAAAshB,WAAE,SAAmBrZ,GACrB,GAAUsZ,GAAY5iB,KAAK0iB,kBAAkBpZ,GACnCuZ,EAAsB7iB,KAAK0F,YAAYC,aAE7Ckd,GAAOlV,MAAMmV,KAAOF,EAAUE,KAC9BD,EAAOlV,MAAMoV,MAAQH,EAAUG,sBAhDnCxlB,KAACiB,EAAAA,UAADV,OACEW,SAAU,cACVS,MACEC,MAAS,uDAvCb5B,KAAmBC,EAAAA,aAAnBD,KAAuDuS,EAAAA,SA8CvDvS,SAAAsW,GAAAjW,aAAAL,KAAKuW,EAAAA,OAALhW,MAAYwkB,SAwCZ3L,KCnFAD,GAAA,WAEE,QAAFA,GAAqBzX,GAAAe,KAArBf,SAAqBA,EACrB,sBAHA1B,KAACiB,EAAAA,UAADV,OAAYW,SAAU,0DAHtBlB,KAAmBwc,EAAAA,eAMnBrD,KCFAF,GAAA,SAAAlY,GAAA,QAAAkY,oDAG4C,MAAXjY,GAAjCiY,EAAAlY,kBAHAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,qCAEZ+X,GAAiCwM,EAAAA,yBCgBjC,QAAAC,MAAyB,MAAzBA,MACaC,GACT9b,EAAc6b,IAElBxM,GAAA,SAAAnY,GA6DE,QAAFmY,GAAsB0M,GAApB,GAAFrjB,GACIxB,EADJgF,KAAAtD,OAAAA,WAAsBF,GAAtBqjB,kBAAsBA,EAvCJrjB,EAAlBsjB,UAAsC,GAY5BtjB,EAAVujB,eAAkD,KAQvCvjB,EAAX+S,cAA2B,GAAIhK,GAAAA,QAM7B/I,EAAFiG,SAA4B,KAM1BjG,EAAFuG,OAA0B,KAKxBvG,EAAFwS,UAAa,IA5Bb,MAtB4B/T,GAA5BkY,EAAAnY,GA4BEqF,OAAFC,eAAM6S,EAANpV,UAAA,eAAE,WACE,MAAOrB,MAAKqjB,gDA2Bd5M,EAAFpV,UAAAiiB,YAAE,SAAYnf,IACNA,EAAQof,eAAe,cAAgBpf,EAAQof,eAAe,cAChEvjB,KAAK6S,cAAc/O,QAIvB2S,EAAFpV,UAAAiL,YAAE,WACEtM,KAAK6S,cAAc7N,YAGrByR,EAAFpV,UAAAmiB,SAAE,WACExjB,KAAKqjB,eAAiB,GAAII,GAAAA,eACtBzjB,KAAK0jB,kBAAoB1jB,KAAK2jB,iBAAkB3jB,KAAKmjB,mCA7E7D5lB,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,UACEQ,SAAU,uDACV2I,QAAF,YACEnI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACER,SAAF,4EApBAyX,EAAA7W,wIA0BA+jB,mBAAApmB,KAAAuJ,EAAAA,UAAAhJ,MAAgBic,EAAAA,eAKhBqJ,YAAA7lB,KAAAS,EAAAA,MAAGF,MAAH,WAGA8lB,YAAArmB,KAAAS,EAAAA,MAAGF,MAAH,gBAGA+lB,iBAAAtmB,KAAQS,EAAAA,MAARF,MAAA,sBASA2Y,OC9CalQ,IAIXC,aAAc+S,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyD7L,EAAAA,OAAOC,UAAW,UAMjF4L,EAAAA,MAAM,OAAQ7L,EAAAA,OAAOC,UAAW,2BAA4BkW,UAAW,SACvEtK,EAAAA,MAAM,QAAS7L,EAAAA,OAAOC,UAAW,0BAA2BkW,UAAW,SAEvEpK,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yDACZD,EAAAA,WAAW,8BACT/L,EAAAA,OAAOC,UAAW,6BAClB+L,EAAAA,QAAQ,0DAEVD,EAAAA,WAAW,+BACT/L,EAAAA,OAAOC,UAAW,4BAClB+L,EAAAA,QAAQ,6DxBgBd/C,GAAA,SAAAtY,GASE,QAAFsY,GACImN,EACAC,EAC8CC,GAHhD,GAAFnkB,GAIMxB,EAJNgF,KAAAtD,KAIY+jB,EAA0BC,IAJtChkB,WAGkDF,GAAlDmkB,MAAkDA,EAPxCnkB,EAAVokB,cAA0BtT,EAAAA,aAAaC,MAE7B/Q,EAAVqkB,YAAwBvT,EAAAA,aAAaC,QAgCrC,MApCsCtS,GAAtCqY,EAAAtY,GAcEsY,EAAFvV,UAAAmiB,SAAE,WAAA,GAAF1jB,GAAAE,IACI1B,GAAJ+C,UAAUmiB,SAAVlgB,KAAAtD,MAEIA,KAAKkkB,cAAgBlkB,KAAKikB,MAAM1e,iBAC7BxD,KAAKqiB,EAAAA,UAAUpkB,KAAKikB,MAAM5e,kBAAkBrF,KAAKikB,MAAM9d,aACvDlE,UAAU,SAACmD,GACNA,IAAgBtF,EAAKukB,eACvBvkB,EAAKwkB,OAAOxkB,EAAKmkB,MAAMjd,YAI7BhH,KAAKmkB,YAAcnkB,KAAKikB,MAAMvd,oBAAoBzE,UAAU,WAC1DnC,EAAKykB,YAKT3N,EAAFvV,UAAAiL,YAAE,WACEhO,EAAJ+C,UAAUiL,YAAVhJ,KAAAtD,MACIA,KAAKkkB,cAAczR,cACnBzS,KAAKmkB,YAAY1R,8BArCrBlV,KAACiB,EAAAA,UAADV,OACEW,SAAU,2DAtCZlB,KAAEinB,EAAAA,2BACFjnB,KAAE8a,EAAAA,mBAgDF9a,KAAyD0H,GAAzDrH,aAAAL,KAAKuW,EAAAA,OAALhW,MAAY2mB,EAAAA,WAAW,WAAM,MAAAxf,YA2B7B2R,GApCsC8N,EAAAA,iBA0CtCzf,GAAA,WA2DE,QAAFA,GAAsBS,EACYI,EAIpBgW,GALZ,GAAFhc,GAAAE,IAAsBA,MAAtB0F,YAAsBA,EACY1F,KAAlC8F,KAAkCA,EA1CxB9F,KAAV2kB,uBAAmC/T,EAAAA,aAAaC,MAM9C7Q,KAAF+E,sBAA0B,GAAI8D,GAAAA,QAGT7I,KAArByF,aAA0D,GAAI2D,GAAAA,aAGzCpJ,KAArBuF,iBAA+D,GAAI6D,GAAAA,aAG9CpJ,KAArB0G,oBAAkE,GAAI0C,GAAAA,aAGjDpJ,KAArB4G,YAAuD,GAAIwC,GAAAA,cAAmB,GAcnEpJ,KAAXiH,kBAAuC,QAgB/BjH,KAAK8F,MAAQgW,IACf9b,KAAK2kB,uBAAyB3kB,KAAK8F,KAAKyF,OAAOtJ,UAAU,SAACgE,GACxDnG,EAAKkG,+BAA+BC,GACpC6V,EAAkB3R,kBAMtBnK,KAAK+E,sBAAsBhD,KAAKqZ,EAAAA,qBAAqB,SAACC,EAAGC,GACvD,MAAOD,GAAEE,YAAcD,EAAEC,WAAaF,EAAE/V,UAAYgW,EAAEhW,WACpDrD,UAAU,SAAAkD,GAERrF,EAAKuF,kBAAkBF,EAAMG,UAAYxF,EAAKuF,kBAAkBvF,EAAKqG,YACvErG,EAAK8G,YAAYpB,OAGf1F,EAAKuF,kBAAkBF,EAAMoW,aAAezb,EAAKuF,kBAAkBvF,EAAKqG,YAC1ErG,EAAK4G,oBAAoBlB,SA/BjC,MAAE7B,QAAFC,eACMqB,EADN5D,UAAA,gBAAE,SACa0E,GACX/F,KAAKkG,eAAiBH,EACtB/F,KAAKgG,kEAqCPf,EAAF5D,UAAAmiB,SAAE,WACwB,UAAlBxjB,KAAKmG,WAAwC,MAAfnG,KAAKqG,SACrCrG,KAAKmG,UAAYnG,KAAKoG,+BAI1BnB,EAAF5D,UAAAiL,YAAE,WACEtM,KAAK2kB,uBAAuBlS;0CAC5BzS,KAAK+E,sBAAsBC,YAG7BC,EAAF5D,UAAA6D,uBAAE,SAAuBC,GACzB,GAAUC,GAAcpF,KAAKqF,kBAAkBF,EAAMG,QACjDtF,MAAKuF,iBAAiBC,KAAKJ,GACvBA,GACFpF,KAAKyF,aAAaD,KAAKxF,KAAK0F,YAAYC,cAAcC,eAK1DX,EAAF5D,UAAAwE,oBAAE,WACE,MAAO7F,MAAK8F,MAA4B,QAApB9F,KAAK8F,KAAKjC,MAAkB,MAAQ,OAI1DoB,EAAF5D,UAAAgE,kBAAE,SAAkBU,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,GAIEd,EAAV5D,UAAA2E,+BAAE,SAAuCC,OAAzC,KAAAA,IAAyCA,EAAiBjG,KAAK6F,uBACvD7F,KAAKkG,eAAiB,EACxBlG,KAAKmG,UAAmB,OAAPF,EAAe,OAAS,QAChCjG,KAAKkG,eAAiB,EAC/BlG,KAAKmG,UAAmB,OAAPF,EAAe,QAAU,OAE1CjG,KAAKmG,UAAY,UAQblB,EAAV5D,UAAA+E,2BAAE,WACF,GAAUH,GAAMjG,KAAK6F,qBAEjB,OAAY,OAAPI,GAAgBjG,KAAKqG,QAAU,GAAc,OAAPJ,GAAgBjG,KAAKqG,OAAS,EAChE,qBAGF,sCAlJX9I,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,eACEQ,SAAU,sSACVI,QAAF,wHACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE2G,YAAaC,GAAfC,cACEtH,MACFC,MAAe,mIA9Ff5B,KAAEkJ,EAAAA,qBAPFxB,EAAArF,kFAyHA8G,sBAAAnJ,KAAAoJ,EAAAA,SAGAC,cAAArJ,KAAAoJ,EAAAA,SAGAE,cAAAtJ,KAAAuJ,EAAAA,UAAAhJ,MAAAiJ,EAAAA,uBAGAC,WAAAzJ,KAAAS,EAAAA,MAAAF,MAAA,aAGAuI,SAAA9I,KAAAS,EAAAA,QAGAiJ,oBAAA1J,KAAAS,EAAAA,QAGA+H,WAAAxI,KAAAS,EAAAA,SAQAiH,mBC/IA,QAAAiC,MAAqC,MAArCA,MACaC,GACTC,EAAcF,IAMlBG,GAAA,SAAA/I,GASE,QAAF+I,GAAqBC,GAAnB,GAAFxH,GACIxB,EADJgF,KAAAtD,OAAAA,WAAqBF,GAArBwH,WAAqBA,IAgBrB,MAjBwC/I,GAAxC8I,EAAA/I,GAME+I,EAAFhG,UAAAkG,MAAE,WACEvH,KAAKsH,WAAW3B,cAAc4B,SAGhCF,EAAFhG,UAAAmG,cAAE,WACE,MAAOxH,MAAKsH,WAAW3B,cAAc8B,YAGvCJ,EAAFhG,UAAAqG,eAAE,WACE,MAAO1H,MAAKsH,WAAW3B,cAAcgC,4BAvBzCpK,KAACiB,EAAAA,UAADV,OACEW,SAAU,uBACVmJ,QAAS,YACT1I,MACE2I,2BAA4B,WAC5BC,uBAAwB,sDAnB5BvK,KAAmBC,EAAAA,cAuCnB6J,GAjBwCF,ICWlCY,GACFC,EAAAA,iCAAiCC,SAAS,kBA6B9C,QAAAC,MAA+B,MAA/BA,MACaC,GACTC,EAAmBF,IASvBG,GAAA,SAAA/J,GAgFE,QAAF+J,GAAsB3C,EACA4C,EACAC,EACYzC,EAEZ0C,EACAC,GANpB,GAAF3I,GAOIxB,EAPJgF,KAAAtD,OAAAA,IAAsBF,GAAtB4F,YAAsBA,EACA5F,EAAtBwI,mBAAsBA,EACAxI,EAAtByI,eAAsBA,EACYzI,EAAlCgG,KAAkCA,EAEZhG,EAAtB0I,QAAsBA,EACA1I,EAAtB2I,UAAsBA,EA7DZ3I,EAAV4I,gBAA4B,EAGlB5I,EAAV6I,uBAAkC,EAGf7I,EAAnB8I,WAAgC,GAAIC,GAAAA,QAGlC/I,EAAFgJ,yBAA4B,EAG1BhJ,EAAFiJ,qBAAwB,EAGtBjJ,EAAFkJ,sBAAyB,EAkBflJ,EAAVmJ,eAA2B,GAAIJ,GAAAA,QAcrB/I,EAAVoJ,eAAmC,EAGdpJ,EAArBqJ,mBAAgE,GAAIC,GAAAA,aAG/CtJ,EAArBuJ,aAA0D,GAAID,GAAAA,YAW9D,IAAUE,GAAU5D,EAAYC,cACtB4D,EAAY,WAChBC,EAAAA,UAAUF,EAAS,cAChBvH,KAAK0H,EAAAA,UAAU3J,EAAK8I,aACpB3G,UAAU,WACTnC,EAAK4J,yBAKPlB,GAEFA,EAAQmB,kBAAkBJ,GAE1BA,MAzBN,MAhEkChL,GAAlC8J,EAAA/J,GA+CEqF,OAAFC,eACMyE,EADNhH,UAAA,qBAAE,WAC8B,MAAOrB,MAAKkJ,oBAC1C,SAAkBrF,GAChBA,EAAQ+F,EAAAA,qBAAqB/F,GAC7B7D,KAAK2I,sBAAwB3I,KAAKkJ,gBAAkBrF,EACpD7D,KAAKkJ,eAAiBrF,EAElB7D,KAAK6J,aACP7J,KAAK6J,YAAYC,sBAAsBjG,oCAsC3CwE,EAAFhH,UAAA0I,sBAAE,WAEM/J,KAAKgK,gBAAkBhK,KAAKiK,eAAezH,SAC7CxC,KAAKkK,mBACLlK,KAAKgK,eAAiBhK,KAAKiK,eAAezH,OAC1CxC,KAAKsI,mBAAmB6B,gBAKtBnK,KAAK2I,wBACP3I,KAAKoK,eAAepK,KAAKkJ,gBACzBlJ,KAAKqK,0BACLrK,KAAKsK,4BACLtK,KAAK2I,uBAAwB,EAC7B3I,KAAKsI,mBAAmB6B,gBAKtBnK,KAAKuK,yBACPvK,KAAKwK,2BACLxK,KAAKuK,wBAAyB,EAC9BvK,KAAKsI,mBAAmB6B,iBAK5B9B,EAAFhH,UAAAoJ,eAAE,SAAetF,GAEb,IAAIuF,EAAAA,eAAevF,GAInB,OAAQA,EAAMwF,SACZ,IAAKC,GAAAA,KACH5K,KAAK6J,YAAYgB,qBACjB1F,EAAM2F,gBACN,MACF,KAAKC,GAAAA,IACH/K,KAAK6J,YAAYmB,oBACjB7F,EAAM2F,gBACN,MACF,KAAKG,GAAAA,MACL,IAAKC,GAAAA,MACHlL,KAAKmJ,mBAAmB3D,KAAKxF,KAAKmL,YAClChG,EAAM2F,gBACN,MACF,SACE9K,KAAK6J,YAAYuB,UAAUjG,KAOjCkD,EAAFhH,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,KACUsL,EAAYtL,KAAK8F,KAAO9F,KAAK8F,KAAKyF,OAASC,EAAAA,GAAa,MACxDC,EAASzL,KAAKuI,eAAegD,OAAO,KACpCG,EAAU,WACd5L,EAAKoK,mBACLpK,EAAKwK,4BAGPtK,MAAK6J,YAAc,GAAI8B,GAAAA,gBAAgB3L,KAAKiK,gBACzC2B,0BAA0B5L,KAAK6F,uBAC/BgG,WAEH7L,KAAK6J,YAAYiC,iBAAiB,GAID,mBAA1BC,uBAAwCA,sBAAsBL,GAAWA,IAIhFnH,EAAAA,MAAM+G,EAAWG,GAAQ1J,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aAAa3G,UAAU,WAClEyJ,IACA5L,EAAK+J,YAAY+B,0BAA0B9L,EAAK+F,yBAMlD7F,KAAK6J,YAAY0B,OAAOxJ,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aAAa3G,UAAU,SAAA+J,GACjElM,EAAKuJ,aAAa7D,KAAKwG,GACvBlM,EAAKmM,aAAaD,MAItB3D,EAAFhH,UAAA6K,gBAAE,WAAA,GAAFpM,GAAAE,IAEIwJ,GAAAA,UAAUxJ,KAAKmM,mBAAmBxG,cAAe,aAAcoC,IAC5DhG,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aACpB3G,UAAU,WACTnC,EAAKsM,sBAAsB,YAG/B5C,EAAAA,UAAUxJ,KAAKqM,eAAe1G,cAAe,aAAcoC,IACxDhG,KAAK0H,EAAAA,UAAUzJ,KAAK4I,aACpB3G,UAAU,WACTnC,EAAKsM,sBAAsB,YAIjC/D,EAAFhH,UAAAiL,YAAE,WACEtM,KAAK4I,WAAW9E,OAChB9D,KAAK4I,WAAW5D,WAChBhF,KAAKiJ,eAAejE,YAMtBqD,EAAFhH,UAAAkL,kBAAE,WAAA,GAAFzM,GAAAE,KACUwM,EAAcxM,KAAK0F,YAAYC,cAAc6G,WAKnD,IAAIA,IAAgBxM,KAAKyM,oBAAqB,CAC5CzM,KAAKyM,oBAAsBD,CAEjC,IAAYE,GAAe,WACnB5M,EAAKoK,mBACLpK,EAAKwK,4BACLxK,EAAKwI,mBAAmB6B,eAM1BnK,MAAKwI,QAAUxI,KAAKwI,QAAQmE,IAAID,GAAgBA,MAWpDrE,EAAFhH,UAAA6I,iBAAE,WACElK,KAAK4M,0BACL5M,KAAKqK,0BACLrK,KAAKwK,4BAIP7G,OAAFC,eAAMyE,EAANhH,UAAA,kBAAE,WACE,MAAOrB,MAAK6J,YAAc7J,KAAK6J,YAA2B,gBAAI,OAIhE,SAAehG,GACR7D,KAAK6M,cAAchJ,IAAU7D,KAAKmL,aAAetH,GAAU7D,KAAK6J,aAIrE7J,KAAK6J,YAAYiD,cAAcjJ,oCAOjCwE,EAAFhH,UAAAwL,cAAE,SAAcxK,GACZ,IAAKrC,KAAKiK,eAAkB,OAAO,CAEvC,IAAU8C,GAAM/M,KAAKiK,eAAiBjK,KAAKiK,eAAe+C,UAAU3K,GAAS,IACzE,SAAS0K,IAAQA,EAAIE,UAOvB5E,EAAFhH,UAAA4K,aAAE,SAAaiB,GAKX,GAJIlN,KAAK8I,yBACP9I,KAAKoK,eAAe8C,GAGlBlN,KAAKiK,gBAAkBjK,KAAKiK,eAAezH,OAAQ,CACrDxC,KAAKiK,eAAe+C,UAAUE,GAAU3F,OAK9C,IAAY4F,GAAcnN,KAAKoN,kBAAkBzH,cACrCM,EAAMjG,KAAK6F,qBAGfsH,GAAYE,WADH,OAAPpH,EACuB,EAEAkH,EAAYG,YAAcH,EAAYxF,cAMrEU,EAAFhH,UAAAwE,oBAAE,WACE,MAAO7F,MAAK8F,MAA4B,QAApB9F,KAAK8F,KAAKjC,MAAkB,MAAQ,OAI1DwE,EAAFhH,UAAAmJ,yBAAE,WACF,GAAU+C,GAAiBvN,KAAKuN,eACtBC,EAAWxN,KAAKyI,UAChBgF,EAA4C,QAA/BzN,KAAK6F,uBAAmC0H,EAAiBA,CAQ5EvN,MAAK0N,SAAS/H,cAAcgI,MAAMC,UAAY,cAAcC,KAAKC,MAAML,GAA3E,MAOQD,IAAaA,EAASO,SAAWP,EAASQ,QAC5ChO,KAAKoN,kBAAkBzH,cAAc0H,WAAa,IAKtD1J,OAAFC,eAAMyE,EAANhH,UAAA,sBAAE,WAA+B,MAAOrB,MAAK0I,qBAC3C,SAAmB7E,GACjB7D,KAAKiO,UAAUpK,oCAWjBwE,EAAFhH,UAAA6M,cAAE,SAAcC,GAChB,GAAUC,GAAapO,KAAKoN,kBAAkBzH,cAAcgC,YAGlD0G,GAA6B,UAAbF,GAAyB,EAAI,GAAKC,EAAa,CAErE,OAAOpO,MAAKiO,UAAUjO,KAAK0I,gBAAkB2F,IAI/ChG,EAAFhH,UAAAiN,sBAAE,SAAsBH,GACpBnO,KAAK0J,gBACL1J,KAAKkO,cAAcC,IASrB9F,EAAFhH,UAAA+I,eAAE,SAAemE,GACjB,GAAUC,GAAgBxO,KAAKiK,eAAiBjK,KAAKiK,eAAe+C,UAAUuB,GAAc,IAExF,IAAKC,EAAL,CAGJ,GAEQC,GAAwBC,EAFtBN,EAAapO,KAAKoN,kBAAkBzH,cAAcgC,WAGtB,QAA9B3H,KAAK6F,uBACP4I,EAAiBD,EAAchH,gBAC/BkH,EAAgBD,EAAiBD,EAAc9G,mBAE/CgH,EAAgB1O,KAAK0N,SAAS/H,cAAcgC,YAAc6G,EAAchH,gBACxEiH,EAAiBC,EAAgBF,EAAc9G,iBAGrD,IAAUiH,GAAmB3O,KAAKuN,eACxBqB,EAAkB5O,KAAKuN,eAAiBa,CAE1CK,GAAiBE,EAEnB3O,KAAKuN,gBAAkBoB,EAAmBF,EApajB,GAqahBC,EAAgBE,IAEzB5O,KAAKuN,gBAAkBmB,EAAgBE,EAvad,MAmb7BvG,EAAFhH,UAAAuL,wBAAE,WACF,GAAUiC,GACF7O,KAAK0N,SAAS/H,cAAc2H,YAActN,KAAK0F,YAAYC,cAAcgC,WAExEkH,KACH7O,KAAKuN,eAAiB,GAGpBsB,IAAc7O,KAAK8I,yBACrB9I,KAAKsI,mBAAmB6B,eAG1BnK,KAAK8I,wBAA0B+F,GAYjCxG,EAAFhH,UAAAgJ,wBAAE,WAEErK,KAAKgJ,qBAA8C,GAAvBhJ,KAAKuN,eACjCvN,KAAK+I,oBAAsB/I,KAAKuN,gBAAkBvN,KAAK8O,wBACvD9O,KAAKsI,mBAAmB6B,gBAU1B9B,EAAFhH,UAAAyN,sBAAE,WAGE,MAFwB9O,MAAK0N,SAAS/H,cAAc2H,YACjCtN,KAAKoN,kBAAkBzH,cAAcgC,aACf,GAI3CU,EAAFhH,UAAAiJ,0BAAE,WACF,GAAUyE,GAAuB/O,KAAKiK,gBAAkBjK,KAAKiK,eAAezH,OACpExC,KAAKiK,eAAe+C,UAAUhN,KAAKgP,eAAe1H,WAAW3B,cAC7D,IAEJ3F,MAAKiP,QAAQC,eAAc,IAI7B7G,EAAFhH,UAAAqI,cAAE,WACE1J,KAAKiJ,eAAenF,QAQtBuE,EAAFhH,UAAA+K,sBAAE,SAAsB+B,GAAtB,GAAFrO,GAAAE,IAEIA,MAAK0J,gBAGLyF,EAAAA,MAjfwB,IAMG,KA6exBpN,KAAK0H,EAAAA,UAAUlF,EAAAA,MAAMvE,KAAKiJ,eAAgBjJ,KAAK4I,cAC/C3G,UAAU,WACH,GAAAmN,GAAdtP,EAAAoO,cAAAC,GAAekB,EAAfD,EAAAC,kBAAkCC,EAAlCF,EAAAE,UAGyB,IAAbA,GAAkBA,GAAYD,IAChCvP,EAAK4J,mBAULrB,EAAVhH,UAAA4M,UAAE,SAAkBlI,GACpB,GAAUsJ,GAAoBrP,KAAK8O,uBAQ/B,OAPA9O,MAAK0I,gBAAkBmF,KAAK0B,IAAI,EAAG1B,KAAK2B,IAAIH,EAAmBtJ,IAI/D/F,KAAKuK,wBAAyB,EAC9BvK,KAAKqK,2BAEGgF,kBAAZA,EAA+BC,SAAUtP,KAAK0I,iCAvf9CnL,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,iBACEQ,SAAU,0oCACVI,QAAF,g8EACEuI,QAAF,iBACEtI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACET,MACFC,MAAA,iBACMsQ,qDAAN,0BACIC,6BAAJ,yHAxEAnS,KAAEoS,EAAAA,gBAHFpS,KAAEqS,EAAAA,eAAFhS,aAAAL,KAAAsS,EAAAA,aALAtS,KAAQuS,EAAAA,SAHRvS,KAAmBwS,EAAAA,YA6BnB1H,EAAAzI,2GA8DAwN,oBAAA7P,KAAAuJ,EAAAA,UAAAhJ,MAAA,sBACA4P,WAAAnQ,KAAAuJ,EAAAA,UAAAhJ,MAAA,aACAuO,iBAAA9O,KAAAuJ,EAAAA,UAAAhJ,MAAA,mBACAqO,qBAAA5O,KAAAuJ,EAAAA,UAAAhJ,MAAA,uBACAkR,gBAAAzR,KAAAS,EAAAA,QACAmL,qBAAA5L,KAAGoJ,EAAAA,SAuCH0C,eAAA9L,KAAAoJ,EAAAA,UAiBA0B,OCrHI2H,GAAS,gBAGb,QAAAC,MAKA,MAAAA,MAYaC,GAAkB,GAAIC,GAAAA,eAAe,iCAKhD,QAAFC,GAAqB1K,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAA0K,MACaC,GACTC,EAAWlI,EAAmBgI,IAAkB,WAOpDG,GAAA,SAAAjS,GA6FE,QAAFiS,GAAcjJ,EACQgB,EAC6BkI,GAFjD,GAAF1Q,GAGIxB,EAHJgF,KAAAtD,KAGUsH,IAHVtH,WACsBF,GAAtBwI,mBAAsBA,EArEZxI,EAAV2Q,eAA0C,EAGhC3Q,EAAV4Q,sBAA0C,EAGhC5Q,EAAV6Q,kBAA8BC,EAAAA,aAAaC,MAGjC/Q,EAAVgR,sBAAkCF,EAAAA,aAAaC,MAMrC/Q,EAAViR,gBAAoC,EAQ1BjR,EAAVoJ,eAA0C,KAG/BpJ,EAAXkR,eAAkD,QA2B7BlR,EAArBmR,oBAAiE,GAAI7H,GAAAA,aAGhDtJ,EAArBoR,YACM,GAAI9H,GAAAA,aAGWtJ,EAArBqR,cAAyD,GAAI/H,GAAAA,aAGxCtJ,EAArBsR,kBACM,GAAIhI,GAAAA,cAAgC,GAQtCtJ,EAAKuR,SAAWrB,KAChBlQ,EAAKmH,kBAAoBuJ,GAAiBA,EAAcvJ,kBACpDuJ,EAAcvJ,kBAAoB,UAX1C,MAzEiC1I,GAAjCgS,EAAAjS,GAsBEqF,OAAFC,eACM2M,EADNlP,UAAA,qBAAE,WAC+B,MAAOrB,MAAK+Q,oBAC3C,SAAkBlN,GAAkB7D,KAAK+Q,eAAiBO,EAAAA,sBAAsBzN,oCAIhFF,OAAFC,eACM2M,EADNlP,UAAA,qBAAE,WACqC,MAAOrB,MAAKkJ,oBACjD,SAAkBrF,GAChB7D,KAAKyQ,eAAiB7G,EAAAA,qBAAqB/F,EAAO,uCAQpDF,OAAFC,eACM2M,EADNlP,UAAA,yBAAE,WACkC,MAAOrB,MAAKuR,wBAC9C,SAAsB1N,GACpB7D,KAAKuR,mBAAqB,QAAQC,KAAK3N,GAASA,EAAQ,KAAOA,mCAKjEF,OAAFC,eACM2M,EADNlP,UAAA,uBAAE,WACsC,MAAOrB,MAAKyR,sBAClD,SAAoB5N,GACtB,GAAU8B,GAA6B3F,KAAK0F,YAAYC,aAEpDA,GAAc+L,UAAUC,OAAO,kBAAkB3R,KAAK4R,iBAElD/N,GACF8B,EAAc+L,UAAUG,IAAI,kBAAkBhO,GAGhD7D,KAAKyR,iBAAmB5N,mCAmC1B0M,EAAFlP,UAAA0I,sBAAE,WAAA,GAAFjK,GAAAE,KAGU8R,EAAgB9R,KAAKyQ,eAAiBzQ,KAAK+R,eAAe/R,KAAKyQ,eAIrE,IAAIzQ,KAAKkJ,gBAAkB4I,EAAe,CAC9C,GAAYE,GAAoC,MAAvBhS,KAAKkJ,cAEnB8I,IACHhS,KAAKoR,kBAAkB5L,KAAKxF,KAAKiS,mBAAmBH,IAKtDI,QAAQC,UAAUC,KAAK,WACrBtS,EAAKuS,MAAMlQ,QAAQ,SAAC4K,EAAK1K,GAAU,MAAA0K,GAAIuF,SAAWjQ,IAAUyP,IAEvDE,GACHlS,EAAKmR,oBAAoBzL,KAAKsM,KAMpC9R,KAAKqS,MAAMlQ,QAAQ,SAAC4K,EAAa1K,GAC/B0K,EAAIhH,SAAW1D,EAAQyP,EAII,MAAvBhS,EAAKoJ,gBAA0C,GAAhB6D,EAAIhH,UAAkBgH,EAAI1G,SAC3D0G,EAAI1G,OAASyL,EAAgBhS,EAAKoJ,kBAIlClJ,KAAKkJ,iBAAmB4I,IAC1B9R,KAAKkJ,eAAiB4I,EACtB9R,KAAKsI,mBAAmB6B,iBAI5BoG,EAAFlP,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,IACIA,MAAKuS,wBAILvS,KAAK2Q,kBAAoB3Q,KAAKqS,MAAMlO,QAAQlC,UAAU,WAKpD,GAJsBnC,EAAKiS,eAAejS,EAAK2Q,kBAIzB3Q,EAAKoJ,eAGzB,IAAK,GAFCsJ,GAAO1S,EAAKuS,MAAMrF,UAEf/J,EAAI,EAAGA,EAAIuP,EAAKhQ,OAAQS,IAC/B,GAAIuP,EAAKvP,GAAGqP,SAAU,CAIpBxS,EAAK2Q,eAAiB3Q,EAAKoJ,eAAiBjG,CAC5C,OAKNnD,EAAKyS,wBACLzS,EAAKwI,mBAAmB6B,kBAI5BoG,EAAFlP,UAAAiL,YAAE,WACEtM,KAAK2Q,kBAAkB8B,cACvBzS,KAAK8Q,sBAAsB2B,eAI7BlC,EAAFlP,UAAAqR,cAAE,WACM1S,KAAK2S,YACP3S,KAAK2S,WAAWrI,6BAIpBiG,EAAFlP,UAAAuR,cAAE,SAAcvQ,GACZrC,KAAKkR,YAAY1L,KAAKxF,KAAKiS,mBAAmB5P,KAGxCkO,EAAVlP,UAAA4Q,mBAAE,SAA2B5P,GAC7B,GAAU8C,GAAQ,GAAI8K,GAKlB,OAJA9K,GAAM9C,MAAQA,EACVrC,KAAKqS,OAASrS,KAAKqS,MAAM7P,SAC3B2C,EAAM4H,IAAM/M,KAAKqS,MAAMrF,UAAU3K,IAE5B8C,GASDoL,EAAVlP,UAAAkR,sBAAE,WAAA,GAAFzS,GAAAE,IACQA,MAAK8Q,uBACP9Q,KAAK8Q,sBAAsB2B,cAG7BzS,KAAK8Q,sBAAwBvM,EAAAA,MAAjCxE,UAAA,GAA0CC,KAAKqS,MAAM7N,IAAI,SAAAuI,GAAO,MAAAA,GAAI8F,iBAC7D5Q,UAAU,WAAM,MAAAnC,GAAKwI,mBAAmB6B,kBAIrCoG,EAAVlP,UAAA0Q,eAAE,SAAuB1P,GAIrB,MAAOwL,MAAK2B,IAAIxP,KAAKqS,MAAM7P,OAAS,EAAGqL,KAAK0B,IAAIlN,GAAS,EAAG,KAI9DkO,EAAFlP,UAAAyR,eAAE,SAAe7P,GACb,MAAO,iBAAiBjD,KAAKqR,SAAjC,IAA6CpO,GAI3CsN,EAAFlP,UAAA0R,iBAAE,SAAiB9P,GACf,MAAO,mBAAmBjD,KAAKqR,SAAnC,IAA+CpO,GAO7CsN,EAAFlP,UAAA2R,yBAAE,SAAyBC,GACvB,GAAKjT,KAAK+Q,gBAAmB/Q,KAAK0Q,sBAAlC,CAEJ,GAAUwC,GAAuBlT,KAAKmT,gBAAgBxN,aAElDuN,GAAQvF,MAAMyF,OAASpT,KAAK0Q,sBAAwB,KAIhD1Q,KAAKmT,gBAAgBxN,cAAc0N,eACrCH,EAAQvF,MAAMyF,OAASH,EAAY,QAKvC1C,EAAFlP,UAAAiS,4BAAE,WACF,GAAUJ,GAAUlT,KAAKmT,gBAAgBxN,aACrC3F,MAAK0Q,sBAAwBwC,EAAQtN,aACrCsN,EAAQvF,MAAMyF,OAAS,GACvBpT,KAAKmR,cAAc3L,QAIrB+K,EAAFlP,UAAAkS,aAAE,SAAaxG,EAAayG,EAAyBnR,GAC5C0K,EAAIE,WACPjN,KAAKgP,cAAgBwE,EAAUrI,WAAa9I,IAKhDkO,EAAFlP,UAAAoS,aAAE,SAAa1G,EAAa2G,GACxB,MAAI3G,GAAIE,SACC,KAEFjN,KAAKgP,gBAAkB0E,EAAM,GAAK,kBAnR7CnW,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,gBACEO,SAAU,cACVC,SAAU,ghDACVI,QAAF,s6CACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEiI,QAAF,QAAA,iBACE1I,MACFC,MAAA,gBACMwU,uCAAN,gBACIC,wCAAJ,qHAxEArW,SAAEsW,GAAFjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAAoS,MAAA3S,KAAAsS,EAAAA,cA6JAU,EAAA3Q,wHA7EA+S,aAAApV,KAAAuJ,EAAAA,UAAAhJ,MAAA,eAEAiW,gBAAAxW,KAAAS,EAAAA,QAEAgR,gBAAAzR,KAAAS,EAAAA,QAeAgT,iBAAAzT,KAAAS,EAAAA,QAMAiJ,oBAAA1J,KAAAS,EAAAA,QAQA4T,kBAAArU,KAAAS,EAAAA,QAGAiT,sBAAA1T,KAAAoJ,EAAAA,SAQAuK,cAAA3T,KAAAoJ,EAAAA,SAgBAwK,gBAAA5T,KAAAoJ,EAAAA,SAGAyK,oBAAG7T,KAAMoJ,EAAAA,UAOT4J,qBChHE,QAAFyD,GAAqBtO,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAAsO,MACaC,GACT7L,EAAmBkI,EAAW0D,GAAe,YAMjDE,GAAA,SAAA5V,GA0CE,QAAF4V,GAAc5M,EACoBxB,EACZ0C,EACAF,EACAC,GAJpB,GAAFzI,GAKIxB,EALJgF,KAAAtD,KAKUsH,IALVtH,WACkCF,GAAlCgG,KAAkCA,EACZhG,EAAtB0I,QAAsBA,EACA1I,EAAtBwI,mBAAsBA,EACAxI,EAAtByI,eAAsBA,EA/BHzI,EAAnBqU,WAAgC,GAAItL,GAAAA,UAYpC,MAhB+BtK,GAA/B2V,EAAA5V,GAgBEqF,OAAFC,eACMsQ,EADN7S,UAAA,uBAAE,WACsC,MAAOrB,MAAKyR,sBAClD,SAAoB5N,GACtB,GAAU8B,GAA6B3F,KAAK0F,YAAYC,aAEpDA,GAAc+L,UAAUC,OAAO,kBAAkB3R,KAAK4R,iBAElD/N,GACF8B,EAAc+L,UAAUG,IAAI,kBAAkBhO,GAGhD7D,KAAKyR,iBAAmB5N,mCAgB1BqQ,EAAF7S,UAAA+S,iBAAE,SAAiB9K,GAGftJ,KAAKqU,qBAAuB/K,EAC5BtJ,KAAKsI,mBAAmB6B,gBAG1B+J,EAAF7S,UAAAgK,mBAAE,WAAA,GAAFvL,GAAAE,IACIA,MAAKwI,QAAQmB,kBAAkB,WACnC,GAAY2B,GAAYxL,EAAKgG,KAAOhG,EAAKgG,KAAKyF,OAASC,EAAAA,GAAa,KAE9D,OAAOjH,GAAAA,MAAM+G,EAAWxL,EAAKyI,eAAegD,OAAO,KAC9CxJ,KAAK0H,EAAAA,UAAU3J,EAAKqU,aACpBlS,UAAU,WAAM,MAAAnC,GAAKwU,oBAK9BJ,EAAF7S,UAAA0I,sBAAE,WACE,GAAI/J,KAAKqU,mBAAoB,CACjC,GAAYE,GAAYvU,KAAKwU,UAAUC,KAAK,SAAA1H,GAAO,MAAAA,GAAI2H,QAEjD1U,MAAK2U,mBAAqBJ,EAAYA,EAAU7O,YAAc,KAC9D1F,KAAKsU,eACLtU,KAAKqU,oBAAqB,IAI9BH,EAAF7S,UAAAiL,YAAE,WACEtM,KAAKmU,WAAWrQ,OAChB9D,KAAKmU,WAAWnP,YAIlBkP,EAAF7S,UAAAiT,aAAE,WACMtU,KAAK2U,oBACP3U,KAAKiP,QAAQ2F,OACb5U,KAAKiP,QAAQC,eAAelP,KAAK2U,mBAAmBhP,gBAEpD3F,KAAKiP,QAAQ4F,uBA7FnBtX,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,oBACEO,SAAU,0BACV4I,QAAF,QAAA,iBACE3I,SAAU,6HACVI,QAAS,83CACTH,MAAFC,MAAA,mBACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,0HAnDApC,KAAEuS,EAAAA,SAZFvS,KAAQkJ,EAAAA,oBAgBRlJ,KAAEoS,EAAAA,iBAdFuE,EAAAtU,wJA0EAgS,kBAAArU,KAAAS,EAAAA,SAOAkW,OAyEAY,GAAA,yBAAA,MAAAA,oCAQA,QAAAC,GAAAC,EAAAtP,EAAAuP,EAAAzH,EAAA0H,EAAAhI,EAAAiI,GAaA,GAAArV,GAAAxB,EAAAgF,KAAAtD,OAAAA,IAyDA,OArBAF,GAAAkV,WAAAA,EAAElV,EAAF4F,YAAAA,EAAsB5F,EAAtBqV,cAAAA,kDAhCYrV,EAAZsV,eAAAC,mBAAA3P,EAAAC,eA8CI7F,EAAKwV,aAATJ,MACIpV,EAAKoN,SAATqI,SAAArI,IAA0C,EAC1CiI,GAEAA,EAAAK,QAA6B9P,GAG7B5F,EA/CA,0DAAA2V,2EAEAzV,KAAA0V,UAAA7R,EACQ7D,KAAKgV,WAAbZ,iBAAApU,KAAA0F,eAGAiQ,YAAA,EACEC,cAAF,kJAcA5V,KAAAsV,aAAArI,UAEA0I,YAAA,EACEC,cAAF,kFA2BA5V,KAAAmV,eACQnV,KAARmV,cAAAU,eAAA7V,KAA+C0F,cAI/CqP,EAAAnX,aACAL,KAAAiB,EAAAA,UAAAV,+CAhFAkB,SAAA,aACE4I,QAAF,WAAA,gBAAA,YACE1I,MACFC,MAAA,eACM2W,sBAAN,SACIhO,uBAAJ,sBACIiO,kBAAJ,WACIlO,2BAAJ,WACImO,+BAAJ,gFAyCAzY,KAAkCuS,EAAAA,SAzMlCvS,KAAEwS,EAAAA,WAIFxS,SAAEsW,GAAFjW,aAAAL,KAAAsS,EAAAA,WAAAtS,KAAAuW,EAAAA,OAAAhW,MAAAmY,QAfA1Y,KAAQI,OAAQC,aAAhBL,KAAAM,EAAAA,UAAAC,MAAA,gBAwNAP,KAAA2Y,EAAAA,gBAhLAnB,EAAAnV,yCAkJAmV,OCzKAoB,GAAA,WAAA,QAAAA,MAiC4B,sBAjC5B5Y,KAACkD,EAAAA,SAAD3C,OACE4C,SACEE,EAAAA,aACAC,GACAuV,EAAAA,aACAC,GACAC,EAAAA,gBACAC,EAAAA,YAGFzV,SACED,GACA0P,GACAiG,GACAC,GACAvC,GACAa,GACA2B,IAEF3V,cACEwP,GACAiG,GACAC,GACAE,GACAtP,GACA6M,GACAa,GACA9P,GACA2R,GACAvO,GACAqO,QAGJP,mBC9BE,QAAFU,GAAqBnR,GAAA1F,KAArB0F,YAAqBA,EACrB,MAAAmR,MACaC,GACTxG,EAAWuG,IAEfE,GAAA,WAAA,QAAAA,MAK4B,sBAL5BxZ,KAACiB,EAAAA,UAADV,OACEW,SAAU,kBACVO,SAAU,gBACVE,MAAOC,MAAS,uBAElB4X,KAEAC,GAAA,SAAA1Y,GAqBE,QAAF0Y,GACI1P,EACQmB,EACUwO,GAHpB,GAAFnX,GAIIxB,EAJJgF,KAAAtD,KAIUsH,IAJVtH,WAEYF,GAAZ2I,UAAYA,EAKR3I,EAAKoX,UAAYD,IATrB,MAJgC1Y,GAAhCyY,EAAA1Y,GAgBE0Y,EAAF3V,UAAA6K,gBAAE,WAAA,GAAFpM,GAAAE,IACSmX,GAAAA,aAAgBnX,KAAKyI,UAAU2O,YAIpCpX,KAAKqX,0BACLrX,KAAKsX,aAAanT,QAAQlC,UAAU,WAAM,MAAAnC,GAAKuX,8BAMzCL,EAAV3V,UAAAgW,wBAAE,WAAA,GAAFvX,GAAAE,IACI,IAAKA,KAAKsX,aAAa9U,OAAvB,CAMwBZ,MAAM2V,KAAkBvX,KAAK0F,YAAYC,cAAc6R,YAC5EC,OAAO,SAAA1Z,GAAQ,QAAEA,EAAK2T,WAAa3T,EAAK2T,UAAUgG,SAAS,sBAC3DD,OAAO,SAAA1Z,GAAQ,MAAAA,GAAK4Z,YAAc7X,EAAKoX,UAAYpX,EAAKoX,UAAUU,aAAe,KACjFC,KAAK,SAAA9Z,GAAQ,SAAGA,EAAKyO,cAAezO,EAAKyO,YAAYsL,WAGtDC,sBAxDNxa,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,cACEO,SAAU,aACVC,SAAU,8EACVI,QAAF,8hBACEuI,QAAF,SACE1I,MACFC,MAAA,cACM6Y,oCAAN,0BACIC,iCAAJ,6BAEAxY,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAnCAjC,SAAEsW,GAAFjW,aAAAL,KAAAuW,EAAAA,OAAAhW,MAAAoa,EAAAA,eAgDAlB,EAAApX,mEALAoX,OC9CAmB,GAAA,WAAA,QAAAA,MAK+B,sBAL/B5a,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUG,IACVC,SAAUkW,GAAYD,GAAelW,IACrCE,cAAeiW,GAAYD,QAE7BoB,KCDAha,GAAA,WAIE,QAAFA,GAAqBia,GAAApY,KAArBoY,cAAqBA,EACrB,sBALA7a,KAACiB,EAAAA,UAADV,OACEW,SAAU,8DARZlB,KAAE8a,EAAAA,oBAYFla,KrBOama,GACTC,EAAcnR,EAAchK,EAAAA,cAEnBgB,GAELma,EAAcnR,EAAcoR,EAAAA,oBAKpCjY,GAAA,SAAAjC,GAgBE,QAAFiC,GAAwBmF,EACA+S,EACavL,GAFnC,GAAFpN,GAGIxB,EAHJgF,KAAAtD,KAGU0F,EAAa+S,IAHvBzY,WAAwBF,GAAxB4F,YAAwBA,EACA5F,EAAxB2Y,MAAwBA,EAHb3Y,EAAXV,KAAwC,WAOpCU,EAAKoN,SAAWwL,OAAOxL,IAAa,IAExC,MAXoC3O,GAApCgC,EAAAjC,kBAZAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,gBACVO,SAAU,cACV4I,QAAS,WAAY,YACrB1I,MACEyZ,uBAAwB,aACxBC,oBAAqB,qCACrBC,cAAe,OACf1Z,MAAS,iBAEXT,YAAavB,QAASC,EAAAA,YAAaC,YAAakD,4CAnClDhD,KAAEC,EAAAA,aANFD,KAA2BE,EAAAA,UAiD3BF,KAAAI,OAAAC,aAAAL,KAAeM,EAAAA,UAAfC,MAAyB,mCAJzBsB,OAAA7B,KAAGS,EAAAA,SASHuC,GAXoC+X,IAgBpChY,GAAA,SAAAhC,GAAA,QAAAgC,oDASA,MAFuC/B,GAAvC+B,EAAAhC,kBAPAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,mBACVmJ,QACE,4BAEFlJ,YAAavB,QAAS2b,EAAAA,eAAgBzb,YAAaiD,0BAGrDyD,OAAAxG,KAAGS,EAAAA,MAAHF,MAAS,kBACTwC,GAFuCwY,EAAAA,gBAOvCxb,GAAA,SAAAgB,GAqBE,QAAFhB,GAAwBoI,EACA+S,EACAM,EACa7L,GAHnC,GAAFpN,GAIIxB,EAJJgF,KAAAtD,KAIU0F,EAAa+S,EAAOM,IAJ9B/Y,WAAwBF,GAAxB4F,YAAwBA,EACA5F,EAAxB2Y,MAAwBA,EACA3Y,EAAxBiZ,SAAwBA,EAIpBjZ,EAAKoN,SAAWwL,OAAOxL,IAAa,IAaxC,MA1B0C3O,GAA1CjB,EAAAgB,GAmBEhB,EAAF+D,UAAAgK,mBAAE,WACE/M,EAAJ+C,UAAUgK,mBAAV/H,KAAAtD,OAGE1C,EAAF+D,UAAAiL,YAAE,WACEhO,EAAJ+C,UAAUiL,YAAVhJ,KAAAtD,sBAtCAzC,KAACiB,EAAAA,UAADV,OACEW,SAAU,uBACVO,SAAU,oBACVE,MACEyZ,uBAAwB,aACxBE,cAAe,OACf1Z,MAAS,wBAEXyI,QAAS,WAAY,YACrBlJ,YACGvB,QAASqb,EAAAA,kBAAmBnb,YAAaC;gBACzCH,QAASC,EAAAA,YAAaC,YAAaC,4CA9ExCC,KAAEC,EAAAA,aANFD,KAA2BE,EAAAA,UAQ3BF,KAAEG,EAAAA,kBAyFFH,KAAAI,OAAAC,aAAAL,KAAeM,EAAAA,UAAfC,MAAyB,mCAPzBC,OAAAR,KAAGS,EAAAA,MAAHF,MAAS,uBAETG,aAAAV,KAAGW,EAAAA,gBAAHJ,MAAmBK,OAqBnBb,GA1B0Cc,IClF1CC,GAAA,SAAAC,GAAA,QAAAD,oDAWA,MAP2CE,GAA3CF,EAAAC,kBAJAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,uBACVC,YAAavB,QAASwB,EAAAA,mBAAoBtB,YAAagB,0BAKzDO,QAAArB,KAAGS,EAAAA,MAAHF,MAAS,wBAGTe,SAAAtB,KAAGS,EAAAA,MAAHF,MAAS,+BACTO,GAP2CM,EAAAA,oBCF3CG,GAAA,SAAAR,GAAA,QAAAQ,oDAgBA,MAFgCP,GAAhCO,EAAAR,kBAdAf,KAACwB,EAAAA,UAADjB,OAAAW,SAAA,WACEO,SAAU,UACVC,SAAU,kDACVC,MACFC,MAAA,WACMC,KAAN,QAEAC,QAAA,mLACAC,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEjB,YAAFvB,QAAAM,EAAAA,QAAkCJ,YAAlCyB,QAGAA,EAAAc,4DAGAd,cCjBAe,GAAA,SAAAvB,GAAA,QAAAuB,KAAA,GAAAC,GAAA,OAAAxB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,WAQuCF,GAAvCI,WAA4D,IAC5D,MAF0C3B,GAA1CsB,EAAAvB,kBAPAf,KAACiB,EAAAA,UAADV,OACEW,SAAU,sBACVS,MACEiB,UAAW,mBAEbzB,YAAavB,QAASiD,EAAAA,kBAAmB/C,YAAawC,0BAGxDK,YAAA3C,KAAGS,EAAAA,MAAHF,MAAS,iCACT+B,GAF0CO,EAAAA,mBCFpCC,IACJ/C,GACAgD,GACAjC,GACAwB,GACAf,GACAyB,GACApC,IAGFqC,GAAA,WAAA,QAAAA,MAK4B,sBAL5BjD,KAACkD,EAAAA,SAAD3C,OACE4C,SAAUC,EAAAA,cAAeC,EAAAA,aAAcC,IACvCC,QAAST,GACTU,aAAcV,OAEhBG,mBCeE,QAAFQ,GAAqBC,EACAC,EACAC,EACAC,GAHApB,KAArBiB,kBAAqBA,EACAjB,KAArBkB,SAAqBA,EACAlB,KAArBmB,aAAqBA,EACAnB,KAArBoB,YAAqBA,EAkErB,MA/DEJ,GAAFK,UAAAC,aAAE,SAAavD,EAASa,EACT2C,EAAkBC,GAD/B,GAAF1B,GAAAE,KAEUyB,EAAWzB,KAAKiB,kBAAkBlD,EAAMa,EAG9C,IAFA2C,EAAYG,KAAKD,GAEbzB,KAAKmB,aAAaM,GAAW,CACrC,GAAYE,GAAgB3B,KAAKoB,YAAYrD,EACnC4D,KACEC,MAAMC,QAAQF,GAChB3B,KAAK8B,iBAAiBH,EAAe/C,EAAO2C,EAAaC,GAEzDG,EAAcI,KAAKC,EAAAA,KAAK,IAAIC,UAAU,SAAAC,GACpCpC,EAAKgC,iBAAiBI,EAAUtD,EAAO2C,EAAaC,MAK5D,MAAOD,IAGTP,EAAFK,UAAAS,iBAAE,SAAiBI,EAAetD,EACf2C,EAAkBC,GADnC,GAAF1B,GAAAE,IAEIkC,GAASC,QAAQ,SAACC,EAAOC,GAC7B,GAAUC,GAA4Bd,EAAUe,OAC1CD,GAAeZ,KAAKW,GAASH,EAASM,OAAS,GAC/C1C,EAAKwB,aAAac,EAAOxD,EAAQ,EAAG2C,EAAae,MASrDtB,EAAFK,UAAAoB,aAAE,SAAaC,GAAb,GAAF5C,GAAAE,KACQuB,IAEJ,OADAmB,GAAeP,QAAQ,SAAApE,GAAQ,MAAA+B,GAAKwB,aAAavD,EAAM,EAAGwD,QACnDA,GAOTP,EAAFK,UAAAsB,qBAAE,SAAqBC,EAAYC,GAAjC,GAAF/C,GAAAE,KACQ8C,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAMT,QAAQ,SAAApE,GAEZ,IAAK,GADDiF,IAAS,EACJC,EAAI,EAAGA,GAAKnD,EAAKoB,SAASnD,GAAOkF,IACxCD,EAASA,GAAUD,EAAcE,EAE/BD,IACFF,EAAQpB,KAAK3D,GAEX+B,EAAKqB,aAAapD,KACpBgF,EAAcjD,EAAKoB,SAASnD,GAAQ,GAAK8E,EAAYK,WAAWnF,MAG7D+E,GAEX9B,oBAuBE,QAAFmC,GAAsBN,EACAO,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAFvD,GAGIxB,EAHJgF,KAAAtD,OAAAA,WAAsBF,GAAtB+C,YAAsBA,EACA/C,EAAtBsD,cAAsBA,EAbpBtD,EAAFyD,eAAmB,GAAIC,GAAAA,oBAErB1D,EAAF2D,cAAkB,GAAID,GAAAA,oBAclB1D,EAAK4D,MAAQ,GAAIF,GAAAA,gBAAqBH,KAmB1C,MApCiD9E,GAAjD4E,EAAA7E,GAMEqF,OAAFC,eAAMT,EAAN9B,UAAA,YAAE,WAAa,MAAOrB,MAAK0D,MAAMG,WAC/B,SAASA,GACP7D,KAAK0D,MAAMI,KAAKD,GAChB7D,KAAKuD,eAAeO,KAAK9D,KAAKoD,cAAcX,aAAazC,KAAK+D,OAC9D/D,KAAK6C,YAAYmB,UAAYhE,KAAKuD,eAAeM,uCAUnDV,EAAF9B,UAAA4C,QAAE,SAAQC,GAAR,GAAFpE,GAAAE,KACUmE,GACJD,EAAiBE,WACjBpE,KAAK6C,YAAYwB,eAAeC,SAChCtE,KAAKuD,eAEP,OAAOgB,GAAAA,MAAXxE,UAAA,GAAoBoE,GAASpC,KAAKyC,EAAAA,IAAI,WAGhC,MAFA1E,GAAK2D,cAAcK,KACjBhE,EAAKsD,cAAcT,qBAAqB7C,EAAKyD,eAAeM,MAAO/D,EAAK+C,cACnE/C,EAAK2D,cAAcI,UAI9BV,EAAF9B,UAAAoD,WAAE,aAGFtB,GApCiDuB,EAAAA,2BC7GjD,QAAAC,KAAA,GAAA7E,GAAA,OAAAxB,GAAAA,EAAAyB,MAAAC,KAAAC,YAAAD,WACEF,GAAF4D,MAAU,GAAIF,GAAAA,sBAkBd,MAnBgDjF,GAAhDoG,EAAArG,GAMEqF,OAAFC,eAAMe,EAANtD,UAAA,YAAE,WAAa,MAAOrB,MAAK0D,MAAMG,WAC/B,SAASA,GAAc7D,KAAK0D,MAAMI,KAAKD,oCAEvCc,EAAFtD,UAAA4C,QAAE,SAAQC,GAAR,GAAFpE,GAAAE,IACI,OAAOuE,GAAAA,MAAXxE,UAAA,IAAqBmE,EAAiBE,WAAYpE,KAAK0D,QAChD3B,KAAKyC,EAAAA,IAAI,WACR,MAAO1E,GAAKiE,SAIlBY,EAAFtD,UAAAoD,WAAE,aAGFE,GAnBgDD,EAAAA,YCRnCE,GAAU,GAAIC,GAAAA,QAAQ,iXC6CO,+BAGD,quFC7CtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACnF,QAAS,SAAU,k6CCKqB,utFCoFT,6BAGD,mCAGOC,2BAGR,kCAkBQ,2tFC9EV"}